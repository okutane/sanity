/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>

#include "llvm/ADT/Hashing.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/Support/SourceMgr.h"
#include "llvm/DebugInfo.h"
#include "llvm/IR/Type.h"
#include "llvm/IR/Value.h"
#include "llvm/IR/Constant.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/Metadata.h"
#include "llvm/Support/DebugLoc.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/Operator.h"
#include "llvm/IR/Instruction.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/BasicBlock.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Module.h"
#include "llvm/IRReader/IRReader.h"

#include "llvm/Support/raw_ostream.h"

using namespace llvm;

Module *parse(const char *filename) {
    SMDiagnostic err;
    Module *result = getLazyIRFileModule(filename, err, getGlobalContext());
    return result;
}

const char *getName(GlobalValue *gv) {
    return gv->getName().begin();
}



#include <string>

SWIGINTERN std::string llvm_Value_toString(llvm::Value *self){
        std::string result;
        raw_string_ostream out(result);
        self->print(out);
        return out.str();
    }

/* Pack binary data into a string */
SWIGINTERN char * SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}



int getModuleFunctionsSize(llvm::Module *o) {
    return o->getFunctionList().size();
}

llvm::Function *getModuleFunctionsItem(llvm::Module *o, int index) {
    ilist_iterator<llvm::Function> it = o->getFunctionList().begin();
    while(index) {
        it++;
        index--;
    }
    return it;
}



int getBasicBlockInstructionsSize(llvm::BasicBlock *o) {
    return o->getInstList().size();
}

llvm::Instruction *getBasicBlockInstructionsItem(llvm::BasicBlock *o, int index) {
    ilist_iterator<llvm::Instruction> it = o->getInstList().begin();
    while(index) {
        it++;
        index--;
    }
    return it;
}


MDNode * toMDNode(Value *o) {
    return (MDNode*)o;
}


MDString * toMDString(Value *o) {
    return (MDString*)o;
}


ConstantInt * toConstantInt(Value *o) {
    return (ConstantInt*)o;
}


GlobalVariable * toGlobalVariable(Value *o) {
    return (GlobalVariable*)o;
}


Instruction * toInstruction(Value *o) {
    return (Instruction*)o;
}


StoreInst * toStoreInst(Instruction *o) {
    return (StoreInst*)o;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_getAsUnsignedInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  llvm::StringRef arg1 ;
  unsigned int arg2 ;
  unsigned long long *arg3 = 0 ;
  llvm::StringRef *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(llvm::StringRef **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(unsigned long long **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned long long & reference is null");
    return 0;
  } 
  result = (bool)llvm::getAsUnsignedInteger(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_getAsSignedInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  llvm::StringRef arg1 ;
  unsigned int arg2 ;
  long long *arg3 = 0 ;
  llvm::StringRef *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(llvm::StringRef **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(long long **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "long long & reference is null");
    return 0;
  } 
  result = (bool)llvm::getAsSignedInteger(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1npos_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = llvm::StringRef::npos;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1StringRef_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  llvm::StringRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::StringRef *)new llvm::StringRef();
  *(llvm::StringRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1StringRef_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  llvm::StringRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (llvm::StringRef *)new llvm::StringRef((char const *)arg1);
  *(llvm::StringRef **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1StringRef_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  llvm::StringRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  result = (llvm::StringRef *)new llvm::StringRef((char const *)arg1,arg2);
  *(llvm::StringRef **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = (llvm::StringRef::iterator)((llvm::StringRef const *)arg1)->begin();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = (llvm::StringRef::iterator)((llvm::StringRef const *)arg1)->end();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = (char *)((llvm::StringRef const *)arg1)->data();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = (bool)((llvm::StringRef const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = ((llvm::StringRef const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = (char)((llvm::StringRef const *)arg1)->front();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = (char)((llvm::StringRef const *)arg1)->back();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::StringRef const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1equals_1lower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::StringRef const *)arg1)->equals_lower(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((llvm::StringRef const *)arg1)->compare(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1compare_1lower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((llvm::StringRef const *)arg1)->compare_lower(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1compare_1numeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((llvm::StringRef const *)arg1)->compare_numeric(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1edit_1distance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  llvm::StringRef *argp2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (unsigned int)jarg4; 
  result = (unsigned int)(arg1)->edit_distance(arg2,arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1edit_1distance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  bool arg3 ;
  llvm::StringRef *argp2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (unsigned int)(arg1)->edit_distance(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1edit_1distance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (unsigned int)(arg1)->edit_distance(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = ((llvm::StringRef const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1startswith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::StringRef const *)arg1)->startswith(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1endswith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::StringRef const *)arg1)->endswith(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((llvm::StringRef const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  size_t arg3 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::StringRef const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1rfind_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->rfind(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1rfind_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((llvm::StringRef const *)arg1)->rfind(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1rfind_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::StringRef const *)arg1)->rfind(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1first_1of_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->find_first_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1first_1of_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((llvm::StringRef const *)arg1)->find_first_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1first_1of_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  size_t arg3 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->find_first_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1first_1of_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::StringRef const *)arg1)->find_first_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1first_1not_1of_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->find_first_not_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1first_1not_1of_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((llvm::StringRef const *)arg1)->find_first_not_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1first_1not_1of_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  size_t arg3 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->find_first_not_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1first_1not_1of_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::StringRef const *)arg1)->find_first_not_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1last_1of_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->find_last_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1last_1of_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((llvm::StringRef const *)arg1)->find_last_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1last_1of_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  size_t arg3 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->find_last_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1last_1of_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::StringRef const *)arg1)->find_last_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1last_1not_1of_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->find_last_not_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1last_1not_1of_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((llvm::StringRef const *)arg1)->find_last_not_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1last_1not_1of_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  size_t arg3 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->find_last_not_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1find_1last_1not_1of_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::StringRef const *)arg1)->find_last_not_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((llvm::StringRef const *)arg1)->count(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::StringRef const *)arg1)->count(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1getAsInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  unsigned int arg2 ;
  llvm::APInt *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::APInt **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt & reference is null");
    return 0;
  } 
  result = (bool)((llvm::StringRef const *)arg1)->getAsInteger(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1lower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = ((llvm::StringRef const *)arg1)->lower();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1upper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = ((llvm::StringRef const *)arg1)->upper();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1substr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->substr(arg2,arg3);
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1substr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  size_t arg2 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((llvm::StringRef const *)arg1)->substr(arg2);
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1drop_1front_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  size_t arg2 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((llvm::StringRef const *)arg1)->drop_front(arg2);
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1drop_1front_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = ((llvm::StringRef const *)arg1)->drop_front();
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1drop_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  size_t arg2 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((llvm::StringRef const *)arg1)->drop_back(arg2);
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1drop_1back_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = ((llvm::StringRef const *)arg1)->drop_back();
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1slice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((llvm::StringRef const *)arg1)->slice(arg2,arg3);
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1split_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  SwigValueWrapper< std::pair< llvm::StringRef,llvm::StringRef > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((llvm::StringRef const *)arg1)->split(arg2);
  *(std::pair< llvm::StringRef,llvm::StringRef > **)&jresult = new std::pair< llvm::StringRef,llvm::StringRef >((const std::pair< llvm::StringRef,llvm::StringRef > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1split_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  SwigValueWrapper< std::pair< llvm::StringRef,llvm::StringRef > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::StringRef const *)arg1)->split(arg2);
  *(std::pair< llvm::StringRef,llvm::StringRef > **)&jresult = new std::pair< llvm::StringRef,llvm::StringRef >((const std::pair< llvm::StringRef,llvm::StringRef > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1split_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::SmallVectorImpl< llvm::StringRef > *arg2 = 0 ;
  llvm::StringRef arg3 ;
  int arg4 ;
  bool arg5 ;
  llvm::StringRef *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< llvm::StringRef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< llvm::StringRef > & reference is null");
    return ;
  } 
  argp3 = *(llvm::StringRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  ((llvm::StringRef const *)arg1)->split(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1split_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::SmallVectorImpl< llvm::StringRef > *arg2 = 0 ;
  llvm::StringRef arg3 ;
  int arg4 ;
  llvm::StringRef *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< llvm::StringRef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< llvm::StringRef > & reference is null");
    return ;
  } 
  argp3 = *(llvm::StringRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  ((llvm::StringRef const *)arg1)->split(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1split_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::SmallVectorImpl< llvm::StringRef > *arg2 = 0 ;
  llvm::StringRef arg3 ;
  llvm::StringRef *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< llvm::StringRef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< llvm::StringRef > & reference is null");
    return ;
  } 
  argp3 = *(llvm::StringRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg3 = *argp3; 
  ((llvm::StringRef const *)arg1)->split(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1rsplit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  char arg2 ;
  SwigValueWrapper< std::pair< llvm::StringRef,llvm::StringRef > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((llvm::StringRef const *)arg1)->rsplit(arg2);
  *(std::pair< llvm::StringRef,llvm::StringRef > **)&jresult = new std::pair< llvm::StringRef,llvm::StringRef >((const std::pair< llvm::StringRef,llvm::StringRef > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1ltrim_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::StringRef const *)arg1)->ltrim(arg2);
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1ltrim_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = ((llvm::StringRef const *)arg1)->ltrim();
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1rtrim_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::StringRef const *)arg1)->rtrim(arg2);
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1rtrim_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = ((llvm::StringRef const *)arg1)->rtrim();
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1trim_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::StringRef const *)arg1)->trim(arg2);
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StringRef_1trim_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StringRef **)&jarg1; 
  result = ((llvm::StringRef const *)arg1)->trim();
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1StringRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::StringRef *arg1 = (llvm::StringRef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::StringRef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_hash_1value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::StringRef arg1 ;
  llvm::StringRef *argp1 ;
  llvm::hash_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(llvm::StringRef **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg1 = *argp1; 
  result = llvm::hash_value(arg1);
  *(llvm::hash_code **)&jresult = new llvm::hash_code((const llvm::hash_code &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_host_1char_1bit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)llvm::host_char_bit;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_integerPartWidth_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)llvm::integerPartWidth;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1APInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  uint64_t arg2 ;
  bool arg3 ;
  uint64_t *argp2 ;
  llvm::APInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::APInt *)new llvm::APInt(arg1,arg2,arg3);
  *(llvm::APInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1APInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  llvm::APInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::APInt *)new llvm::APInt(arg1,arg2);
  *(llvm::APInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1APInt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  ArrayRef< uint64_t > arg2 ;
  ArrayRef< uint64_t > *argp2 ;
  llvm::APInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  argp2 = *(ArrayRef< uint64_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< uint64_t >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::APInt *)new llvm::APInt(arg1,arg2);
  *(llvm::APInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1APInt_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  uint64_t *arg3 ;
  llvm::APInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (llvm::APInt *)new llvm::APInt(arg1,arg2,(uint64_t const (*))arg3);
  *(llvm::APInt **)&jresult = result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1APInt_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::StringRef arg2 ;
  uint8_t arg3 ;
  llvm::StringRef *argp2 ;
  uint8_t *argp3 ;
  llvm::APInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(uint8_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (llvm::APInt *)new llvm::APInt(arg1,arg2,arg3);
  *(llvm::APInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1APInt_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (llvm::APInt *)new llvm::APInt((llvm::APInt const &)*arg1);
  *(llvm::APInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1APInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::APInt **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1APInt_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  llvm::APInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::APInt *)new llvm::APInt();
  *(llvm::APInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1Profile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::FoldingSetNodeID *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::FoldingSetNodeID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::FoldingSetNodeID & reference is null");
    return ;
  } 
  ((llvm::APInt const *)arg1)->Profile(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isNegative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (bool)((llvm::APInt const *)arg1)->isNegative();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isNonNegative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (bool)((llvm::APInt const *)arg1)->isNonNegative();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isStrictlyPositive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (bool)((llvm::APInt const *)arg1)->isStrictlyPositive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isAllOnesValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (bool)((llvm::APInt const *)arg1)->isAllOnesValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (bool)((llvm::APInt const *)arg1)->isMaxValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isMaxSignedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (bool)((llvm::APInt const *)arg1)->isMaxSignedValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (bool)((llvm::APInt const *)arg1)->isMinValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isMinSignedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (bool)((llvm::APInt const *)arg1)->isMinSignedValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isIntN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)((llvm::APInt const *)arg1)->isIntN(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isSignedIntN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)((llvm::APInt const *)arg1)->isSignedIntN(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isPowerOf2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (bool)((llvm::APInt const *)arg1)->isPowerOf2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isSignBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (bool)((llvm::APInt const *)arg1)->isSignBit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getBoolValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (bool)((llvm::APInt const *)arg1)->getBoolValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getLimitedValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::APInt const *)arg1)->getLimitedValue(arg2);
  *(uint64_t **)&jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getLimitedValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = ((llvm::APInt const *)arg1)->getLimitedValue();
  *(uint64_t **)&jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = llvm::APInt::getMaxValue(arg1);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getSignedMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = llvm::APInt::getSignedMaxValue(arg1);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = llvm::APInt::getMinValue(arg1);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getSignedMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = llvm::APInt::getSignedMinValue(arg1);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getSignBit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = llvm::APInt::getSignBit(arg1);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getAllOnesValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = llvm::APInt::getAllOnesValue(arg1);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getNullValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = llvm::APInt::getNullValue(arg1);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getHiBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->getHiBits(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getLoBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->getLoBits(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getOneBitSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = llvm::APInt::getOneBitSet(arg1,arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getBitsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = llvm::APInt::getBitsSet(arg1,arg2,arg3);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getHighBitsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = llvm::APInt::getHighBitsSet(arg1,arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getLowBitsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = llvm::APInt::getLowBitsSet(arg1,arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getSplat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APInt::getSplat(arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1isSameValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)llvm::APInt::isSameValue((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getRawData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (uint64_t *)((llvm::APInt const *)arg1)->getRawData();
  *(uint64_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1And(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->And((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1Or(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->Or((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1Xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->Xor((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ashr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->ashr(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1lshr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->lshr(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1shl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->shl(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1rotl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->rotl(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1rotr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->rotr(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ashr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->ashr((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1lshr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->lshr((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1shl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->shl((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1rotl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->rotl((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1rotr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->rotr((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1udiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->udiv((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sdiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->sdiv((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1urem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->urem((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1srem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->srem((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1udivrem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt *arg3 = 0 ;
  llvm::APInt *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return ;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return ;
  } 
  arg3 = *(llvm::APInt **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt & reference is null");
    return ;
  } 
  arg4 = *(llvm::APInt **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt & reference is null");
    return ;
  } 
  llvm::APInt::udivrem((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sdivrem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt *arg3 = 0 ;
  llvm::APInt *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return ;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return ;
  } 
  arg3 = *(llvm::APInt **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt & reference is null");
    return ;
  } 
  arg4 = *(llvm::APInt **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt & reference is null");
    return ;
  } 
  llvm::APInt::sdivrem((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sadd_1ov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool *arg3 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->sadd_ov((llvm::APInt const &)*arg2,*arg3);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1uadd_1ov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool *arg3 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->uadd_ov((llvm::APInt const &)*arg2,*arg3);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ssub_1ov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool *arg3 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->ssub_ov((llvm::APInt const &)*arg2,*arg3);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1usub_1ov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool *arg3 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->usub_ov((llvm::APInt const &)*arg2,*arg3);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sdiv_1ov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool *arg3 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->sdiv_ov((llvm::APInt const &)*arg2,*arg3);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1smul_1ov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool *arg3 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->smul_ov((llvm::APInt const &)*arg2,*arg3);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1umul_1ov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool *arg3 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->umul_ov((llvm::APInt const &)*arg2,*arg3);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sshl_1ov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  bool *arg3 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->sshl_ov(arg2,*arg3);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::APInt const *)arg1)->eq((llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::APInt const *)arg1)->ne((llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ult_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::APInt const *)arg1)->ult((llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ult_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::APInt const *)arg1)->ult(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1slt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::APInt const *)arg1)->slt((llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1slt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::APInt const *)arg1)->slt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::APInt const *)arg1)->ule((llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::APInt const *)arg1)->ule(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::APInt const *)arg1)->sle((llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::APInt const *)arg1)->sle(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ugt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::APInt const *)arg1)->ugt((llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ugt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::APInt const *)arg1)->ugt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sgt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::APInt const *)arg1)->sgt((llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sgt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::APInt const *)arg1)->sgt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1uge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::APInt const *)arg1)->uge((llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1uge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::APInt const *)arg1)->uge(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::APInt const *)arg1)->sge((llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::APInt const *)arg1)->sge(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1intersects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::APInt const *)arg1)->intersects((llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1trunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->trunc(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->sext(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1zext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->zext(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sextOrTrunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->sextOrTrunc(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1zextOrTrunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->zextOrTrunc(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sextOrSelf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->sextOrSelf(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1zextOrSelf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->zextOrSelf(arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1setAllBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  (arg1)->setAllBits();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1setBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setBit(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1clearAllBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  (arg1)->clearAllBits();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1clearBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->clearBit(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1flipAllBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  (arg1)->flipAllBits();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1flipBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->flipBit(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getBitWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->getBitWidth();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getNumWords_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->getNumWords();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getNumWords_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int)llvm::APInt::getNumWords(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getActiveBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->getActiveBits();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getActiveWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->getActiveWords();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getMinSignedBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->getMinSignedBits();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getZExtValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = ((llvm::APInt const *)arg1)->getZExtValue();
  *(uint64_t **)&jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getSExtValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = ((llvm::APInt const *)arg1)->getSExtValue();
  *(int64_t **)&jresult = new int64_t((const int64_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getBitsNeeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::StringRef arg1 ;
  uint8_t arg2 ;
  llvm::StringRef *argp1 ;
  uint8_t *argp2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(llvm::StringRef **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(uint8_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (unsigned int)llvm::APInt::getBitsNeeded(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1countLeadingZeros(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->countLeadingZeros();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1countLeadingOnes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->countLeadingOnes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1getNumSignBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->getNumSignBits();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1countTrailingZeros(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->countTrailingZeros();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1countTrailingOnes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->countTrailingOnes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1countPopulation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->countPopulation();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::raw_ostream *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::raw_ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::raw_ostream & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  ((llvm::APInt const *)arg1)->print(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::SmallVectorImpl< char > *arg2 = 0 ;
  unsigned int arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< char > & reference is null");
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  ((llvm::APInt const *)arg1)->toString(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::SmallVectorImpl< char > *arg2 = 0 ;
  unsigned int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< char > & reference is null");
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  ((llvm::APInt const *)arg1)->toString(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1toStringUnsigned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::SmallVectorImpl< char > *arg2 = 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< char > & reference is null");
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  ((llvm::APInt const *)arg1)->toStringUnsigned(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1toStringUnsigned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::SmallVectorImpl< char > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< char > & reference is null");
    return ;
  } 
  ((llvm::APInt const *)arg1)->toStringUnsigned(*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1toStringSigned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::SmallVectorImpl< char > *arg2 = 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< char > & reference is null");
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  ((llvm::APInt const *)arg1)->toStringSigned(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1toStringSigned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::SmallVectorImpl< char > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< char > & reference is null");
    return ;
  } 
  ((llvm::APInt const *)arg1)->toStringSigned(*arg2);
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1toString_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = ((llvm::APInt const *)arg1)->toString(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1byteSwap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = ((llvm::APInt const *)arg1)->byteSwap();
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1roundToDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  bool arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (double)((llvm::APInt const *)arg1)->roundToDouble(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1roundToDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (double)((llvm::APInt const *)arg1)->roundToDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1signedRoundToDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (double)((llvm::APInt const *)arg1)->signedRoundToDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1bitsToDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (double)((llvm::APInt const *)arg1)->bitsToDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1bitsToFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (float)((llvm::APInt const *)arg1)->bitsToFloat();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1doubleToBits(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = llvm::APInt::doubleToBits(arg1);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1floatToBits(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = llvm::APInt::floatToBits(arg1);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1logBase2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->logBase2();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ceilLogBase2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = (unsigned int)((llvm::APInt const *)arg1)->ceilLogBase2();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1exactLogBase2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = ((llvm::APInt const *)arg1)->exactLogBase2();
  *(int32_t **)&jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1sqrt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = ((llvm::APInt const *)arg1)->sqrt();
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1abs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = ((llvm::APInt const *)arg1)->abs();
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1multiplicativeInverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = ((llvm::APInt const *)arg1)->multiplicativeInverse((llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1magic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt::ms result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = ((llvm::APInt const *)arg1)->magic();
  *(llvm::APInt::ms **)&jresult = new llvm::APInt::ms((const llvm::APInt::ms &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1magicu_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  unsigned int arg2 ;
  llvm::APInt::mu result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((llvm::APInt const *)arg1)->magicu(arg2);
  *(llvm::APInt::mu **)&jresult = new llvm::APInt::mu((const llvm::APInt::mu &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1magicu_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  llvm::APInt::mu result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  result = ((llvm::APInt const *)arg1)->magicu();
  *(llvm::APInt::mu **)&jresult = new llvm::APInt::mu((const llvm::APInt::mu &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart arg2 ;
  unsigned int arg3 ;
  llvm::integerPart *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  argp2 = *(llvm::integerPart **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::integerPart");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  llvm::APInt::tcSet(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg2 = (llvm::integerPart *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = *(llvm::integerPart **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  llvm::APInt::tcAssign(arg1,(uint64_t const *)arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcIsZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)llvm::APInt::tcIsZero((uint64_t const *)arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcExtractBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)llvm::APInt::tcExtractBit((uint64_t const *)arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcExtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  llvm::integerPart *arg3 = (llvm::integerPart *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::integerPart **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  llvm::APInt::tcExtract(arg1,arg2,(uint64_t const *)arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcSetBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  llvm::APInt::tcSetBit(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcClearBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  llvm::APInt::tcClearBit(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcLSB(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)llvm::APInt::tcLSB((uint64_t const *)arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcMSB(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)llvm::APInt::tcMSB((uint64_t const *)arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcNegate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  llvm::APInt::tcNegate(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg2 = (llvm::integerPart *) 0 ;
  llvm::integerPart arg3 ;
  unsigned int arg4 ;
  llvm::integerPart *argp3 ;
  llvm::integerPart result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = *(llvm::integerPart **)&jarg2; 
  argp3 = *(llvm::integerPart **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::integerPart");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  result = llvm::APInt::tcAdd(arg1,(uint64_t const *)arg2,arg3,arg4);
  *(llvm::integerPart **)&jresult = new llvm::integerPart((const llvm::integerPart &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcSubtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg2 = (llvm::integerPart *) 0 ;
  llvm::integerPart arg3 ;
  unsigned int arg4 ;
  llvm::integerPart *argp3 ;
  llvm::integerPart result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = *(llvm::integerPart **)&jarg2; 
  argp3 = *(llvm::integerPart **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::integerPart");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  result = llvm::APInt::tcSubtract(arg1,(uint64_t const *)arg2,arg3,arg4);
  *(llvm::integerPart **)&jresult = new llvm::integerPart((const llvm::integerPart &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcMultiplyPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jboolean jarg7) {
  jint jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg2 = (llvm::integerPart *) 0 ;
  llvm::integerPart arg3 ;
  llvm::integerPart arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  bool arg7 ;
  llvm::integerPart *argp3 ;
  llvm::integerPart *argp4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = *(llvm::integerPart **)&jarg2; 
  argp3 = *(llvm::integerPart **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::integerPart");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(llvm::integerPart **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::integerPart");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (int)llvm::APInt::tcMultiplyPart(arg1,(uint64_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcMultiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg2 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg3 = (llvm::integerPart *) 0 ;
  unsigned int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = *(llvm::integerPart **)&jarg2; 
  arg3 = *(llvm::integerPart **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)llvm::APInt::tcMultiply(arg1,(uint64_t const *)arg2,(uint64_t const *)arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcFullMultiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg2 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg3 = (llvm::integerPart *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = *(llvm::integerPart **)&jarg2; 
  arg3 = *(llvm::integerPart **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (unsigned int)llvm::APInt::tcFullMultiply(arg1,(uint64_t const *)arg2,(uint64_t const *)arg3,arg4,arg5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcDivide(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg2 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg3 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg4 = (llvm::integerPart *) 0 ;
  unsigned int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = *(llvm::integerPart **)&jarg2; 
  arg3 = *(llvm::integerPart **)&jarg3; 
  arg4 = *(llvm::integerPart **)&jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (int)llvm::APInt::tcDivide(arg1,(uint64_t const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcShiftLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  llvm::APInt::tcShiftLeft(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcShiftRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  llvm::APInt::tcShiftRight(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcAnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg2 = (llvm::integerPart *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = *(llvm::integerPart **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  llvm::APInt::tcAnd(arg1,(uint64_t const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcOr(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg2 = (llvm::integerPart *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = *(llvm::integerPart **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  llvm::APInt::tcOr(arg1,(uint64_t const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcXor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg2 = (llvm::integerPart *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = *(llvm::integerPart **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  llvm::APInt::tcXor(arg1,(uint64_t const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcComplement(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  llvm::APInt::tcComplement(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcCompare(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  llvm::integerPart *arg2 = (llvm::integerPart *) 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = *(llvm::integerPart **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)llvm::APInt::tcCompare((uint64_t const *)arg1,(uint64_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  llvm::integerPart result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = llvm::APInt::tcIncrement(arg1,arg2);
  *(llvm::integerPart **)&jresult = new llvm::integerPart((const llvm::integerPart &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1tcSetLeastSignificantBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  llvm::integerPart *arg1 = (llvm::integerPart *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::integerPart **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  llvm::APInt::tcSetLeastSignificantBits(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::APInt *arg1 = (llvm::APInt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1; 
  ((llvm::APInt const *)arg1)->dump();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ms_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::APInt::ms *arg1 = (llvm::APInt::ms *) 0 ;
  llvm::APInt *arg2 = (llvm::APInt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt::ms **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2; 
  if (arg1) (arg1)->m = *arg2;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ms_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt::ms *arg1 = (llvm::APInt::ms *) 0 ;
  llvm::APInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt::ms **)&jarg1; 
  result = (llvm::APInt *)& ((arg1)->m);
  *(llvm::APInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ms_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::APInt::ms *arg1 = (llvm::APInt::ms *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt::ms **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1ms_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt::ms *arg1 = (llvm::APInt::ms *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt::ms **)&jarg1; 
  result = (unsigned int) ((arg1)->s);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1APInt_1ms(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  llvm::APInt::ms *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::APInt::ms *)new llvm::APInt::ms();
  *(llvm::APInt::ms **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1APInt_1ms(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::APInt::ms *arg1 = (llvm::APInt::ms *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::APInt::ms **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1mu_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::APInt::mu *arg1 = (llvm::APInt::mu *) 0 ;
  llvm::APInt *arg2 = (llvm::APInt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt::mu **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2; 
  if (arg1) (arg1)->m = *arg2;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1mu_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt::mu *arg1 = (llvm::APInt::mu *) 0 ;
  llvm::APInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt::mu **)&jarg1; 
  result = (llvm::APInt *)& ((arg1)->m);
  *(llvm::APInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1mu_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::APInt::mu *arg1 = (llvm::APInt::mu *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt::mu **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1mu_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::APInt::mu *arg1 = (llvm::APInt::mu *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt::mu **)&jarg1; 
  result = (bool) ((arg1)->a);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1mu_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::APInt::mu *arg1 = (llvm::APInt::mu *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt::mu **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_APInt_1mu_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt::mu *arg1 = (llvm::APInt::mu *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt::mu **)&jarg1; 
  result = (unsigned int) ((arg1)->s);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1APInt_1mu(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  llvm::APInt::mu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::APInt::mu *)new llvm::APInt::mu();
  *(llvm::APInt::mu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1APInt_1mu(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::APInt::mu *arg1 = (llvm::APInt::mu *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::APInt::mu **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_smin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::smin((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_smax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::smax((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_umin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::umin((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_umax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::umax((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_isIntN(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)llvm::APIntOps::isIntN(arg1,(llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_isSignedIntN(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)llvm::APIntOps::isSignedIntN(arg1,(llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_isMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)llvm::APIntOps::isMask(arg1,(llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_isShiftedMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  llvm::APInt *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (bool)llvm::APIntOps::isShiftedMask(arg1,(llvm::APInt const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_byteSwap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::byteSwap((llvm::APInt const &)*arg1);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_logBase2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (unsigned int)llvm::APIntOps::logBase2((llvm::APInt const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GreatestCommonDivisor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::GreatestCommonDivisor((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_RoundAPIntToDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (double)llvm::APIntOps::RoundAPIntToDouble((llvm::APInt const &)*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_RoundSignedAPIntToDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (double)llvm::APIntOps::RoundSignedAPIntToDouble((llvm::APInt const &)*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_RoundAPIntToFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (float)llvm::APIntOps::RoundAPIntToFloat((llvm::APInt const &)*arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_RoundSignedAPIntToFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (float)llvm::APIntOps::RoundSignedAPIntToFloat((llvm::APInt const &)*arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_RoundDoubleToAPInt(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = llvm::APIntOps::RoundDoubleToAPInt(arg1,arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_RoundFloatToAPInt(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = llvm::APIntOps::RoundFloatToAPInt(arg1,arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ashr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = llvm::APIntOps::ashr((llvm::APInt const &)*arg1,arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_lshr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = llvm::APIntOps::lshr((llvm::APInt const &)*arg1,arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_shl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = llvm::APIntOps::shl((llvm::APInt const &)*arg1,arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_sdiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::sdiv((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_udiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::udiv((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_srem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::srem((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_urem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::urem((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_mul(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::mul((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::add((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_sub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::sub((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_And(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::And((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Or(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::Or((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::Xor((llvm::APInt const &)*arg1,(llvm::APInt const &)*arg2);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Not(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::APInt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::APIntOps::Not((llvm::APInt const &)*arg1);
  *(llvm::APInt **)&jresult = new llvm::APInt((const llvm::APInt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_hash_1value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::APInt *arg1 = 0 ;
  llvm::hash_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::APInt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::hash_value((llvm::APInt const &)*arg1);
  *(llvm::hash_code **)&jresult = new llvm::hash_code((const llvm::hash_code &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1pImpl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = (llvm::LLVMContext *) 0 ;
  llvm::LLVMContextImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1; 
  result = (llvm::LLVMContextImpl *)(llvm::LLVMContextImpl *) ((arg1)->pImpl);
  *(llvm::LLVMContextImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LLVMContext(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  llvm::LLVMContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::LLVMContext *)new llvm::LLVMContext();
  *(llvm::LLVMContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1LLVMContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::LLVMContext *arg1 = (llvm::LLVMContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::LLVMContext **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1MD_1dbg_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)llvm::LLVMContext::MD_dbg;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1MD_1tbaa_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)llvm::LLVMContext::MD_tbaa;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1MD_1prof_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)llvm::LLVMContext::MD_prof;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1MD_1fpmath_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)llvm::LLVMContext::MD_fpmath;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1MD_1range_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)llvm::LLVMContext::MD_range;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1MD_1tbaa_1struct_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)llvm::LLVMContext::MD_tbaa_struct;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1MD_1invariant_1load_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)llvm::LLVMContext::MD_invariant_load;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1getMDKindID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = (llvm::LLVMContext *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::LLVMContext **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (unsigned int)((llvm::LLVMContext const *)arg1)->getMDKindID(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1getMDKindNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::LLVMContext *arg1 = (llvm::LLVMContext *) 0 ;
  llvm::SmallVectorImpl< llvm::StringRef > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< llvm::StringRef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< llvm::StringRef > & reference is null");
    return ;
  } 
  ((llvm::LLVMContext const *)arg1)->getMDKindNames(*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1setInlineAsmDiagnosticHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::LLVMContext *arg1 = (llvm::LLVMContext *) 0 ;
  llvm::LLVMContext::InlineAsmDiagHandlerTy arg2 = (llvm::LLVMContext::InlineAsmDiagHandlerTy) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1; 
  arg2 = *(llvm::LLVMContext::InlineAsmDiagHandlerTy *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->setInlineAsmDiagnosticHandler(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1setInlineAsmDiagnosticHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::LLVMContext *arg1 = (llvm::LLVMContext *) 0 ;
  llvm::LLVMContext::InlineAsmDiagHandlerTy arg2 = (llvm::LLVMContext::InlineAsmDiagHandlerTy) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1; 
  arg2 = *(llvm::LLVMContext::InlineAsmDiagHandlerTy *)&jarg2; 
  (arg1)->setInlineAsmDiagnosticHandler(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1getInlineAsmDiagnosticHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = (llvm::LLVMContext *) 0 ;
  llvm::LLVMContext::InlineAsmDiagHandlerTy result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1; 
  result = (llvm::LLVMContext::InlineAsmDiagHandlerTy)((llvm::LLVMContext const *)arg1)->getInlineAsmDiagnosticHandler();
  *(llvm::LLVMContext::InlineAsmDiagHandlerTy *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1getInlineAsmDiagnosticContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = (llvm::LLVMContext *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1; 
  result = (void *)((llvm::LLVMContext const *)arg1)->getInlineAsmDiagnosticContext();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1emitError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::LLVMContext *arg1 = (llvm::LLVMContext *) 0 ;
  unsigned int arg2 ;
  llvm::Twine *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return ;
  } 
  (arg1)->emitError(arg2,(llvm::Twine const &)*arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1emitError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  llvm::LLVMContext *arg1 = (llvm::LLVMContext *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  llvm::Twine *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::LLVMContext **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return ;
  } 
  (arg1)->emitError((llvm::Instruction const *)arg2,(llvm::Twine const &)*arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LLVMContext_1emitError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::LLVMContext *arg1 = (llvm::LLVMContext *) 0 ;
  llvm::Twine *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return ;
  } 
  (arg1)->emitError((llvm::Twine const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_getGlobalContext(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  llvm::LLVMContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::LLVMContext *) &llvm::getGlobalContext();
  *(llvm::LLVMContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_unwrap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  LLVMContextRef *arg1 = (LLVMContextRef *) 0 ;
  llvm::LLVMContext **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LLVMContextRef **)&jarg1; 
  result = (llvm::LLVMContext **)llvm::unwrap(arg1);
  *(llvm::LLVMContext ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_wrap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  llvm::LLVMContext **arg1 = (llvm::LLVMContext **) 0 ;
  LLVMContextRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::LLVMContext ***)&jarg1; 
  result = (LLVMContextRef *)llvm::wrap((llvm::LLVMContext const **)arg1);
  *(LLVMContextRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1VoidTyID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Type::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Type::TypeID)llvm::Type::VoidTyID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1LastPrimitiveTyID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Type::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Type::TypeID)llvm::Type::LastPrimitiveTyID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1FirstDerivedTyID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Type::TypeID result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Type::TypeID)llvm::Type::FirstDerivedTyID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::raw_ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::raw_ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::raw_ostream & reference is null");
    return ;
  } 
  ((llvm::Type const *)arg1)->print(*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  ((llvm::Type const *)arg1)->dump();
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::LLVMContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::LLVMContext *) &((llvm::Type const *)arg1)->getContext();
  *(llvm::LLVMContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getTypeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Type::TypeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Type::TypeID)((llvm::Type const *)arg1)->getTypeID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isVoidTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isVoidTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isHalfTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isHalfTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isFloatTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isFloatTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isDoubleTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isDoubleTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isX86_1FP80Ty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isX86_FP80Ty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isFP128Ty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isFP128Ty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isPPC_1FP128Ty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isPPC_FP128Ty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isFloatingPointTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isFloatingPointTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getFltSemantics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  fltSemantics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (fltSemantics *) &((llvm::Type const *)arg1)->getFltSemantics();
  *(fltSemantics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isX86_1MMXTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isX86_MMXTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isFPOrFPVectorTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isFPOrFPVectorTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isLabelTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isLabelTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isMetadataTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isMetadataTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isIntegerTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isIntegerTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isIntegerTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)((llvm::Type const *)arg1)->isIntegerTy(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isIntOrIntVectorTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isIntOrIntVectorTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isFunctionTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isFunctionTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isStructTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isStructTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isArrayTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isArrayTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isPointerTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isPointerTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isPtrOrPtrVectorTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isPtrOrPtrVectorTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isVectorTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isVectorTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1canLosslesslyBitCastTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (bool)((llvm::Type const *)arg1)->canLosslesslyBitCastTo(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isEmptyTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isEmptyTy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isPrimitiveType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isPrimitiveType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isDerivedType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isDerivedType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isFirstClassType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isFirstClassType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isSingleValueType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isSingleValueType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isAggregateType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isAggregateType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isSized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isSized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getPrimitiveSizeInBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (unsigned int)((llvm::Type const *)arg1)->getPrimitiveSizeInBits();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getScalarSizeInBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (unsigned int)(arg1)->getScalarSizeInBits();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getFPMantissaWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (int)((llvm::Type const *)arg1)->getFPMantissaWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getScalarType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Type *)((llvm::Type const *)arg1)->getScalarType();
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1subtype_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Type::subtype_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Type::subtype_iterator)((llvm::Type const *)arg1)->subtype_begin();
  *(llvm::Type::subtype_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1subtype_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Type::subtype_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Type::subtype_iterator)((llvm::Type const *)arg1)->subtype_end();
  *(llvm::Type::subtype_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getContainedType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int arg2 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Type *)((llvm::Type const *)arg1)->getContainedType(arg2);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getNumContainedTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (unsigned int)((llvm::Type const *)arg1)->getNumContainedTypes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getIntegerBitWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (unsigned int)((llvm::Type const *)arg1)->getIntegerBitWidth();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getFunctionParamType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int arg2 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Type *)((llvm::Type const *)arg1)->getFunctionParamType(arg2);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getFunctionNumParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (unsigned int)((llvm::Type const *)arg1)->getFunctionNumParams();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1isFunctionVarArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (bool)((llvm::Type const *)arg1)->isFunctionVarArg();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getStructName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = ((llvm::Type const *)arg1)->getStructName();
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getStructNumElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (unsigned int)((llvm::Type const *)arg1)->getStructNumElements();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getStructElementType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int arg2 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Type *)((llvm::Type const *)arg1)->getStructElementType(arg2);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getSequentialElementType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Type *)((llvm::Type const *)arg1)->getSequentialElementType();
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getArrayNumElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = ((llvm::Type const *)arg1)->getArrayNumElements();
  *(uint64_t **)&jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getArrayElementType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Type *)((llvm::Type const *)arg1)->getArrayElementType();
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getVectorNumElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (unsigned int)((llvm::Type const *)arg1)->getVectorNumElements();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getVectorElementType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Type *)((llvm::Type const *)arg1)->getVectorElementType();
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getPointerElementType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Type *)((llvm::Type const *)arg1)->getPointerElementType();
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getPointerAddressSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (unsigned int)((llvm::Type const *)arg1)->getPointerAddressSpace();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getPrimitiveType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Type::TypeID arg2 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (llvm::Type::TypeID)jarg2; 
  result = (llvm::Type *)llvm::Type::getPrimitiveType(*arg1,arg2);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getVoidTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Type *)llvm::Type::getVoidTy(*arg1);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getLabelTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Type *)llvm::Type::getLabelTy(*arg1);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getHalfTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Type *)llvm::Type::getHalfTy(*arg1);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getFloatTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Type *)llvm::Type::getFloatTy(*arg1);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getDoubleTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Type *)llvm::Type::getDoubleTy(*arg1);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getMetadataTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Type *)llvm::Type::getMetadataTy(*arg1);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getX86_1FP80Ty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Type *)llvm::Type::getX86_FP80Ty(*arg1);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getFP128Ty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Type *)llvm::Type::getFP128Ty(*arg1);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getPPC_1FP128Ty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Type *)llvm::Type::getPPC_FP128Ty(*arg1);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getX86_1MMXTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Type *)llvm::Type::getX86_MMXTy(*arg1);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getIntNTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::IntegerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::IntegerType *)llvm::Type::getIntNTy(*arg1,arg2);
  *(llvm::IntegerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt1Ty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::IntegerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::IntegerType *)llvm::Type::getInt1Ty(*arg1);
  *(llvm::IntegerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt8Ty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::IntegerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::IntegerType *)llvm::Type::getInt8Ty(*arg1);
  *(llvm::IntegerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt16Ty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::IntegerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::IntegerType *)llvm::Type::getInt16Ty(*arg1);
  *(llvm::IntegerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt32Ty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::IntegerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::IntegerType *)llvm::Type::getInt32Ty(*arg1);
  *(llvm::IntegerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt64Ty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::IntegerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::IntegerType *)llvm::Type::getInt64Ty(*arg1);
  *(llvm::IntegerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getHalfPtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getHalfPtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getHalfPtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getHalfPtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getFloatPtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getFloatPtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getFloatPtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getFloatPtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getDoublePtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getDoublePtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getDoublePtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getDoublePtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getX86_1FP80PtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getX86_FP80PtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getX86_1FP80PtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getX86_FP80PtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getFP128PtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getFP128PtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getFP128PtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getFP128PtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getPPC_1FP128PtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getPPC_FP128PtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getPPC_1FP128PtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getPPC_FP128PtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getX86_1MMXPtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getX86_MMXPtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getX86_1MMXPtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getX86_MMXPtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getIntNPtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (llvm::PointerType *)llvm::Type::getIntNPtrTy(*arg1,arg2,arg3);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getIntNPtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getIntNPtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt1PtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getInt1PtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt1PtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getInt1PtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt8PtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getInt8PtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt8PtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getInt8PtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt16PtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getInt16PtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt16PtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getInt16PtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt32PtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getInt32PtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt32PtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getInt32PtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt64PtrTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)llvm::Type::getInt64PtrTy(*arg1,arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getInt64PtrTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::PointerType *)llvm::Type::getInt64PtrTy(*arg1);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getPointerTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int arg2 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PointerType *)(arg1)->getPointerTo(arg2);
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Type_1getPointerTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::PointerType *)(arg1)->getPointerTo();
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_unwrap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  LLVMTypeRef *arg1 = (LLVMTypeRef *) 0 ;
  llvm::Type **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LLVMTypeRef **)&jarg1; 
  result = (llvm::Type **)llvm::unwrap(arg1);
  *(llvm::Type ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_wrap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  llvm::Type **arg1 = (llvm::Type **) 0 ;
  LLVMTypeRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::Type ***)&jarg1; 
  result = (LLVMTypeRef *)llvm::wrap(arg1);
  *(LLVMTypeRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::Value **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  ((llvm::Value const *)arg1)->dump();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::raw_ostream *arg2 = 0 ;
  llvm::AssemblyAnnotationWriter *arg3 = (llvm::AssemblyAnnotationWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::raw_ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::raw_ostream & reference is null");
    return ;
  } 
  arg3 = *(llvm::AssemblyAnnotationWriter **)&jarg3; 
  ((llvm::Value const *)arg1)->print(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::raw_ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::raw_ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::raw_ostream & reference is null");
    return ;
  } 
  ((llvm::Value const *)arg1)->print(*arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::Type *)((llvm::Value const *)arg1)->getType();
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::LLVMContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::LLVMContext *) &((llvm::Value const *)arg1)->getContext();
  *(llvm::LLVMContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1hasName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)((llvm::Value const *)arg1)->hasName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1getValueName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::ValueName *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::ValueName *)((llvm::Value const *)arg1)->getValueName();
  *(llvm::ValueName **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1setValueName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::ValueName *arg2 = (llvm::ValueName *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::ValueName **)&jarg2; 
  (arg1)->setValueName(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = ((llvm::Value const *)arg1)->getName();
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return ;
  } 
  (arg1)->setName((llvm::Twine const &)*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1takeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (arg1)->takeName(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1replaceAllUsesWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (arg1)->replaceAllUsesWith(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1use_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)((llvm::Value const *)arg1)->use_empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1use_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< value_use_iterator< User > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (arg1)->use_begin();
  *(llvm::Value::use_iterator **)&jresult = new llvm::Value::use_iterator((const llvm::Value::use_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1use_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< value_use_iterator< User > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (arg1)->use_end();
  *(llvm::Value::use_iterator **)&jresult = new llvm::Value::use_iterator((const llvm::Value::use_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1use_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  User *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (User *)(arg1)->use_back();
  *(User **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1hasOneUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)((llvm::Value const *)arg1)->hasOneUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1hasNUses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)((llvm::Value const *)arg1)->hasNUses(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1hasNUsesOrMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)((llvm::Value const *)arg1)->hasNUsesOrMore(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1isUsedInBasicBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (bool)((llvm::Value const *)arg1)->isUsedInBasicBlock((llvm::BasicBlock const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1getNumUses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (unsigned int)((llvm::Value const *)arg1)->getNumUses();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1addUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  Use *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(Use **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Use & reference is null");
    return ;
  } 
  (arg1)->addUse(*arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1ConstantFirstVal_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Value::ValueTy result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Value::ValueTy)llvm::Value::ConstantFirstVal;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1ConstantLastVal_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Value::ValueTy result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Value::ValueTy)llvm::Value::ConstantLastVal;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1getValueID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (unsigned int)((llvm::Value const *)arg1)->getValueID();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1getRawSubclassOptionalData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (unsigned int)((llvm::Value const *)arg1)->getRawSubclassOptionalData();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1clearSubclassOptionalData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  (arg1)->clearSubclassOptionalData();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1hasSameSubclassOptionalData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  result = (bool)((llvm::Value const *)arg1)->hasSameSubclassOptionalData((llvm::Value const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1intersectOptionalDataWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (arg1)->intersectOptionalDataWith((llvm::Value const *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1hasValueHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)((llvm::Value const *)arg1)->hasValueHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1stripPointerCasts_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::Value *)(arg1)->stripPointerCasts();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1stripPointerCastsNoFollowAliases_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::Value *)(arg1)->stripPointerCastsNoFollowAliases();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1stripInBoundsConstantOffsets_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::Value *)(arg1)->stripInBoundsConstantOffsets();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1stripInBoundsOffsets_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::Value *)(arg1)->stripInBoundsOffsets();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1isDereferenceablePointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)((llvm::Value const *)arg1)->isDereferenceablePointer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1DoPHITranslation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  result = (llvm::Value *)(arg1)->DoPHITranslation((llvm::BasicBlock const *)arg2,(llvm::BasicBlock const *)arg3);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1MaximumAlignment_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::Value::MaximumAlignment;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1mutateType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  (arg1)->mutateType(arg2);
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Value_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = llvm_Value_toString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_unwrap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  LLVMValueRef *arg1 = (LLVMValueRef *) 0 ;
  llvm::Value **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LLVMValueRef **)&jarg1; 
  result = (llvm::Value **)llvm::unwrap(arg1);
  *(llvm::Value ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_wrap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  llvm::Value **arg1 = (llvm::Value **) 0 ;
  LLVMValueRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::Value ***)&jarg1; 
  result = (LLVMValueRef *)llvm::wrap((llvm::Value const **)arg1);
  *(LLVMValueRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1isNullValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (bool)((llvm::Constant const *)arg1)->isNullValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1isAllOnesValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (bool)((llvm::Constant const *)arg1)->isAllOnesValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1isNegativeZeroValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (bool)((llvm::Constant const *)arg1)->isNegativeZeroValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1isZeroValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (bool)((llvm::Constant const *)arg1)->isZeroValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1canTrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (bool)((llvm::Constant const *)arg1)->canTrap();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1isThreadDependent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (bool)((llvm::Constant const *)arg1)->isThreadDependent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1isConstantUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (bool)((llvm::Constant const *)arg1)->isConstantUsed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1NoRelocation_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Constant::PossibleRelocationsTy result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Constant::PossibleRelocationsTy)llvm::Constant::NoRelocation;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1LocalRelocation_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Constant::PossibleRelocationsTy result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Constant::PossibleRelocationsTy)llvm::Constant::LocalRelocation;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1GlobalRelocations_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Constant::PossibleRelocationsTy result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Constant::PossibleRelocationsTy)llvm::Constant::GlobalRelocations;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1getRelocationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant::PossibleRelocationsTy result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (llvm::Constant::PossibleRelocationsTy)((llvm::Constant const *)arg1)->getRelocationInfo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1getAggregateElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  unsigned int arg2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Constant *)((llvm::Constant const *)arg1)->getAggregateElement(arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1getAggregateElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)((llvm::Constant const *)arg1)->getAggregateElement(arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1getSplatValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (llvm::Constant *)((llvm::Constant const *)arg1)->getSplatValue();
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1getUniqueInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::APInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (llvm::APInt *) &((llvm::Constant const *)arg1)->getUniqueInteger();
  *(llvm::APInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1destroyConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  (arg1)->destroyConstant();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::Constant::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1replaceUsesOfWithOnConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  Use *arg4 = (Use *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(Use **)&jarg4; 
  (arg1)->replaceUsesOfWithOnConstant(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1getNullValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Constant *)llvm::Constant::getNullValue(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1getAllOnesValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Constant *)llvm::Constant::getAllOnesValue(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1getIntegerValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (llvm::Constant *)llvm::Constant::getIntegerValue(arg1,(llvm::APInt const &)*arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1removeDeadConstantUsers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  ((llvm::Constant const *)arg1)->removeDeadConstantUsers();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1Constant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::Constant **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getTrue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::ConstantInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::ConstantInt *)llvm::ConstantInt::getTrue(*arg1);
  *(llvm::ConstantInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getFalse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::ConstantInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::ConstantInt *)llvm::ConstantInt::getFalse(*arg1);
  *(llvm::ConstantInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getTrue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Constant *)llvm::ConstantInt::getTrue(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getFalse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Constant *)llvm::ConstantInt::getFalse(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  uint64_t arg2 ;
  bool arg3 ;
  uint64_t *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantInt::get(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantInt::get(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::IntegerType *arg1 = (llvm::IntegerType *) 0 ;
  uint64_t arg2 ;
  bool arg3 ;
  uint64_t *argp2 ;
  llvm::ConstantInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::IntegerType **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::ConstantInt *)llvm::ConstantInt::get(arg1,arg2,arg3);
  *(llvm::ConstantInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1get_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::IntegerType *arg1 = (llvm::IntegerType *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  llvm::ConstantInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::IntegerType **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::ConstantInt *)llvm::ConstantInt::get(arg1,arg2);
  *(llvm::ConstantInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getSigned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::IntegerType *arg1 = (llvm::IntegerType *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  llvm::ConstantInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::IntegerType **)&jarg1; 
  argp2 = *(int64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::ConstantInt *)llvm::ConstantInt::getSigned(arg1,arg2);
  *(llvm::ConstantInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getSigned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  argp2 = *(int64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantInt::getSigned(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1get_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::ConstantInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (llvm::ConstantInt *)llvm::ConstantInt::get(*arg1,(llvm::APInt const &)*arg2);
  *(llvm::ConstantInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1get_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::IntegerType *arg1 = (llvm::IntegerType *) 0 ;
  llvm::StringRef arg2 ;
  uint8_t arg3 ;
  llvm::StringRef *argp2 ;
  uint8_t *argp3 ;
  llvm::ConstantInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(llvm::IntegerType **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(uint8_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (llvm::ConstantInt *)llvm::ConstantInt::get(arg1,arg2,arg3);
  *(llvm::ConstantInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1get_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::APInt *arg2 = 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = (llvm::Constant *)llvm::ConstantInt::get(arg1,(llvm::APInt const &)*arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  llvm::APInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  result = (llvm::APInt *) &((llvm::ConstantInt const *)arg1)->getValue();
  *(llvm::APInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getBitWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  result = (unsigned int)((llvm::ConstantInt const *)arg1)->getBitWidth();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getZExtValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  result = ((llvm::ConstantInt const *)arg1)->getZExtValue();
  *(uint64_t **)&jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getSExtValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  result = ((llvm::ConstantInt const *)arg1)->getSExtValue();
  *(int64_t **)&jresult = new int64_t((const int64_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1equalsInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::ConstantInt const *)arg1)->equalsInt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  llvm::IntegerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  result = (llvm::IntegerType *)((llvm::ConstantInt const *)arg1)->getType();
  *(llvm::IntegerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1isValueValidForType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)llvm::ConstantInt::isValueValidForType(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1isValueValidForType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  argp2 = *(int64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null int64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)llvm::ConstantInt::isValueValidForType(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1isNegative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  result = (bool)((llvm::ConstantInt const *)arg1)->isNegative();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  result = (bool)((llvm::ConstantInt const *)arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1isOne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  result = (bool)((llvm::ConstantInt const *)arg1)->isOne();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1isMinusOne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  result = (bool)((llvm::ConstantInt const *)arg1)->isMinusOne();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1isMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((llvm::ConstantInt const *)arg1)->isMaxValue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1isMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((llvm::ConstantInt const *)arg1)->isMinValue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1uge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::ConstantInt const *)arg1)->uge(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getLimitedValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return 0;
  }
  arg2 = *argp2; 
  result = ((llvm::ConstantInt const *)arg1)->getLimitedValue(arg2);
  *(uint64_t **)&jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1getLimitedValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  result = ((llvm::ConstantInt const *)arg1)->getLimitedValue();
  *(uint64_t **)&jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ConstantInt::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ConstantInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ConstantInt *arg1 = (llvm::ConstantInt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ConstantInt **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1getZeroValueForNegation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Constant *)llvm::ConstantFP::getZeroValueForNegation(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  double arg2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (llvm::Constant *)llvm::ConstantFP::get(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Type **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantFP::get(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  APFloat *arg2 = 0 ;
  llvm::ConstantFP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = *(APFloat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "APFloat const & reference is null");
    return 0;
  } 
  result = (llvm::ConstantFP *)llvm::ConstantFP::get(*arg1,(APFloat const &)*arg2);
  *(llvm::ConstantFP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1getNegativeZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::ConstantFP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::ConstantFP *)llvm::ConstantFP::getNegativeZero(arg1);
  *(llvm::ConstantFP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1getInfinity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  bool arg2 ;
  llvm::ConstantFP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (llvm::ConstantFP *)llvm::ConstantFP::getInfinity(arg1,arg2);
  *(llvm::ConstantFP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1getInfinity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::ConstantFP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::ConstantFP *)llvm::ConstantFP::getInfinity(arg1);
  *(llvm::ConstantFP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1isValueValidForType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  APFloat *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(APFloat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "APFloat const & reference is null");
    return 0;
  } 
  result = (bool)llvm::ConstantFP::isValueValidForType(arg1,(APFloat const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1getValueAPF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantFP *arg1 = (llvm::ConstantFP *) 0 ;
  APFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantFP **)&jarg1; 
  result = (APFloat *) &((llvm::ConstantFP const *)arg1)->getValueAPF();
  *(APFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ConstantFP *arg1 = (llvm::ConstantFP *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantFP **)&jarg1; 
  result = (bool)((llvm::ConstantFP const *)arg1)->isZero();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1isNegative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ConstantFP *arg1 = (llvm::ConstantFP *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantFP **)&jarg1; 
  result = (bool)((llvm::ConstantFP const *)arg1)->isNegative();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1isNaN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ConstantFP *arg1 = (llvm::ConstantFP *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantFP **)&jarg1; 
  result = (bool)((llvm::ConstantFP const *)arg1)->isNaN();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1isExactlyValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::ConstantFP *arg1 = (llvm::ConstantFP *) 0 ;
  APFloat *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantFP **)&jarg1; 
  arg2 = *(APFloat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "APFloat const & reference is null");
    return 0;
  } 
  result = (bool)((llvm::ConstantFP const *)arg1)->isExactlyValue((APFloat const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1isExactlyValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  llvm::ConstantFP *arg1 = (llvm::ConstantFP *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantFP **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)((llvm::ConstantFP const *)arg1)->isExactlyValue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ConstantFP::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ConstantFP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ConstantFP *arg1 = (llvm::ConstantFP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ConstantFP **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantAggregateZero_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::ConstantAggregateZero *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::ConstantAggregateZero *)llvm::ConstantAggregateZero::get(arg1);
  *(llvm::ConstantAggregateZero **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantAggregateZero_1destroyConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::ConstantAggregateZero *arg1 = (llvm::ConstantAggregateZero *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantAggregateZero **)&jarg1; 
  (arg1)->destroyConstant();
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantAggregateZero_1getSequentialElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantAggregateZero *arg1 = (llvm::ConstantAggregateZero *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantAggregateZero **)&jarg1; 
  result = (llvm::Constant *)((llvm::ConstantAggregateZero const *)arg1)->getSequentialElement();
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantAggregateZero_1getStructElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::ConstantAggregateZero *arg1 = (llvm::ConstantAggregateZero *) 0 ;
  unsigned int arg2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantAggregateZero **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Constant *)((llvm::ConstantAggregateZero const *)arg1)->getStructElement(arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantAggregateZero_1getElementValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::ConstantAggregateZero *arg1 = (llvm::ConstantAggregateZero *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::ConstantAggregateZero **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)((llvm::ConstantAggregateZero const *)arg1)->getElementValue(arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantAggregateZero_1getElementValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::ConstantAggregateZero *arg1 = (llvm::ConstantAggregateZero *) 0 ;
  unsigned int arg2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantAggregateZero **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Constant *)((llvm::ConstantAggregateZero const *)arg1)->getElementValue(arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantAggregateZero_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ConstantAggregateZero::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ConstantAggregateZero(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ConstantAggregateZero *arg1 = (llvm::ConstantAggregateZero *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ConstantAggregateZero **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::ArrayType *arg1 = (llvm::ArrayType *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ArrayType **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantArray::get(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantArray_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantArray *arg1 = (llvm::ConstantArray *) 0 ;
  llvm::ArrayType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantArray **)&jarg1; 
  result = (llvm::ArrayType *)((llvm::ConstantArray const *)arg1)->getType();
  *(llvm::ArrayType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantArray_1destroyConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::ConstantArray *arg1 = (llvm::ConstantArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantArray **)&jarg1; 
  (arg1)->destroyConstant();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantArray_1replaceUsesOfWithOnConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  llvm::ConstantArray *arg1 = (llvm::ConstantArray *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  Use *arg4 = (Use *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::ConstantArray **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(Use **)&jarg4; 
  (arg1)->replaceUsesOfWithOnConstant(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantArray_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ConstantArray::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ConstantArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ConstantArray *arg1 = (llvm::ConstantArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ConstantArray **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::StructType *arg1 = (llvm::StructType *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::StructType **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantStruct::get(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  llvm::StructType *arg1 = (llvm::StructType *) 0 ;
  void *arg2 = 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::StructType **)&jarg1; 
  result = (llvm::Constant *)llvm::ConstantStruct::get(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1getAnon_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg1 ;
  bool arg2 ;
  ArrayRef< llvm::Constant * > *argp1 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ArrayRef< llvm::Constant * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantStruct::getAnon(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1getAnon_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg1 ;
  ArrayRef< llvm::Constant * > *argp1 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ArrayRef< llvm::Constant * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg1 = *argp1; 
  result = (llvm::Constant *)llvm::ConstantStruct::getAnon(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1getAnon_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  bool arg3 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantStruct::getAnon(*arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1getAnon_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantStruct::getAnon(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1getTypeForElements_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg1 ;
  bool arg2 ;
  ArrayRef< llvm::Constant * > *argp1 ;
  llvm::StructType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ArrayRef< llvm::Constant * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  result = (llvm::StructType *)llvm::ConstantStruct::getTypeForElements(arg1,arg2);
  *(llvm::StructType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1getTypeForElements_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg1 ;
  ArrayRef< llvm::Constant * > *argp1 ;
  llvm::StructType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ArrayRef< llvm::Constant * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg1 = *argp1; 
  result = (llvm::StructType *)llvm::ConstantStruct::getTypeForElements(arg1);
  *(llvm::StructType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1getTypeForElements_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  bool arg3 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::StructType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::StructType *)llvm::ConstantStruct::getTypeForElements(*arg1,arg2,arg3);
  *(llvm::StructType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1getTypeForElements_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::StructType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::StructType *)llvm::ConstantStruct::getTypeForElements(*arg1,arg2);
  *(llvm::StructType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantStruct *arg1 = (llvm::ConstantStruct *) 0 ;
  llvm::StructType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantStruct **)&jarg1; 
  result = (llvm::StructType *)((llvm::ConstantStruct const *)arg1)->getType();
  *(llvm::StructType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1destroyConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::ConstantStruct *arg1 = (llvm::ConstantStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantStruct **)&jarg1; 
  (arg1)->destroyConstant();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1replaceUsesOfWithOnConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  llvm::ConstantStruct *arg1 = (llvm::ConstantStruct *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  Use *arg4 = (Use *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::ConstantStruct **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(Use **)&jarg4; 
  (arg1)->replaceUsesOfWithOnConstant(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ConstantStruct::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ConstantStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ConstantStruct *arg1 = (llvm::ConstantStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ConstantStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg1 ;
  ArrayRef< llvm::Constant * > *argp1 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ArrayRef< llvm::Constant * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg1 = *argp1; 
  result = (llvm::Constant *)llvm::ConstantVector::get(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantVector_1getSplat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantVector::getSplat(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantVector_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantVector *arg1 = (llvm::ConstantVector *) 0 ;
  llvm::VectorType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantVector **)&jarg1; 
  result = (llvm::VectorType *)((llvm::ConstantVector const *)arg1)->getType();
  *(llvm::VectorType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantVector_1getSplatValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantVector *arg1 = (llvm::ConstantVector *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantVector **)&jarg1; 
  result = (llvm::Constant *)((llvm::ConstantVector const *)arg1)->getSplatValue();
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantVector_1destroyConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::ConstantVector *arg1 = (llvm::ConstantVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantVector **)&jarg1; 
  (arg1)->destroyConstant();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantVector_1replaceUsesOfWithOnConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  llvm::ConstantVector *arg1 = (llvm::ConstantVector *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  Use *arg4 = (Use *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::ConstantVector **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(Use **)&jarg4; 
  (arg1)->replaceUsesOfWithOnConstant(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantVector_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ConstantVector::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ConstantVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ConstantVector *arg1 = (llvm::ConstantVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ConstantVector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantPointerNull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  llvm::PointerType *arg1 = (llvm::PointerType *) 0 ;
  llvm::ConstantPointerNull *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::PointerType **)&jarg1; 
  result = (llvm::ConstantPointerNull *)llvm::ConstantPointerNull::get(arg1);
  *(llvm::ConstantPointerNull **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantPointerNull_1destroyConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::ConstantPointerNull *arg1 = (llvm::ConstantPointerNull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantPointerNull **)&jarg1; 
  (arg1)->destroyConstant();
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantPointerNull_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantPointerNull *arg1 = (llvm::ConstantPointerNull *) 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantPointerNull **)&jarg1; 
  result = (llvm::PointerType *)((llvm::ConstantPointerNull const *)arg1)->getType();
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantPointerNull_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ConstantPointerNull::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ConstantPointerNull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ConstantPointerNull *arg1 = (llvm::ConstantPointerNull *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ConstantPointerNull **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataArray_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< uint8_t > arg2 ;
  ArrayRef< uint8_t > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< uint8_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< uint8_t >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataArray::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataArray_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< uint16_t > arg2 ;
  ArrayRef< uint16_t > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< uint16_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< uint16_t >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataArray::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataArray_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< uint32_t > arg2 ;
  ArrayRef< uint32_t > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< uint32_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< uint32_t >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataArray::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataArray_1get_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< uint64_t > arg2 ;
  ArrayRef< uint64_t > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< uint64_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< uint64_t >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataArray::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataArray_1get_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< float > arg2 ;
  ArrayRef< float > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< float > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< float >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataArray::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataArray_1get_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< double > arg2 ;
  ArrayRef< double > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< double >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataArray::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataArray_1getString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::StringRef arg2 ;
  bool arg3 ;
  llvm::StringRef *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantDataArray::getString(*arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataArray_1getString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataArray::getString(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataArray_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantDataArray *arg1 = (llvm::ConstantDataArray *) 0 ;
  llvm::ArrayType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantDataArray **)&jarg1; 
  result = (llvm::ArrayType *)((llvm::ConstantDataArray const *)arg1)->getType();
  *(llvm::ArrayType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataArray_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ConstantDataArray::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ConstantDataArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ConstantDataArray *arg1 = (llvm::ConstantDataArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ConstantDataArray **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataVector_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< uint8_t > arg2 ;
  ArrayRef< uint8_t > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< uint8_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< uint8_t >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataVector::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataVector_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< uint16_t > arg2 ;
  ArrayRef< uint16_t > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< uint16_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< uint16_t >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataVector::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataVector_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< uint32_t > arg2 ;
  ArrayRef< uint32_t > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< uint32_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< uint32_t >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataVector::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataVector_1get_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< uint64_t > arg2 ;
  ArrayRef< uint64_t > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< uint64_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< uint64_t >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataVector::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataVector_1get_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< float > arg2 ;
  ArrayRef< float > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< float > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< float >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataVector::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataVector_1get_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  ArrayRef< double > arg2 ;
  ArrayRef< double > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< double >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantDataVector::get(*arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataVector_1getSplat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantDataVector::getSplat(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataVector_1getSplatValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantDataVector *arg1 = (llvm::ConstantDataVector *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantDataVector **)&jarg1; 
  result = (llvm::Constant *)((llvm::ConstantDataVector const *)arg1)->getSplatValue();
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataVector_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantDataVector *arg1 = (llvm::ConstantDataVector *) 0 ;
  llvm::VectorType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantDataVector **)&jarg1; 
  result = (llvm::VectorType *)((llvm::ConstantDataVector const *)arg1)->getType();
  *(llvm::VectorType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantDataVector_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ConstantDataVector::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ConstantDataVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ConstantDataVector *arg1 = (llvm::ConstantDataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ConstantDataVector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BlockAddress_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::BlockAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (llvm::BlockAddress *)llvm::BlockAddress::get(arg1,arg2);
  *(llvm::BlockAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BlockAddress_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BlockAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::BlockAddress *)llvm::BlockAddress::get(arg1);
  *(llvm::BlockAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BlockAddress_1getFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BlockAddress *arg1 = (llvm::BlockAddress *) 0 ;
  llvm::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BlockAddress **)&jarg1; 
  result = (llvm::Function *)((llvm::BlockAddress const *)arg1)->getFunction();
  *(llvm::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BlockAddress_1getBasicBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BlockAddress *arg1 = (llvm::BlockAddress *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BlockAddress **)&jarg1; 
  result = (llvm::BasicBlock *)((llvm::BlockAddress const *)arg1)->getBasicBlock();
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BlockAddress_1destroyConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::BlockAddress *arg1 = (llvm::BlockAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BlockAddress **)&jarg1; 
  (arg1)->destroyConstant();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BlockAddress_1replaceUsesOfWithOnConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  llvm::BlockAddress *arg1 = (llvm::BlockAddress *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  Use *arg4 = (Use *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::BlockAddress **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(Use **)&jarg4; 
  (arg1)->replaceUsesOfWithOnConstant(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BlockAddress_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::BlockAddress::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1BlockAddress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::BlockAddress *arg1 = (llvm::BlockAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::BlockAddress **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getAlignOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Constant *)llvm::ConstantExpr::getAlignOf(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getSizeOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Constant *)llvm::ConstantExpr::getSizeOf(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getOffsetOf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::StructType *arg1 = (llvm::StructType *) 0 ;
  unsigned int arg2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::StructType **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getOffsetOf(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getOffsetOf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getOffsetOf(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNeg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  bool arg2 ;
  bool arg3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNeg(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNeg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  bool arg2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNeg(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNeg_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNeg(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFNeg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFNeg(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNot(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  bool arg4 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getAdd(arg1,arg2,arg3,arg4);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getAdd(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getAdd_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getAdd(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFAdd(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getSub_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  bool arg4 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getSub(arg1,arg2,arg3,arg4);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getSub_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getSub(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getSub_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getSub(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFSub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFSub(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getMul_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  bool arg4 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getMul(arg1,arg2,arg3,arg4);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getMul_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getMul(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getMul_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getMul(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFMul(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFMul(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getUDiv_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getUDiv(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getUDiv_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getUDiv(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getSDiv_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getSDiv(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getSDiv_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getSDiv(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFDiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFDiv(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getURem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getURem(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getSRem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getSRem(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFRem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFRem(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getAnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getAnd(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getOr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getOr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getXor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getXor(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getShl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  bool arg4 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getShl(arg1,arg2,arg3,arg4);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getShl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getShl(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getShl_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getShl(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getLShr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getLShr(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getLShr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getLShr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getAShr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getAShr(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getAShr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getAShr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getTrunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getTrunc(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getSExt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getSExt(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getZExt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getZExt(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFPTrunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFPTrunc(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFPExtend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFPExtend(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getUIToFP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getUIToFP(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getSIToFP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getSIToFP(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFPToUI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFPToUI(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFPToSI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFPToSI(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getPtrToInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getPtrToInt(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getIntToPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getIntToPtr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getBitCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getBitCast(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNSWNeg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNSWNeg(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNUWNeg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNUWNeg(arg1);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNSWAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNSWAdd(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNUWAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNUWAdd(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNSWSub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNSWSub(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNUWSub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNUWSub(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNSWMul(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNSWMul(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNUWMul(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNUWMul(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNSWShl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNSWShl(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getNUWShl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getNUWShl(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getExactSDiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getExactSDiv(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getExactUDiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getExactUDiv(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getExactAShr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getExactAShr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getExactLShr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getExactLShr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getBinOpIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getBinOpIdentity(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getBinOpAbsorber(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getBinOpAbsorber(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = *(llvm::Type **)&jarg3; 
  result = (llvm::Constant *)llvm::ConstantExpr::getCast(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getZExtOrBitCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getZExtOrBitCast(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getSExtOrBitCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getSExtOrBitCast(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getTruncOrBitCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getTruncOrBitCast(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getPointerCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getPointerCast(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getIntegerCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  bool arg3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getIntegerCast(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFPCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFPCast(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1isCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  result = (bool)((llvm::ConstantExpr const *)arg1)->isCast();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1isCompare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  result = (bool)((llvm::ConstantExpr const *)arg1)->isCompare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1hasIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  result = (bool)((llvm::ConstantExpr const *)arg1)->hasIndices();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1isGEPWithNoNotionalOverIndexing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  result = (bool)((llvm::ConstantExpr const *)arg1)->isGEPWithNoNotionalOverIndexing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getSelect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *arg3 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = *(llvm::Constant **)&jarg3; 
  result = (llvm::Constant *)llvm::ConstantExpr::getSelect(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *arg3 = (llvm::Constant *) 0 ;
  unsigned int arg4 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = *(llvm::Constant **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (llvm::Constant *)llvm::ConstantExpr::get(arg1,arg2,arg3,arg4);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *arg3 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = *(llvm::Constant **)&jarg3; 
  result = (llvm::Constant *)llvm::ConstantExpr::get(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getCompare(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  unsigned short arg1 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *arg3 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (unsigned short)jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = *(llvm::Constant **)&jarg3; 
  result = (llvm::Constant *)llvm::ConstantExpr::getCompare(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getICmp(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  unsigned short arg1 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *arg3 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (unsigned short)jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = *(llvm::Constant **)&jarg3; 
  result = (llvm::Constant *)llvm::ConstantExpr::getICmp(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getFCmp(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  unsigned short arg1 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *arg3 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (unsigned short)jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = *(llvm::Constant **)&jarg3; 
  result = (llvm::Constant *)llvm::ConstantExpr::getFCmp(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getGetElementPtr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  bool arg3 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getGetElementPtr(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getGetElementPtr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getGetElementPtr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getGetElementPtr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  bool arg3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getGetElementPtr(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getGetElementPtr_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getGetElementPtr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getGetElementPtr_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  bool arg3 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Constant *)llvm::ConstantExpr::getGetElementPtr(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getGetElementPtr_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getGetElementPtr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getInBoundsGetElementPtr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getInBoundsGetElementPtr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getInBoundsGetElementPtr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getInBoundsGetElementPtr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getInBoundsGetElementPtr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getInBoundsGetElementPtr(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getExtractElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getExtractElement(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getInsertElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *arg3 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = *(llvm::Constant **)&jarg3; 
  result = (llvm::Constant *)llvm::ConstantExpr::getInsertElement(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getShuffleVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::Constant *arg3 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  arg3 = *(llvm::Constant **)&jarg3; 
  result = (llvm::Constant *)llvm::ConstantExpr::getShuffleVector(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getExtractValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  ArrayRef< unsigned int > arg2 ;
  ArrayRef< unsigned int > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  argp2 = *(ArrayRef< unsigned int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< unsigned int >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)llvm::ConstantExpr::getExtractValue(arg1,arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getInsertValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  ArrayRef< unsigned int > arg3 ;
  ArrayRef< unsigned int > *argp3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  argp3 = *(ArrayRef< unsigned int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< unsigned int >");
    return 0;
  }
  arg3 = *argp3; 
  result = (llvm::Constant *)llvm::ConstantExpr::getInsertValue(arg1,arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getOpcode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  result = (unsigned int)((llvm::ConstantExpr const *)arg1)->getOpcode();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getPredicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  result = (unsigned int)((llvm::ConstantExpr const *)arg1)->getPredicate();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  ArrayRef< unsigned int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  result = ((llvm::ConstantExpr const *)arg1)->getIndices();
  *(ArrayRef< unsigned int > **)&jresult = new ArrayRef< unsigned int >((const ArrayRef< unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getOpcodeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  result = (char *)((llvm::ConstantExpr const *)arg1)->getOpcodeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getWithOperandReplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  unsigned int arg2 ;
  llvm::Constant *arg3 = (llvm::Constant *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::Constant **)&jarg3; 
  result = (llvm::Constant *)((llvm::ConstantExpr const *)arg1)->getWithOperandReplaced(arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getWithOperands_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Constant *)((llvm::ConstantExpr const *)arg1)->getWithOperands(arg2);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getWithOperands_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Type **)&jarg3; 
  result = (llvm::Constant *)((llvm::ConstantExpr const *)arg1)->getWithOperands(arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1getAsInstruction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  result = (llvm::Instruction *)(arg1)->getAsInstruction();
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1destroyConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  (arg1)->destroyConstant();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1replaceUsesOfWithOnConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  Use *arg4 = (Use *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(Use **)&jarg4; 
  (arg1)->replaceUsesOfWithOnConstant(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ConstantExpr::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ConstantExpr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ConstantExpr *arg1 = (llvm::ConstantExpr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ConstantExpr **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UndefValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::UndefValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::UndefValue *)llvm::UndefValue::get(arg1);
  *(llvm::UndefValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UndefValue_1getSequentialElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::UndefValue *arg1 = (llvm::UndefValue *) 0 ;
  llvm::UndefValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::UndefValue **)&jarg1; 
  result = (llvm::UndefValue *)((llvm::UndefValue const *)arg1)->getSequentialElement();
  *(llvm::UndefValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UndefValue_1getStructElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::UndefValue *arg1 = (llvm::UndefValue *) 0 ;
  unsigned int arg2 ;
  llvm::UndefValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::UndefValue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::UndefValue *)((llvm::UndefValue const *)arg1)->getStructElement(arg2);
  *(llvm::UndefValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UndefValue_1getElementValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::UndefValue *arg1 = (llvm::UndefValue *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  llvm::UndefValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::UndefValue **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  result = (llvm::UndefValue *)((llvm::UndefValue const *)arg1)->getElementValue(arg2);
  *(llvm::UndefValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UndefValue_1getElementValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::UndefValue *arg1 = (llvm::UndefValue *) 0 ;
  unsigned int arg2 ;
  llvm::UndefValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::UndefValue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::UndefValue *)((llvm::UndefValue const *)arg1)->getElementValue(arg2);
  *(llvm::UndefValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UndefValue_1destroyConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::UndefValue *arg1 = (llvm::UndefValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::UndefValue **)&jarg1; 
  (arg1)->destroyConstant();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UndefValue_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::UndefValue::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1UndefValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::UndefValue *arg1 = (llvm::UndefValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::UndefValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDString_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::MDString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::MDString *)llvm::MDString::get(*arg1,arg2);
  *(llvm::MDString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDString_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  llvm::MDString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (llvm::MDString *)llvm::MDString::get(*arg1,(char const *)arg2);
  *(llvm::MDString **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDString_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::MDString *arg1 = (llvm::MDString *) 0 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDString **)&jarg1; 
  result = ((llvm::MDString const *)arg1)->getString();
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDString_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::MDString *arg1 = (llvm::MDString *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDString **)&jarg1; 
  result = (unsigned int)((llvm::MDString const *)arg1)->getLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDString_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::MDString *arg1 = (llvm::MDString *) 0 ;
  llvm::MDString::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDString **)&jarg1; 
  result = (llvm::MDString::iterator)((llvm::MDString const *)arg1)->begin();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDString_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::MDString *arg1 = (llvm::MDString *) 0 ;
  llvm::MDString::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDString **)&jarg1; 
  result = (llvm::MDString::iterator)((llvm::MDString const *)arg1)->end();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDString_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::MDString::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1MDString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::MDString *arg1 = (llvm::MDString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::MDString **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::MDNode *)llvm::MDNode::get(*arg1,arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1getWhenValsUnresolved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  bool arg3 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::MDNode *)llvm::MDNode::getWhenValsUnresolved(*arg1,arg2,arg3);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1getIfExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::MDNode *)llvm::MDNode::getIfExists(*arg1,arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1getTemporary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::MDNode *)llvm::MDNode::getTemporary(*arg1,arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1deleteTemporary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  llvm::MDNode::deleteTemporary(arg1);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1replaceOperandWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  unsigned int arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  (arg1)->replaceOperandWith(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1getOperand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  unsigned int arg2 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Value *)((llvm::MDNode const *)arg1)->getOperand(arg2);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1getNumOperands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  result = (unsigned int)((llvm::MDNode const *)arg1)->getNumOperands();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1isFunctionLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  result = (bool)((llvm::MDNode const *)arg1)->isFunctionLocal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1getFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  llvm::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  result = (llvm::Function *)((llvm::MDNode const *)arg1)->getFunction();
  *(llvm::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1Profile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  llvm::FoldingSetNodeID *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  arg2 = *(llvm::FoldingSetNodeID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::FoldingSetNodeID & reference is null");
    return ;
  } 
  ((llvm::MDNode const *)arg1)->Profile(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::MDNode::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1getMostGenericTBAA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  llvm::MDNode *arg2 = (llvm::MDNode *) 0 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  arg2 = *(llvm::MDNode **)&jarg2; 
  result = (llvm::MDNode *)llvm::MDNode::getMostGenericTBAA(arg1,arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1getMostGenericFPMath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  llvm::MDNode *arg2 = (llvm::MDNode *) 0 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  arg2 = *(llvm::MDNode **)&jarg2; 
  result = (llvm::MDNode *)llvm::MDNode::getMostGenericFPMath(arg1,arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1getMostGenericRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  llvm::MDNode *arg2 = (llvm::MDNode *) 0 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  arg2 = *(llvm::MDNode **)&jarg2; 
  result = (llvm::MDNode *)llvm::MDNode::getMostGenericRange(arg1,arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_NamedMDNode_1eraseFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  (arg1)->eraseFromParent();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_NamedMDNode_1dropAllReferences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  (arg1)->dropAllReferences();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1NamedMDNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_NamedMDNode_1getParent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  llvm::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  result = (llvm::Module *)(arg1)->getParent();
  *(llvm::Module **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_NamedMDNode_1getOperand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  unsigned int arg2 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::MDNode *)((llvm::NamedMDNode const *)arg1)->getOperand(arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_NamedMDNode_1getNumOperands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  result = (unsigned int)((llvm::NamedMDNode const *)arg1)->getNumOperands();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_NamedMDNode_1addOperand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  llvm::MDNode *arg2 = (llvm::MDNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  arg2 = *(llvm::MDNode **)&jarg2; 
  (arg1)->addOperand(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_NamedMDNode_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  result = ((llvm::NamedMDNode const *)arg1)->getName();
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_NamedMDNode_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  llvm::raw_ostream *arg2 = 0 ;
  llvm::AssemblyAnnotationWriter *arg3 = (llvm::AssemblyAnnotationWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  arg2 = *(llvm::raw_ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::raw_ostream & reference is null");
    return ;
  } 
  arg3 = *(llvm::AssemblyAnnotationWriter **)&jarg3; 
  ((llvm::NamedMDNode const *)arg1)->print(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_NamedMDNode_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  llvm::raw_ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  arg2 = *(llvm::raw_ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::raw_ostream & reference is null");
    return ;
  } 
  ((llvm::NamedMDNode const *)arg1)->print(*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_NamedMDNode_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  ((llvm::NamedMDNode const *)arg1)->dump();
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1DebugLoc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  llvm::DebugLoc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::DebugLoc *)new llvm::DebugLoc();
  *(llvm::DebugLoc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  llvm::MDNode *arg3 = (llvm::MDNode *) 0 ;
  llvm::MDNode *arg4 = (llvm::MDNode *) 0 ;
  llvm::DebugLoc result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::MDNode **)&jarg3; 
  arg4 = *(llvm::MDNode **)&jarg4; 
  result = llvm::DebugLoc::get(arg1,arg2,arg3,arg4);
  *(llvm::DebugLoc **)&jresult = new llvm::DebugLoc((const llvm::DebugLoc &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  llvm::MDNode *arg3 = (llvm::MDNode *) 0 ;
  llvm::DebugLoc result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::MDNode **)&jarg3; 
  result = llvm::DebugLoc::get(arg1,arg2,arg3);
  *(llvm::DebugLoc **)&jresult = new llvm::DebugLoc((const llvm::DebugLoc &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1getFromDILocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  llvm::DebugLoc result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  result = llvm::DebugLoc::getFromDILocation(arg1);
  *(llvm::DebugLoc **)&jresult = new llvm::DebugLoc((const llvm::DebugLoc &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1getFromDILexicalBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::MDNode *arg1 = (llvm::MDNode *) 0 ;
  llvm::DebugLoc result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::MDNode **)&jarg1; 
  result = llvm::DebugLoc::getFromDILexicalBlock(arg1);
  *(llvm::DebugLoc **)&jresult = new llvm::DebugLoc((const llvm::DebugLoc &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1isUnknown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::DebugLoc *arg1 = (llvm::DebugLoc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::DebugLoc **)&jarg1; 
  result = (bool)((llvm::DebugLoc const *)arg1)->isUnknown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1getLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::DebugLoc *arg1 = (llvm::DebugLoc *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::DebugLoc **)&jarg1; 
  result = (unsigned int)((llvm::DebugLoc const *)arg1)->getLine();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1getCol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::DebugLoc *arg1 = (llvm::DebugLoc *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::DebugLoc **)&jarg1; 
  result = (unsigned int)((llvm::DebugLoc const *)arg1)->getCol();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1getScope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::DebugLoc *arg1 = (llvm::DebugLoc *) 0 ;
  llvm::LLVMContext *arg2 = 0 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::DebugLoc **)&jarg1; 
  arg2 = *(llvm::LLVMContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext const & reference is null");
    return 0;
  } 
  result = (llvm::MDNode *)((llvm::DebugLoc const *)arg1)->getScope((llvm::LLVMContext const &)*arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1getInlinedAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::DebugLoc *arg1 = (llvm::DebugLoc *) 0 ;
  llvm::LLVMContext *arg2 = 0 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::DebugLoc **)&jarg1; 
  arg2 = *(llvm::LLVMContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext const & reference is null");
    return 0;
  } 
  result = (llvm::MDNode *)((llvm::DebugLoc const *)arg1)->getInlinedAt((llvm::LLVMContext const &)*arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1getScopeAndInlinedAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  llvm::DebugLoc *arg1 = (llvm::DebugLoc *) 0 ;
  llvm::MDNode **arg2 = 0 ;
  llvm::MDNode **arg3 = 0 ;
  llvm::LLVMContext *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::DebugLoc **)&jarg1; 
  arg2 = *(llvm::MDNode ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::MDNode *& reference is null");
    return ;
  } 
  arg3 = *(llvm::MDNode ***)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::MDNode *& reference is null");
    return ;
  } 
  arg4 = *(llvm::LLVMContext **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext const & reference is null");
    return ;
  } 
  ((llvm::DebugLoc const *)arg1)->getScopeAndInlinedAt(*arg2,*arg3,(llvm::LLVMContext const &)*arg4);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1getAsMDNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::DebugLoc *arg1 = (llvm::DebugLoc *) 0 ;
  llvm::LLVMContext *arg2 = 0 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::DebugLoc **)&jarg1; 
  arg2 = *(llvm::LLVMContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext const & reference is null");
    return 0;
  } 
  result = (llvm::MDNode *)((llvm::DebugLoc const *)arg1)->getAsMDNode((llvm::LLVMContext const &)*arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_DebugLoc_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::DebugLoc *arg1 = (llvm::DebugLoc *) 0 ;
  llvm::LLVMContext *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::DebugLoc **)&jarg1; 
  arg2 = *(llvm::LLVMContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext const & reference is null");
    return ;
  } 
  ((llvm::DebugLoc const *)arg1)->dump((llvm::LLVMContext const &)*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1DebugLoc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::DebugLoc *arg1 = (llvm::DebugLoc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::DebugLoc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1User(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::User *arg1 = (llvm::User *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::User **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1getOperand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::User *arg1 = (llvm::User *) 0 ;
  unsigned int arg2 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Value *)((llvm::User const *)arg1)->getOperand(arg2);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1setOperand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::User *arg1 = (llvm::User *) 0 ;
  unsigned int arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::User **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  (arg1)->setOperand(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1getOperandUse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::User *arg1 = (llvm::User *) 0 ;
  unsigned int arg2 ;
  Use *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Use *) &((llvm::User const *)arg1)->getOperandUse(arg2);
  *(Use **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1getNumOperands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User *arg1 = (llvm::User *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User **)&jarg1; 
  result = (unsigned int)((llvm::User const *)arg1)->getNumOperands();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1op_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User *arg1 = (llvm::User *) 0 ;
  llvm::User::op_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User **)&jarg1; 
  result = (llvm::User::op_iterator)(arg1)->op_begin();
  *(llvm::User::op_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1op_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User *arg1 = (llvm::User *) 0 ;
  llvm::User::op_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User **)&jarg1; 
  result = (llvm::User::op_iterator)(arg1)->op_end();
  *(llvm::User::op_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1User_1value_1op_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Use *arg1 = (Use *) 0 ;
  llvm::User::value_op_iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Use **)&jarg1; 
  result = (llvm::User::value_op_iterator *)new llvm::User::value_op_iterator(arg1);
  *(llvm::User::value_op_iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (llvm::Value *)((llvm::User::value_op_iterator const *)arg1)->operator *();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (llvm::Value *)((llvm::User::value_op_iterator const *)arg1)->operator ->();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1User_1value_1op_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  (*arg1)->dump();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::raw_ostream *arg2 = 0 ;
  llvm::AssemblyAnnotationWriter *arg3 = (llvm::AssemblyAnnotationWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(llvm::raw_ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::raw_ostream & reference is null");
    return ;
  } 
  arg3 = *(llvm::AssemblyAnnotationWriter **)&jarg3; 
  (*arg1)->print(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::raw_ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(llvm::raw_ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::raw_ostream & reference is null");
    return ;
  } 
  (*arg1)->print(*arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (llvm::Type *)(*arg1)->getType();
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::LLVMContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (llvm::LLVMContext *) &(*arg1)->getContext();
  *(llvm::LLVMContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1hasName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (bool)(*arg1)->hasName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1getValueName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::ValueName *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (llvm::ValueName *)(*arg1)->getValueName();
  *(llvm::ValueName **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1setValueName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::ValueName *arg2 = (llvm::ValueName *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(llvm::ValueName **)&jarg2; 
  (*arg1)->setValueName(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::StringRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (*arg1)->getName();
  *(llvm::StringRef **)&jresult = new llvm::StringRef((const llvm::StringRef &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Twine *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return ;
  } 
  (*arg1)->setName((llvm::Twine const &)*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1takeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (*arg1)->takeName(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1replaceAllUsesWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (*arg1)->replaceAllUsesWith(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1use_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (bool)(*arg1)->use_empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1use_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  SwigValueWrapper< value_use_iterator< User > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (*arg1)->use_begin();
  *(llvm::Value::use_iterator **)&jresult = new llvm::Value::use_iterator((const llvm::Value::use_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1use_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  SwigValueWrapper< value_use_iterator< User > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (*arg1)->use_end();
  *(llvm::Value::use_iterator **)&jresult = new llvm::Value::use_iterator((const llvm::Value::use_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1use_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  User *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (User *)(*arg1)->use_back();
  *(User **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1hasOneUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (bool)(*arg1)->hasOneUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1hasNUses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->hasNUses(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1hasNUsesOrMore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->hasNUsesOrMore(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1isUsedInBasicBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (bool)(*arg1)->isUsedInBasicBlock((llvm::BasicBlock const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1getNumUses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (unsigned int)(*arg1)->getNumUses();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1addUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  Use *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(Use **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Use & reference is null");
    return ;
  } 
  (*arg1)->addUse(*arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1getValueID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (unsigned int)(*arg1)->getValueID();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1getRawSubclassOptionalData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (unsigned int)(*arg1)->getRawSubclassOptionalData();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1clearSubclassOptionalData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  (*arg1)->clearSubclassOptionalData();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1hasSameSubclassOptionalData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  result = (bool)(*arg1)->hasSameSubclassOptionalData((llvm::Value const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1intersectOptionalDataWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (*arg1)->intersectOptionalDataWith((llvm::Value const *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1hasValueHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (bool)(*arg1)->hasValueHandle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1stripPointerCasts_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (llvm::Value *)(*arg1)->stripPointerCasts();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1stripPointerCastsNoFollowAliases_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (llvm::Value *)(*arg1)->stripPointerCastsNoFollowAliases();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1stripInBoundsConstantOffsets_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (llvm::Value *)(*arg1)->stripInBoundsConstantOffsets();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1stripInBoundsOffsets_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (llvm::Value *)(*arg1)->stripInBoundsOffsets();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1isDereferenceablePointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (bool)(*arg1)->isDereferenceablePointer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1DoPHITranslation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  result = (llvm::Value *)(*arg1)->DoPHITranslation((llvm::BasicBlock const *)arg2,(llvm::BasicBlock const *)arg3);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1MaximumAlignment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = (unsigned int)(unsigned int) (llvm::Value::MaximumAlignment);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1mutateType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  (*arg1)->mutateType(arg2);
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1iterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::User::value_op_iterator *arg1 = (llvm::User::value_op_iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User::value_op_iterator **)&jarg1; 
  result = llvm_Value_toString((llvm::Value*)(arg1)->operator ->());
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User *arg1 = (llvm::User *) 0 ;
  SwigValueWrapper< llvm::User::value_op_iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User **)&jarg1; 
  result = (arg1)->value_op_begin();
  *(llvm::User::value_op_iterator **)&jresult = new llvm::User::value_op_iterator((const llvm::User::value_op_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1value_1op_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::User *arg1 = (llvm::User *) 0 ;
  SwigValueWrapper< llvm::User::value_op_iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User **)&jarg1; 
  result = (arg1)->value_op_end();
  *(llvm::User::value_op_iterator **)&jresult = new llvm::User::value_op_iterator((const llvm::User::value_op_iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1dropAllReferences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::User *arg1 = (llvm::User *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::User **)&jarg1; 
  (arg1)->dropAllReferences();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1replaceUsesOfWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  llvm::User *arg1 = (llvm::User *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::User **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  (arg1)->replaceUsesOfWith(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::User::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1Instruction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::Instruction **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1use_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (llvm::Instruction *)(arg1)->use_back();
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1getParent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (llvm::BasicBlock *)((llvm::Instruction const *)arg1)->getParent();
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1removeFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  (arg1)->removeFromParent();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1eraseFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  (arg1)->eraseFromParent();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1insertBefore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  (arg1)->insertBefore(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1insertAfter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  (arg1)->insertAfter(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1moveBefore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  (arg1)->moveBefore(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1getOpcode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (unsigned int)((llvm::Instruction const *)arg1)->getOpcode();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1getOpcodeName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (char *)((llvm::Instruction const *)arg1)->getOpcodeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isTerminator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->isTerminator();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isBinaryOp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->isBinaryOp();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isShift_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)(arg1)->isShift();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isCast_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->isCast();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1getOpcodeName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  unsigned int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (char *)llvm::Instruction::getOpcodeName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isTerminator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)llvm::Instruction::isTerminator(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isBinaryOp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)llvm::Instruction::isBinaryOp(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isShift_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)llvm::Instruction::isShift(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isLogicalShift(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->isLogicalShift();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isArithmeticShift(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->isArithmeticShift();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isCast_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)llvm::Instruction::isCast(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1hasMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->hasMetadata();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1hasMetadataOtherThanDebugLoc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->hasMetadataOtherThanDebugLoc();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1getMetadata_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  unsigned int arg2 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::MDNode *)((llvm::Instruction const *)arg1)->getMetadata(arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1getMetadata_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::MDNode *)((llvm::Instruction const *)arg1)->getMetadata(arg2);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1getAllMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::SmallVectorImpl< std::pair< unsigned int,llvm::MDNode * > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< std::pair< unsigned int,llvm::MDNode * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< std::pair< unsigned int,llvm::MDNode * > > & reference is null");
    return ;
  } 
  ((llvm::Instruction const *)arg1)->getAllMetadata(*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1getAllMetadataOtherThanDebugLoc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::SmallVectorImpl< std::pair< unsigned int,llvm::MDNode * > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< std::pair< unsigned int,llvm::MDNode * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< std::pair< unsigned int,llvm::MDNode * > > & reference is null");
    return ;
  } 
  ((llvm::Instruction const *)arg1)->getAllMetadataOtherThanDebugLoc(*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1setMetadata_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  unsigned int arg2 ;
  llvm::MDNode *arg3 = (llvm::MDNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::MDNode **)&jarg3; 
  (arg1)->setMetadata(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1setMetadata_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::StringRef arg2 ;
  llvm::MDNode *arg3 = (llvm::MDNode *) 0 ;
  llvm::StringRef *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::MDNode **)&jarg3; 
  (arg1)->setMetadata(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1setDebugLoc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::DebugLoc *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::DebugLoc **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::DebugLoc const & reference is null");
    return ;
  } 
  (arg1)->setDebugLoc((llvm::DebugLoc const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1getDebugLoc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::DebugLoc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (llvm::DebugLoc *) &((llvm::Instruction const *)arg1)->getDebugLoc();
  *(llvm::DebugLoc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1setHasUnsafeAlgebra(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setHasUnsafeAlgebra(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1setHasNoNaNs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setHasNoNaNs(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1setHasNoInfs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setHasNoInfs(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1setHasNoSignedZeros(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setHasNoSignedZeros(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1setHasAllowReciprocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setHasAllowReciprocal(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1setFastMathFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::FastMathFlags arg2 ;
  llvm::FastMathFlags *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  argp2 = *(llvm::FastMathFlags **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::FastMathFlags");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setFastMathFlags(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1hasUnsafeAlgebra(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->hasUnsafeAlgebra();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1hasNoNaNs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->hasNoNaNs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1hasNoInfs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->hasNoInfs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1hasNoSignedZeros(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->hasNoSignedZeros();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1hasAllowReciprocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->hasAllowReciprocal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1getFastMathFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::FastMathFlags result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = ((llvm::Instruction const *)arg1)->getFastMathFlags();
  *(llvm::FastMathFlags **)&jresult = new llvm::FastMathFlags((const llvm::FastMathFlags &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1copyFastMathFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  (arg1)->copyFastMathFlags((llvm::Instruction const *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isAssociative_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->isAssociative();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isAssociative_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)llvm::Instruction::isAssociative(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isCommutative_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->isCommutative();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isCommutative_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)llvm::Instruction::isCommutative(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isIdempotent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->isIdempotent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isIdempotent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)llvm::Instruction::isIdempotent(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isNilpotent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->isNilpotent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isNilpotent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  unsigned int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (bool)llvm::Instruction::isNilpotent(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1mayWriteToMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->mayWriteToMemory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1mayReadFromMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->mayReadFromMemory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1mayReadOrWriteMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->mayReadOrWriteMemory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1mayThrow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->mayThrow();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1mayReturn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->mayReturn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1mayHaveSideEffects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)((llvm::Instruction const *)arg1)->mayHaveSideEffects();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (llvm::Instruction *)((llvm::Instruction const *)arg1)->clone();
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isIdenticalTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  result = (bool)((llvm::Instruction const *)arg1)->isIdenticalTo((llvm::Instruction const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isIdenticalToWhenDefined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  result = (bool)((llvm::Instruction const *)arg1)->isIdenticalToWhenDefined((llvm::Instruction const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1CompareIgnoringAlignment_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Instruction::OperationEquivalenceFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Instruction::OperationEquivalenceFlags)llvm::Instruction::CompareIgnoringAlignment;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1CompareUsingScalarTypes_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Instruction::OperationEquivalenceFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Instruction::OperationEquivalenceFlags)llvm::Instruction::CompareUsingScalarTypes;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isSameOperationAs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)((llvm::Instruction const *)arg1)->isSameOperationAs((llvm::Instruction const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isSameOperationAs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  result = (bool)((llvm::Instruction const *)arg1)->isSameOperationAs((llvm::Instruction const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1isUsedOutsideOfBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (bool)((llvm::Instruction const *)arg1)->isUsedOutsideOfBlock((llvm::BasicBlock const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::Instruction::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_NotAtomic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::AtomicOrdering)llvm::NotAtomic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Unordered_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::AtomicOrdering)llvm::Unordered;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Monotonic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::AtomicOrdering)llvm::Monotonic;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Acquire_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::AtomicOrdering)llvm::Acquire;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Release_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::AtomicOrdering)llvm::Release;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AcquireRelease_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::AtomicOrdering)llvm::AcquireRelease;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SequentiallyConsistent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::AtomicOrdering)llvm::SequentiallyConsistent;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SingleThread_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::SynchronizationScope result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::SynchronizationScope)llvm::SingleThread;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CrossThread_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::SynchronizationScope result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::SynchronizationScope)llvm::CrossThread;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1,arg2);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::Instruction *arg3 = (llvm::Instruction *) 0 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = *(llvm::Instruction **)&jarg3; 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1,(llvm::Twine const &)*arg2,arg3);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1,(llvm::Twine const &)*arg2);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1,(llvm::Twine const &)*arg2,arg3);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  unsigned int arg3 ;
  llvm::Twine *arg4 = 0 ;
  llvm::Instruction *arg5 = (llvm::Instruction *) 0 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::Instruction **)&jarg5; 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  unsigned int arg3 ;
  llvm::Twine *arg4 = 0 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1,arg2,arg3,(llvm::Twine const &)*arg4);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  unsigned int arg3 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1,arg2,arg3);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1AllocaInst_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  unsigned int arg3 ;
  llvm::Twine *arg4 = 0 ;
  llvm::BasicBlock *arg5 = (llvm::BasicBlock *) 0 ;
  llvm::AllocaInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::BasicBlock **)&jarg5; 
  result = (llvm::AllocaInst *)new llvm::AllocaInst(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::AllocaInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1AllocaInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::AllocaInst *arg1 = (llvm::AllocaInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::AllocaInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AllocaInst_1isArrayAllocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::AllocaInst *arg1 = (llvm::AllocaInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AllocaInst **)&jarg1; 
  result = (bool)((llvm::AllocaInst const *)arg1)->isArrayAllocation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AllocaInst_1getArraySize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::AllocaInst *arg1 = (llvm::AllocaInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AllocaInst **)&jarg1; 
  result = (llvm::Value *)((llvm::AllocaInst const *)arg1)->getArraySize();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AllocaInst_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::AllocaInst *arg1 = (llvm::AllocaInst *) 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AllocaInst **)&jarg1; 
  result = (llvm::PointerType *)((llvm::AllocaInst const *)arg1)->getType();
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AllocaInst_1getAllocatedType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::AllocaInst *arg1 = (llvm::AllocaInst *) 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AllocaInst **)&jarg1; 
  result = (llvm::Type *)((llvm::AllocaInst const *)arg1)->getAllocatedType();
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AllocaInst_1getAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::AllocaInst *arg1 = (llvm::AllocaInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AllocaInst **)&jarg1; 
  result = (unsigned int)((llvm::AllocaInst const *)arg1)->getAlignment();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AllocaInst_1setAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::AllocaInst *arg1 = (llvm::AllocaInst *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AllocaInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AllocaInst_1isStaticAlloca(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::AllocaInst *arg1 = (llvm::AllocaInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AllocaInst **)&jarg1; 
  result = (bool)((llvm::AllocaInst const *)arg1)->isStaticAlloca();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AllocaInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::AllocaInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AllocaInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::AllocaInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::Instruction *arg3 = (llvm::Instruction *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = *(llvm::Instruction **)&jarg3; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  bool arg3 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3,arg4);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  bool arg3 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  bool arg3 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3,arg4);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  bool arg3 ;
  unsigned int arg4 ;
  llvm::Instruction *arg5 = (llvm::Instruction *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (unsigned int)jarg4; 
  arg5 = *(llvm::Instruction **)&jarg5; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3,arg4,arg5);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  bool arg3 ;
  unsigned int arg4 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (unsigned int)jarg4; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3,arg4);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  bool arg3 ;
  unsigned int arg4 ;
  llvm::BasicBlock *arg5 = (llvm::BasicBlock *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (unsigned int)jarg4; 
  arg5 = *(llvm::BasicBlock **)&jarg5; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3,arg4,arg5);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  bool arg3 ;
  unsigned int arg4 ;
  llvm::AtomicOrdering arg5 ;
  llvm::SynchronizationScope arg6 ;
  llvm::Instruction *arg7 = (llvm::Instruction *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (llvm::AtomicOrdering)jarg5; 
  arg6 = (llvm::SynchronizationScope)jarg6; 
  arg7 = *(llvm::Instruction **)&jarg7; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  bool arg3 ;
  unsigned int arg4 ;
  llvm::AtomicOrdering arg5 ;
  llvm::SynchronizationScope arg6 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (llvm::AtomicOrdering)jarg5; 
  arg6 = (llvm::SynchronizationScope)jarg6; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3,arg4,arg5,arg6);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  bool arg3 ;
  unsigned int arg4 ;
  llvm::AtomicOrdering arg5 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (llvm::AtomicOrdering)jarg5; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3,arg4,arg5);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jint jarg5, jint jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  bool arg3 ;
  unsigned int arg4 ;
  llvm::AtomicOrdering arg5 ;
  llvm::SynchronizationScope arg6 ;
  llvm::BasicBlock *arg7 = (llvm::BasicBlock *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (llvm::AtomicOrdering)jarg5; 
  arg6 = (llvm::SynchronizationScope)jarg6; 
  arg7 = *(llvm::BasicBlock **)&jarg7; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(llvm::Twine const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  llvm::Instruction *arg3 = (llvm::Instruction *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(llvm::Instruction **)&jarg3; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(char const *)arg2,arg3);
  *(llvm::LoadInst **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(char const *)arg2,arg3);
  *(llvm::LoadInst **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(char const *)arg2,arg3,arg4);
  *(llvm::LoadInst **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(char const *)arg2,arg3);
  *(llvm::LoadInst **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(char const *)arg2);
  *(llvm::LoadInst **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1);
  *(llvm::LoadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1LoadInst_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::LoadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::LoadInst *)new llvm::LoadInst(arg1,(char const *)arg2,arg3,arg4);
  *(llvm::LoadInst **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1isVolatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  result = (bool)((llvm::LoadInst const *)arg1)->isVolatile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1setVolatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVolatile(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1getAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  result = (unsigned int)((llvm::LoadInst const *)arg1)->getAlignment();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1setAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1getOrdering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  result = (llvm::AtomicOrdering)((llvm::LoadInst const *)arg1)->getOrdering();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1setOrdering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  llvm::AtomicOrdering arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  arg2 = (llvm::AtomicOrdering)jarg2; 
  (arg1)->setOrdering(arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1getSynchScope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  llvm::SynchronizationScope result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  result = (llvm::SynchronizationScope)((llvm::LoadInst const *)arg1)->getSynchScope();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1setSynchScope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  llvm::SynchronizationScope arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  arg2 = (llvm::SynchronizationScope)jarg2; 
  (arg1)->setSynchScope(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1isAtomic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  result = (bool)((llvm::LoadInst const *)arg1)->isAtomic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1setAtomic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  llvm::AtomicOrdering arg2 ;
  llvm::SynchronizationScope arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  arg2 = (llvm::AtomicOrdering)jarg2; 
  arg3 = (llvm::SynchronizationScope)jarg3; 
  (arg1)->setAtomic(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1setAtomic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  llvm::AtomicOrdering arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  arg2 = (llvm::AtomicOrdering)jarg2; 
  (arg1)->setAtomic(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1isSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  result = (bool)((llvm::LoadInst const *)arg1)->isSimple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1isUnordered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  result = (bool)((llvm::LoadInst const *)arg1)->isUnordered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1getPointerOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getPointerOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1getPointerOperandIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::LoadInst::getPointerOperandIndex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1getPointerAddressSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  result = (unsigned int)((llvm::LoadInst const *)arg1)->getPointerAddressSpace();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::LoadInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LoadInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::LoadInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1LoadInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::LoadInst *arg1 = (llvm::LoadInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::LoadInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1isVolatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  result = (bool)((llvm::StoreInst const *)arg1)->isVolatile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1setVolatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVolatile(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1getAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  result = (unsigned int)((llvm::StoreInst const *)arg1)->getAlignment();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1setAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1getOrdering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  result = (llvm::AtomicOrdering)((llvm::StoreInst const *)arg1)->getOrdering();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1setOrdering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  llvm::AtomicOrdering arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  arg2 = (llvm::AtomicOrdering)jarg2; 
  (arg1)->setOrdering(arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1getSynchScope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  llvm::SynchronizationScope result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  result = (llvm::SynchronizationScope)((llvm::StoreInst const *)arg1)->getSynchScope();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1setSynchScope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  llvm::SynchronizationScope arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  arg2 = (llvm::SynchronizationScope)jarg2; 
  (arg1)->setSynchScope(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1isAtomic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  result = (bool)((llvm::StoreInst const *)arg1)->isAtomic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1setAtomic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  llvm::AtomicOrdering arg2 ;
  llvm::SynchronizationScope arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  arg2 = (llvm::AtomicOrdering)jarg2; 
  arg3 = (llvm::SynchronizationScope)jarg3; 
  (arg1)->setAtomic(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1setAtomic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  llvm::AtomicOrdering arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  arg2 = (llvm::AtomicOrdering)jarg2; 
  (arg1)->setAtomic(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1isSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  result = (bool)((llvm::StoreInst const *)arg1)->isSimple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1isUnordered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  result = (bool)((llvm::StoreInst const *)arg1)->isUnordered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1getValueOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getValueOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1getPointerOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getPointerOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1getPointerOperandIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::StoreInst::getPointerOperandIndex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1getPointerAddressSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  result = (unsigned int)((llvm::StoreInst const *)arg1)->getPointerAddressSpace();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::StoreInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::StoreInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1StoreInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::StoreInst *arg1 = (llvm::StoreInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::StoreInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FenceInst_1getOrdering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::FenceInst *arg1 = (llvm::FenceInst *) 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::FenceInst **)&jarg1; 
  result = (llvm::AtomicOrdering)((llvm::FenceInst const *)arg1)->getOrdering();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FenceInst_1setOrdering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::FenceInst *arg1 = (llvm::FenceInst *) 0 ;
  llvm::AtomicOrdering arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::FenceInst **)&jarg1; 
  arg2 = (llvm::AtomicOrdering)jarg2; 
  (arg1)->setOrdering(arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FenceInst_1getSynchScope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::FenceInst *arg1 = (llvm::FenceInst *) 0 ;
  llvm::SynchronizationScope result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::FenceInst **)&jarg1; 
  result = (llvm::SynchronizationScope)((llvm::FenceInst const *)arg1)->getSynchScope();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FenceInst_1setSynchScope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::FenceInst *arg1 = (llvm::FenceInst *) 0 ;
  llvm::SynchronizationScope arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::FenceInst **)&jarg1; 
  arg2 = (llvm::SynchronizationScope)jarg2; 
  (arg1)->setSynchScope(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FenceInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::FenceInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FenceInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::FenceInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1FenceInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::FenceInst *arg1 = (llvm::FenceInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::FenceInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1isVolatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::AtomicCmpXchgInst *arg1 = (llvm::AtomicCmpXchgInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicCmpXchgInst **)&jarg1; 
  result = (bool)((llvm::AtomicCmpXchgInst const *)arg1)->isVolatile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1setVolatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::AtomicCmpXchgInst *arg1 = (llvm::AtomicCmpXchgInst *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicCmpXchgInst **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVolatile(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1setOrdering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::AtomicCmpXchgInst *arg1 = (llvm::AtomicCmpXchgInst *) 0 ;
  llvm::AtomicOrdering arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicCmpXchgInst **)&jarg1; 
  arg2 = (llvm::AtomicOrdering)jarg2; 
  (arg1)->setOrdering(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1setSynchScope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::AtomicCmpXchgInst *arg1 = (llvm::AtomicCmpXchgInst *) 0 ;
  llvm::SynchronizationScope arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicCmpXchgInst **)&jarg1; 
  arg2 = (llvm::SynchronizationScope)jarg2; 
  (arg1)->setSynchScope(arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1getOrdering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::AtomicCmpXchgInst *arg1 = (llvm::AtomicCmpXchgInst *) 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicCmpXchgInst **)&jarg1; 
  result = (llvm::AtomicOrdering)((llvm::AtomicCmpXchgInst const *)arg1)->getOrdering();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1getSynchScope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::AtomicCmpXchgInst *arg1 = (llvm::AtomicCmpXchgInst *) 0 ;
  llvm::SynchronizationScope result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicCmpXchgInst **)&jarg1; 
  result = (llvm::SynchronizationScope)((llvm::AtomicCmpXchgInst const *)arg1)->getSynchScope();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1getPointerOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::AtomicCmpXchgInst *arg1 = (llvm::AtomicCmpXchgInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicCmpXchgInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getPointerOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1getPointerOperandIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::AtomicCmpXchgInst::getPointerOperandIndex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1getCompareOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::AtomicCmpXchgInst *arg1 = (llvm::AtomicCmpXchgInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicCmpXchgInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getCompareOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1getNewValOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::AtomicCmpXchgInst *arg1 = (llvm::AtomicCmpXchgInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicCmpXchgInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getNewValOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1getPointerAddressSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::AtomicCmpXchgInst *arg1 = (llvm::AtomicCmpXchgInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicCmpXchgInst **)&jarg1; 
  result = (unsigned int)((llvm::AtomicCmpXchgInst const *)arg1)->getPointerAddressSpace();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::AtomicCmpXchgInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::AtomicCmpXchgInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1AtomicCmpXchgInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::AtomicCmpXchgInst *arg1 = (llvm::AtomicCmpXchgInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::AtomicCmpXchgInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1FIRST_1BINOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::AtomicRMWInst::BinOp result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::AtomicRMWInst::BinOp)llvm::AtomicRMWInst::FIRST_BINOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1LAST_1BINOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::AtomicRMWInst::BinOp result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::AtomicRMWInst::BinOp)llvm::AtomicRMWInst::LAST_BINOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1getOperation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  llvm::AtomicRMWInst::BinOp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  result = (llvm::AtomicRMWInst::BinOp)((llvm::AtomicRMWInst const *)arg1)->getOperation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1setOperation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  llvm::AtomicRMWInst::BinOp arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  arg2 = (llvm::AtomicRMWInst::BinOp)jarg2; 
  (arg1)->setOperation(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1isVolatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  result = (bool)((llvm::AtomicRMWInst const *)arg1)->isVolatile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1setVolatile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVolatile(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1setOrdering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  llvm::AtomicOrdering arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  arg2 = (llvm::AtomicOrdering)jarg2; 
  (arg1)->setOrdering(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1setSynchScope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  llvm::SynchronizationScope arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  arg2 = (llvm::SynchronizationScope)jarg2; 
  (arg1)->setSynchScope(arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1getOrdering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  llvm::AtomicOrdering result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  result = (llvm::AtomicOrdering)((llvm::AtomicRMWInst const *)arg1)->getOrdering();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1getSynchScope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  llvm::SynchronizationScope result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  result = (llvm::SynchronizationScope)((llvm::AtomicRMWInst const *)arg1)->getSynchScope();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1getPointerOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getPointerOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1getPointerOperandIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::AtomicRMWInst::getPointerOperandIndex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1getValOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getValOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1getPointerAddressSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  result = (unsigned int)((llvm::AtomicRMWInst const *)arg1)->getPointerAddressSpace();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::AtomicRMWInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::AtomicRMWInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1AtomicRMWInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::AtomicRMWInst *arg1 = (llvm::AtomicRMWInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::AtomicRMWInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_checkGEPType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  result = (llvm::Type *)llvm::checkGEPType(arg1);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::GetElementPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::GetElementPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  llvm::Twine *arg3 = 0 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::GetElementPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::GetElementPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::GetElementPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(arg1,arg2);
  *(llvm::GetElementPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::GetElementPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::GetElementPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1CreateInBounds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::GetElementPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::CreateInBounds(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::GetElementPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1CreateInBounds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  llvm::Twine *arg3 = 0 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::GetElementPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::CreateInBounds(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::GetElementPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1CreateInBounds_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::GetElementPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::CreateInBounds(arg1,arg2);
  *(llvm::GetElementPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1CreateInBounds_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::GetElementPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::CreateInBounds(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::GetElementPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  llvm::SequentialType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (llvm::SequentialType *)((llvm::GetElementPtrInst const *)arg1)->getType();
  *(llvm::SequentialType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1getAddressSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (unsigned int)((llvm::GetElementPtrInst const *)arg1)->getAddressSpace();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1getIndexedType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Type *)llvm::GetElementPtrInst::getIndexedType(arg1,arg2);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1getIndexedType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Constant * > > arg2 ;
  ArrayRef< llvm::Constant * > *argp2 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Constant * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Constant * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Type *)llvm::GetElementPtrInst::getIndexedType(arg1,arg2);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1getIndexedType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  ArrayRef< uint64_t > arg2 ;
  ArrayRef< uint64_t > *argp2 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  argp2 = *(ArrayRef< uint64_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< uint64_t >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Type *)llvm::GetElementPtrInst::getIndexedType(arg1,arg2);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1idx_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  llvm::User::op_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (llvm::User::op_iterator)(arg1)->idx_begin();
  *(llvm::User::op_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1idx_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  llvm::User::op_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (llvm::User::op_iterator)(arg1)->idx_end();
  *(llvm::User::op_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1getPointerOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getPointerOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1getPointerOperandIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::GetElementPtrInst::getPointerOperandIndex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1getPointerOperandType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (llvm::Type *)((llvm::GetElementPtrInst const *)arg1)->getPointerOperandType();
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1getPointerAddressSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (unsigned int)((llvm::GetElementPtrInst const *)arg1)->getPointerAddressSpace();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1getGEPReturnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Type *)llvm::GetElementPtrInst::getGEPReturnType(arg1,arg2);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1getNumIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (unsigned int)((llvm::GetElementPtrInst const *)arg1)->getNumIndices();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1hasIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (bool)((llvm::GetElementPtrInst const *)arg1)->hasIndices();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1hasAllZeroIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (bool)((llvm::GetElementPtrInst const *)arg1)->hasAllZeroIndices();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1hasAllConstantIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (bool)((llvm::GetElementPtrInst const *)arg1)->hasAllConstantIndices();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1setIsInBounds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsInBounds(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1setIsInBounds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  (arg1)->setIsInBounds();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1isInBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  result = (bool)((llvm::GetElementPtrInst const *)arg1)->isInBounds();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1accumulateConstantOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  llvm::DataLayout *arg2 = 0 ;
  llvm::APInt *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  arg2 = *(llvm::DataLayout **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::DataLayout const & reference is null");
    return 0;
  } 
  arg3 = *(llvm::APInt **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt & reference is null");
    return 0;
  } 
  result = (bool)((llvm::GetElementPtrInst const *)arg1)->accumulateConstantOffset((llvm::DataLayout const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::GetElementPtrInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::GetElementPtrInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1GetElementPtrInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::GetElementPtrInst *arg1 = (llvm::GetElementPtrInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::GetElementPtrInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ICmpInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  Predicate arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Twine *arg5 = 0 ;
  Predicate *argp2 ;
  llvm::ICmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  argp2 = *(Predicate **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  arg5 = *(llvm::Twine **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::ICmpInst *)new llvm::ICmpInst(arg1,arg2,arg3,arg4,(llvm::Twine const &)*arg5);
  *(llvm::ICmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ICmpInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  Predicate arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  Predicate *argp2 ;
  llvm::ICmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  argp2 = *(Predicate **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  result = (llvm::ICmpInst *)new llvm::ICmpInst(arg1,arg2,arg3,arg4);
  *(llvm::ICmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ICmpInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = 0 ;
  Predicate arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Twine *arg5 = 0 ;
  Predicate *argp2 ;
  llvm::ICmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::BasicBlock **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::BasicBlock & reference is null");
    return 0;
  } 
  argp2 = *(Predicate **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  arg5 = *(llvm::Twine **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::ICmpInst *)new llvm::ICmpInst(*arg1,arg2,arg3,arg4,(llvm::Twine const &)*arg5);
  *(llvm::ICmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ICmpInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = 0 ;
  Predicate arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  Predicate *argp2 ;
  llvm::ICmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::BasicBlock **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::BasicBlock & reference is null");
    return 0;
  } 
  argp2 = *(Predicate **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  result = (llvm::ICmpInst *)new llvm::ICmpInst(*arg1,arg2,arg3,arg4);
  *(llvm::ICmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ICmpInst_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  Predicate arg1 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Twine *arg4 = 0 ;
  Predicate *argp1 ;
  llvm::ICmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(Predicate **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::ICmpInst *)new llvm::ICmpInst(arg1,arg2,arg3,(llvm::Twine const &)*arg4);
  *(llvm::ICmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ICmpInst_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Predicate arg1 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  Predicate *argp1 ;
  llvm::ICmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(Predicate **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  result = (llvm::ICmpInst *)new llvm::ICmpInst(arg1,arg2,arg3);
  *(llvm::ICmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1getSignedPredicate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ICmpInst *arg1 = (llvm::ICmpInst *) 0 ;
  Predicate result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ICmpInst **)&jarg1; 
  result = ((llvm::ICmpInst const *)arg1)->getSignedPredicate();
  *(Predicate **)&jresult = new Predicate((const Predicate &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1getSignedPredicate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Predicate arg1 ;
  Predicate *argp1 ;
  Predicate result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(Predicate **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg1 = *argp1; 
  result = llvm::ICmpInst::getSignedPredicate(arg1);
  *(Predicate **)&jresult = new Predicate((const Predicate &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1getUnsignedPredicate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ICmpInst *arg1 = (llvm::ICmpInst *) 0 ;
  Predicate result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ICmpInst **)&jarg1; 
  result = ((llvm::ICmpInst const *)arg1)->getUnsignedPredicate();
  *(Predicate **)&jresult = new Predicate((const Predicate &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1getUnsignedPredicate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Predicate arg1 ;
  Predicate *argp1 ;
  Predicate result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(Predicate **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg1 = *argp1; 
  result = llvm::ICmpInst::getUnsignedPredicate(arg1);
  *(Predicate **)&jresult = new Predicate((const Predicate &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1isEquality_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  Predicate arg1 ;
  Predicate *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(Predicate **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)llvm::ICmpInst::isEquality(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1isEquality_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ICmpInst *arg1 = (llvm::ICmpInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ICmpInst **)&jarg1; 
  result = (bool)((llvm::ICmpInst const *)arg1)->isEquality();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1isCommutative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ICmpInst *arg1 = (llvm::ICmpInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ICmpInst **)&jarg1; 
  result = (bool)((llvm::ICmpInst const *)arg1)->isCommutative();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1isRelational_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ICmpInst *arg1 = (llvm::ICmpInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ICmpInst **)&jarg1; 
  result = (bool)((llvm::ICmpInst const *)arg1)->isRelational();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1isRelational_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  Predicate arg1 ;
  Predicate *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(Predicate **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)llvm::ICmpInst::isRelational(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1makeConstantRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Predicate arg1 ;
  llvm::APInt *arg2 = 0 ;
  Predicate *argp1 ;
  llvm::ConstantRange result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(Predicate **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(llvm::APInt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::APInt const & reference is null");
    return 0;
  } 
  result = llvm::ICmpInst::makeConstantRange(arg1,(llvm::APInt const &)*arg2);
  *(llvm::ConstantRange **)&jresult = new llvm::ConstantRange((const llvm::ConstantRange &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1swapOperands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::ICmpInst *arg1 = (llvm::ICmpInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ICmpInst **)&jarg1; 
  (arg1)->swapOperands();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::ICmpInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ICmpInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ICmpInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ICmpInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ICmpInst *arg1 = (llvm::ICmpInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ICmpInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FCmpInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  Predicate arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Twine *arg5 = 0 ;
  Predicate *argp2 ;
  llvm::FCmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  argp2 = *(Predicate **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  arg5 = *(llvm::Twine **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::FCmpInst *)new llvm::FCmpInst(arg1,arg2,arg3,arg4,(llvm::Twine const &)*arg5);
  *(llvm::FCmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FCmpInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  Predicate arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  Predicate *argp2 ;
  llvm::FCmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  argp2 = *(Predicate **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  result = (llvm::FCmpInst *)new llvm::FCmpInst(arg1,arg2,arg3,arg4);
  *(llvm::FCmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FCmpInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = 0 ;
  Predicate arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Twine *arg5 = 0 ;
  Predicate *argp2 ;
  llvm::FCmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::BasicBlock **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::BasicBlock & reference is null");
    return 0;
  } 
  argp2 = *(Predicate **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  arg5 = *(llvm::Twine **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::FCmpInst *)new llvm::FCmpInst(*arg1,arg2,arg3,arg4,(llvm::Twine const &)*arg5);
  *(llvm::FCmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FCmpInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = 0 ;
  Predicate arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  Predicate *argp2 ;
  llvm::FCmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::BasicBlock **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::BasicBlock & reference is null");
    return 0;
  } 
  argp2 = *(Predicate **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  result = (llvm::FCmpInst *)new llvm::FCmpInst(*arg1,arg2,arg3,arg4);
  *(llvm::FCmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FCmpInst_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  Predicate arg1 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Twine *arg4 = 0 ;
  Predicate *argp1 ;
  llvm::FCmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(Predicate **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::FCmpInst *)new llvm::FCmpInst(arg1,arg2,arg3,(llvm::Twine const &)*arg4);
  *(llvm::FCmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FCmpInst_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Predicate arg1 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  Predicate *argp1 ;
  llvm::FCmpInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(Predicate **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Predicate");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  result = (llvm::FCmpInst *)new llvm::FCmpInst(arg1,arg2,arg3);
  *(llvm::FCmpInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FCmpInst_1isEquality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::FCmpInst *arg1 = (llvm::FCmpInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::FCmpInst **)&jarg1; 
  result = (bool)((llvm::FCmpInst const *)arg1)->isEquality();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FCmpInst_1isCommutative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::FCmpInst *arg1 = (llvm::FCmpInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::FCmpInst **)&jarg1; 
  result = (bool)((llvm::FCmpInst const *)arg1)->isCommutative();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FCmpInst_1isRelational(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::FCmpInst *arg1 = (llvm::FCmpInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::FCmpInst **)&jarg1; 
  result = (bool)((llvm::FCmpInst const *)arg1)->isRelational();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FCmpInst_1swapOperands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::FCmpInst *arg1 = (llvm::FCmpInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::FCmpInst **)&jarg1; 
  (arg1)->swapOperands();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FCmpInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::FCmpInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FCmpInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::FCmpInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1FCmpInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::FCmpInst *arg1 = (llvm::FCmpInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::FCmpInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::CallInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::CallInst *)llvm::CallInst::Create(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::CallInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  llvm::Twine *arg3 = 0 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::CallInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::CallInst *)llvm::CallInst::Create(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::CallInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::CallInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::CallInst *)llvm::CallInst::Create(arg1,arg2);
  *(llvm::CallInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  ArrayRef< llvm::Value * > *argp2 ;
  llvm::CallInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< llvm::Value * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::CallInst *)llvm::CallInst::Create(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::CallInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1Create_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::Instruction *arg3 = (llvm::Instruction *) 0 ;
  llvm::CallInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = *(llvm::Instruction **)&jarg3; 
  result = (llvm::CallInst *)llvm::CallInst::Create(arg1,(llvm::Twine const &)*arg2,arg3);
  *(llvm::CallInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1Create_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::CallInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::CallInst *)llvm::CallInst::Create(arg1,(llvm::Twine const &)*arg2);
  *(llvm::CallInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1Create_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::CallInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::CallInst *)llvm::CallInst::Create(arg1);
  *(llvm::CallInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1Create_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  llvm::CallInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  result = (llvm::CallInst *)llvm::CallInst::Create(arg1,(llvm::Twine const &)*arg2,arg3);
  *(llvm::CallInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1CreateMalloc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Value *arg5 = (llvm::Value *) 0 ;
  llvm::Function *arg6 = (llvm::Function *) 0 ;
  llvm::Twine *arg7 = 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Type **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  arg5 = *(llvm::Value **)&jarg5; 
  arg6 = *(llvm::Function **)&jarg6; 
  arg7 = *(llvm::Twine **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::Instruction *)llvm::CallInst::CreateMalloc(arg1,arg2,arg3,arg4,arg5,arg6,(llvm::Twine const &)*arg7);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1CreateMalloc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Value *arg5 = (llvm::Value *) 0 ;
  llvm::Function *arg6 = (llvm::Function *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Type **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  arg5 = *(llvm::Value **)&jarg5; 
  arg6 = *(llvm::Function **)&jarg6; 
  result = (llvm::Instruction *)llvm::CallInst::CreateMalloc(arg1,arg2,arg3,arg4,arg5,arg6);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1CreateMalloc_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Value *arg5 = (llvm::Value *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Type **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  arg5 = *(llvm::Value **)&jarg5; 
  result = (llvm::Instruction *)llvm::CallInst::CreateMalloc(arg1,arg2,arg3,arg4,arg5);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1CreateMalloc_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Type **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  result = (llvm::Instruction *)llvm::CallInst::CreateMalloc(arg1,arg2,arg3,arg4);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1CreateMalloc_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Value *arg5 = (llvm::Value *) 0 ;
  llvm::Function *arg6 = (llvm::Function *) 0 ;
  llvm::Twine *arg7 = 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Type **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  arg5 = *(llvm::Value **)&jarg5; 
  arg6 = *(llvm::Function **)&jarg6; 
  arg7 = *(llvm::Twine **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::Instruction *)llvm::CallInst::CreateMalloc(arg1,arg2,arg3,arg4,arg5,arg6,(llvm::Twine const &)*arg7);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1CreateMalloc_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Value *arg5 = (llvm::Value *) 0 ;
  llvm::Function *arg6 = (llvm::Function *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Type **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  arg5 = *(llvm::Value **)&jarg5; 
  arg6 = *(llvm::Function **)&jarg6; 
  result = (llvm::Instruction *)llvm::CallInst::CreateMalloc(arg1,arg2,arg3,arg4,arg5,arg6);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1CreateMalloc_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Value *arg5 = (llvm::Value *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Type **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  arg5 = *(llvm::Value **)&jarg5; 
  result = (llvm::Instruction *)llvm::CallInst::CreateMalloc(arg1,arg2,arg3,arg4,arg5);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1CreateMalloc_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Type **)&jarg3; 
  arg4 = *(llvm::Value **)&jarg4; 
  result = (llvm::Instruction *)llvm::CallInst::CreateMalloc(arg1,arg2,arg3,arg4);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1CreateFree_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  result = (llvm::Instruction *)llvm::CallInst::CreateFree(arg1,arg2);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1CreateFree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (llvm::Instruction *)llvm::CallInst::CreateFree(arg1,arg2);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1CallInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::CallInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1isTailCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (bool)((llvm::CallInst const *)arg1)->isTailCall();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setTailCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTailCall(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setTailCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  (arg1)->setTailCall();
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1getNumArgOperands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (unsigned int)((llvm::CallInst const *)arg1)->getNumArgOperands();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1getArgOperand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  unsigned int arg2 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Value *)((llvm::CallInst const *)arg1)->getArgOperand(arg2);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setArgOperand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  unsigned int arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  (arg1)->setArgOperand(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1getCallingConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  CallingConv::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = ((llvm::CallInst const *)arg1)->getCallingConv();
  *(CallingConv::ID **)&jresult = new CallingConv::ID((const CallingConv::ID &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setCallingConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  CallingConv::ID arg2 ;
  CallingConv::ID *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  argp2 = *(CallingConv::ID **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallingConv::ID");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setCallingConv(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1getAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  AttributeSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (AttributeSet *) &((llvm::CallInst const *)arg1)->getAttributes();
  *(AttributeSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  AttributeSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  arg2 = *(AttributeSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AttributeSet const & reference is null");
    return ;
  } 
  (arg1)->setAttributes((AttributeSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1addAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  unsigned int arg2 ;
  Attribute::AttrKind arg3 ;
  Attribute::AttrKind *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(Attribute::AttrKind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Attribute::AttrKind");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1removeAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  unsigned int arg2 ;
  Attribute arg3 ;
  Attribute *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(Attribute **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Attribute");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->removeAttribute(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1hasFnAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  Attribute::AttrKind arg2 ;
  Attribute::AttrKind *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  argp2 = *(Attribute::AttrKind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Attribute::AttrKind");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::CallInst const *)arg1)->hasFnAttr(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1paramHasAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  unsigned int arg2 ;
  Attribute::AttrKind arg3 ;
  Attribute::AttrKind *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(Attribute::AttrKind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Attribute::AttrKind");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((llvm::CallInst const *)arg1)->paramHasAttr(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1getParamAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)((llvm::CallInst const *)arg1)->getParamAlignment(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1isNoInline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (bool)((llvm::CallInst const *)arg1)->isNoInline();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setIsNoInline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  (arg1)->setIsNoInline();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1canReturnTwice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (bool)((llvm::CallInst const *)arg1)->canReturnTwice();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setCanReturnTwice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  (arg1)->setCanReturnTwice();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1doesNotAccessMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (bool)((llvm::CallInst const *)arg1)->doesNotAccessMemory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setDoesNotAccessMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  (arg1)->setDoesNotAccessMemory();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1onlyReadsMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (bool)((llvm::CallInst const *)arg1)->onlyReadsMemory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setOnlyReadsMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  (arg1)->setOnlyReadsMemory();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1doesNotReturn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (bool)((llvm::CallInst const *)arg1)->doesNotReturn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setDoesNotReturn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  (arg1)->setDoesNotReturn();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1doesNotThrow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (bool)((llvm::CallInst const *)arg1)->doesNotThrow();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setDoesNotThrow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  (arg1)->setDoesNotThrow();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1cannotDuplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (bool)((llvm::CallInst const *)arg1)->cannotDuplicate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setCannotDuplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  (arg1)->setCannotDuplicate();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1hasStructRetAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (bool)((llvm::CallInst const *)arg1)->hasStructRetAttr();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1hasByValArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (bool)((llvm::CallInst const *)arg1)->hasByValArgument();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1getCalledFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  llvm::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (llvm::Function *)((llvm::CallInst const *)arg1)->getCalledFunction();
  *(llvm::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1getCalledValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (llvm::Value *)((llvm::CallInst const *)arg1)->getCalledValue();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1setCalledFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (arg1)->setCalledFunction(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1isInlineAsm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::CallInst *arg1 = (llvm::CallInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::CallInst **)&jarg1; 
  result = (bool)((llvm::CallInst const *)arg1)->isInlineAsm();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::CallInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::CallInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Twine *arg4 = 0 ;
  llvm::Instruction *arg5 = (llvm::Instruction *) 0 ;
  llvm::SelectInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::Instruction **)&jarg5; 
  result = (llvm::SelectInst *)llvm::SelectInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::SelectInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Twine *arg4 = 0 ;
  llvm::SelectInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::SelectInst *)llvm::SelectInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4);
  *(llvm::SelectInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::SelectInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  result = (llvm::SelectInst *)llvm::SelectInst::Create(arg1,arg2,arg3);
  *(llvm::SelectInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Twine *arg4 = 0 ;
  llvm::BasicBlock *arg5 = (llvm::BasicBlock *) 0 ;
  llvm::SelectInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::BasicBlock **)&jarg5; 
  result = (llvm::SelectInst *)llvm::SelectInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::SelectInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1getCondition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::SelectInst *arg1 = (llvm::SelectInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SelectInst **)&jarg1; 
  result = (llvm::Value *)((llvm::SelectInst const *)arg1)->getCondition();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1getTrueValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::SelectInst *arg1 = (llvm::SelectInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SelectInst **)&jarg1; 
  result = (llvm::Value *)((llvm::SelectInst const *)arg1)->getTrueValue();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1getFalseValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::SelectInst *arg1 = (llvm::SelectInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SelectInst **)&jarg1; 
  result = (llvm::Value *)((llvm::SelectInst const *)arg1)->getFalseValue();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1areInvalidOperands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jstring jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  result = (char *)llvm::SelectInst::areInvalidOperands(arg1,arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1getOpcode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::SelectInst *arg1 = (llvm::SelectInst *) 0 ;
  llvm::Instruction::OtherOps result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SelectInst **)&jarg1; 
  result = (llvm::Instruction::OtherOps)((llvm::SelectInst const *)arg1)->getOpcode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::SelectInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::SelectInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1SelectInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::SelectInst *arg1 = (llvm::SelectInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::SelectInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1VAArgInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::VAArgInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::VAArgInst *)new llvm::VAArgInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::VAArgInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1VAArgInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::VAArgInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::VAArgInst *)new llvm::VAArgInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::VAArgInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1VAArgInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::VAArgInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::VAArgInst *)new llvm::VAArgInst(arg1,arg2);
  *(llvm::VAArgInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1VAArgInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::VAArgInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::VAArgInst *)new llvm::VAArgInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::VAArgInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_VAArgInst_1getPointerOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::VAArgInst *arg1 = (llvm::VAArgInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::VAArgInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getPointerOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_VAArgInst_1getPointerOperandIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::VAArgInst::getPointerOperandIndex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_VAArgInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::VAArgInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_VAArgInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::VAArgInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1VAArgInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::VAArgInst *arg1 = (llvm::VAArgInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::VAArgInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractElementInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::ExtractElementInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::ExtractElementInst *)llvm::ExtractElementInst::Create(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::ExtractElementInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractElementInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::ExtractElementInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::ExtractElementInst *)llvm::ExtractElementInst::Create(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::ExtractElementInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractElementInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::ExtractElementInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  result = (llvm::ExtractElementInst *)llvm::ExtractElementInst::Create(arg1,arg2);
  *(llvm::ExtractElementInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractElementInst_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::ExtractElementInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::ExtractElementInst *)llvm::ExtractElementInst::Create(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::ExtractElementInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractElementInst_1isValidOperands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  result = (bool)llvm::ExtractElementInst::isValidOperands((llvm::Value const *)arg1,(llvm::Value const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractElementInst_1getVectorOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ExtractElementInst *arg1 = (llvm::ExtractElementInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ExtractElementInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getVectorOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractElementInst_1getIndexOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ExtractElementInst *arg1 = (llvm::ExtractElementInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ExtractElementInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getIndexOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractElementInst_1getVectorOperandType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ExtractElementInst *arg1 = (llvm::ExtractElementInst *) 0 ;
  llvm::VectorType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ExtractElementInst **)&jarg1; 
  result = (llvm::VectorType *)((llvm::ExtractElementInst const *)arg1)->getVectorOperandType();
  *(llvm::VectorType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractElementInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::ExtractElementInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractElementInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ExtractElementInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ExtractElementInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ExtractElementInst *arg1 = (llvm::ExtractElementInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ExtractElementInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertElementInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Twine *arg4 = 0 ;
  llvm::Instruction *arg5 = (llvm::Instruction *) 0 ;
  llvm::InsertElementInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::Instruction **)&jarg5; 
  result = (llvm::InsertElementInst *)llvm::InsertElementInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::InsertElementInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertElementInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Twine *arg4 = 0 ;
  llvm::InsertElementInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::InsertElementInst *)llvm::InsertElementInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4);
  *(llvm::InsertElementInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertElementInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::InsertElementInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  result = (llvm::InsertElementInst *)llvm::InsertElementInst::Create(arg1,arg2,arg3);
  *(llvm::InsertElementInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertElementInst_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Twine *arg4 = 0 ;
  llvm::BasicBlock *arg5 = (llvm::BasicBlock *) 0 ;
  llvm::InsertElementInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::BasicBlock **)&jarg5; 
  result = (llvm::InsertElementInst *)llvm::InsertElementInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::InsertElementInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertElementInst_1isValidOperands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  result = (bool)llvm::InsertElementInst::isValidOperands((llvm::Value const *)arg1,(llvm::Value const *)arg2,(llvm::Value const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertElementInst_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InsertElementInst *arg1 = (llvm::InsertElementInst *) 0 ;
  llvm::VectorType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InsertElementInst **)&jarg1; 
  result = (llvm::VectorType *)((llvm::InsertElementInst const *)arg1)->getType();
  *(llvm::VectorType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertElementInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::InsertElementInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertElementInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::InsertElementInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1InsertElementInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::InsertElementInst *arg1 = (llvm::InsertElementInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::InsertElementInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ShuffleVectorInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Twine *arg4 = 0 ;
  llvm::Instruction *arg5 = (llvm::Instruction *) 0 ;
  llvm::ShuffleVectorInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::Instruction **)&jarg5; 
  result = (llvm::ShuffleVectorInst *)new llvm::ShuffleVectorInst(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::ShuffleVectorInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ShuffleVectorInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Twine *arg4 = 0 ;
  llvm::ShuffleVectorInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::ShuffleVectorInst *)new llvm::ShuffleVectorInst(arg1,arg2,arg3,(llvm::Twine const &)*arg4);
  *(llvm::ShuffleVectorInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ShuffleVectorInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::ShuffleVectorInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  result = (llvm::ShuffleVectorInst *)new llvm::ShuffleVectorInst(arg1,arg2,arg3);
  *(llvm::ShuffleVectorInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ShuffleVectorInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Twine *arg4 = 0 ;
  llvm::BasicBlock *arg5 = (llvm::BasicBlock *) 0 ;
  llvm::ShuffleVectorInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::BasicBlock **)&jarg5; 
  result = (llvm::ShuffleVectorInst *)new llvm::ShuffleVectorInst(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::ShuffleVectorInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ShuffleVectorInst_1isValidOperands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  result = (bool)llvm::ShuffleVectorInst::isValidOperands((llvm::Value const *)arg1,(llvm::Value const *)arg2,(llvm::Value const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ShuffleVectorInst_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ShuffleVectorInst *arg1 = (llvm::ShuffleVectorInst *) 0 ;
  llvm::VectorType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ShuffleVectorInst **)&jarg1; 
  result = (llvm::VectorType *)((llvm::ShuffleVectorInst const *)arg1)->getType();
  *(llvm::VectorType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ShuffleVectorInst_1getMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ShuffleVectorInst *arg1 = (llvm::ShuffleVectorInst *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ShuffleVectorInst **)&jarg1; 
  result = (llvm::Constant *)((llvm::ShuffleVectorInst const *)arg1)->getMask();
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ShuffleVectorInst_1getMaskValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)llvm::ShuffleVectorInst::getMaskValue(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ShuffleVectorInst_1getMaskValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  llvm::ShuffleVectorInst *arg1 = (llvm::ShuffleVectorInst *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ShuffleVectorInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)((llvm::ShuffleVectorInst const *)arg1)->getMaskValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ShuffleVectorInst_1getShuffleMask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Constant *arg1 = (llvm::Constant *) 0 ;
  llvm::SmallVectorImpl< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Constant **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< int > & reference is null");
    return ;
  } 
  llvm::ShuffleVectorInst::getShuffleMask(arg1,*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ShuffleVectorInst_1getShuffleMask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::ShuffleVectorInst *arg1 = (llvm::ShuffleVectorInst *) 0 ;
  llvm::SmallVectorImpl< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ShuffleVectorInst **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< int > & reference is null");
    return ;
  } 
  ((llvm::ShuffleVectorInst const *)arg1)->getShuffleMask(*arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ShuffleVectorInst_1getShuffleMask_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ShuffleVectorInst *arg1 = (llvm::ShuffleVectorInst *) 0 ;
  SmallVector< int,16 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ShuffleVectorInst **)&jarg1; 
  result = ((llvm::ShuffleVectorInst const *)arg1)->getShuffleMask();
  *(SmallVector< int,16 > **)&jresult = new SmallVector< int,16 >((const SmallVector< int,16 > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ShuffleVectorInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::ShuffleVectorInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ShuffleVectorInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ShuffleVectorInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ShuffleVectorInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ShuffleVectorInst *arg1 = (llvm::ShuffleVectorInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ShuffleVectorInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  ArrayRef< unsigned int > arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  ArrayRef< unsigned int > *argp2 ;
  llvm::ExtractValueInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< unsigned int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< unsigned int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::ExtractValueInst *)llvm::ExtractValueInst::Create(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::ExtractValueInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  ArrayRef< unsigned int > arg2 ;
  llvm::Twine *arg3 = 0 ;
  ArrayRef< unsigned int > *argp2 ;
  llvm::ExtractValueInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< unsigned int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< unsigned int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::ExtractValueInst *)llvm::ExtractValueInst::Create(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::ExtractValueInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  ArrayRef< unsigned int > arg2 ;
  ArrayRef< unsigned int > *argp2 ;
  llvm::ExtractValueInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< unsigned int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< unsigned int >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::ExtractValueInst *)llvm::ExtractValueInst::Create(arg1,arg2);
  *(llvm::ExtractValueInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  ArrayRef< unsigned int > arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  ArrayRef< unsigned int > *argp2 ;
  llvm::ExtractValueInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  argp2 = *(ArrayRef< unsigned int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< unsigned int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::ExtractValueInst *)llvm::ExtractValueInst::Create(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::ExtractValueInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1getIndexedType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  ArrayRef< unsigned int > arg2 ;
  ArrayRef< unsigned int > *argp2 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  argp2 = *(ArrayRef< unsigned int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< unsigned int >");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Type *)llvm::ExtractValueInst::getIndexedType(arg1,arg2);
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1idx_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ExtractValueInst *arg1 = (llvm::ExtractValueInst *) 0 ;
  llvm::ExtractValueInst::idx_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ExtractValueInst **)&jarg1; 
  result = (llvm::ExtractValueInst::idx_iterator)((llvm::ExtractValueInst const *)arg1)->idx_begin();
  *(llvm::ExtractValueInst::idx_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1idx_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ExtractValueInst *arg1 = (llvm::ExtractValueInst *) 0 ;
  llvm::ExtractValueInst::idx_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ExtractValueInst **)&jarg1; 
  result = (llvm::ExtractValueInst::idx_iterator)((llvm::ExtractValueInst const *)arg1)->idx_end();
  *(llvm::ExtractValueInst::idx_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1getAggregateOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ExtractValueInst *arg1 = (llvm::ExtractValueInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ExtractValueInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getAggregateOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1getAggregateOperandIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::ExtractValueInst::getAggregateOperandIndex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1getIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ExtractValueInst *arg1 = (llvm::ExtractValueInst *) 0 ;
  ArrayRef< unsigned int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ExtractValueInst **)&jarg1; 
  result = ((llvm::ExtractValueInst const *)arg1)->getIndices();
  *(ArrayRef< unsigned int > **)&jresult = new ArrayRef< unsigned int >((const ArrayRef< unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1getNumIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ExtractValueInst *arg1 = (llvm::ExtractValueInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ExtractValueInst **)&jarg1; 
  result = (unsigned int)((llvm::ExtractValueInst const *)arg1)->getNumIndices();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1hasIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::ExtractValueInst *arg1 = (llvm::ExtractValueInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ExtractValueInst **)&jarg1; 
  result = (bool)((llvm::ExtractValueInst const *)arg1)->hasIndices();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::ExtractValueInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractValueInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ExtractValueInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ExtractValueInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ExtractValueInst *arg1 = (llvm::ExtractValueInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ExtractValueInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  ArrayRef< unsigned int > arg3 ;
  llvm::Twine *arg4 = 0 ;
  llvm::Instruction *arg5 = (llvm::Instruction *) 0 ;
  ArrayRef< unsigned int > *argp3 ;
  llvm::InsertValueInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  argp3 = *(ArrayRef< unsigned int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< unsigned int >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::Instruction **)&jarg5; 
  result = (llvm::InsertValueInst *)llvm::InsertValueInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::InsertValueInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  ArrayRef< unsigned int > arg3 ;
  llvm::Twine *arg4 = 0 ;
  ArrayRef< unsigned int > *argp3 ;
  llvm::InsertValueInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  argp3 = *(ArrayRef< unsigned int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< unsigned int >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::InsertValueInst *)llvm::InsertValueInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4);
  *(llvm::InsertValueInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  ArrayRef< unsigned int > arg3 ;
  ArrayRef< unsigned int > *argp3 ;
  llvm::InsertValueInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  argp3 = *(ArrayRef< unsigned int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< unsigned int >");
    return 0;
  }
  arg3 = *argp3; 
  result = (llvm::InsertValueInst *)llvm::InsertValueInst::Create(arg1,arg2,arg3);
  *(llvm::InsertValueInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  ArrayRef< unsigned int > arg3 ;
  llvm::Twine *arg4 = 0 ;
  llvm::BasicBlock *arg5 = (llvm::BasicBlock *) 0 ;
  ArrayRef< unsigned int > *argp3 ;
  llvm::InsertValueInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  argp3 = *(ArrayRef< unsigned int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< unsigned int >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::BasicBlock **)&jarg5; 
  result = (llvm::InsertValueInst *)llvm::InsertValueInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::InsertValueInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1idx_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InsertValueInst *arg1 = (llvm::InsertValueInst *) 0 ;
  llvm::InsertValueInst::idx_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InsertValueInst **)&jarg1; 
  result = (llvm::InsertValueInst::idx_iterator)((llvm::InsertValueInst const *)arg1)->idx_begin();
  *(llvm::InsertValueInst::idx_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1idx_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InsertValueInst *arg1 = (llvm::InsertValueInst *) 0 ;
  llvm::InsertValueInst::idx_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InsertValueInst **)&jarg1; 
  result = (llvm::InsertValueInst::idx_iterator)((llvm::InsertValueInst const *)arg1)->idx_end();
  *(llvm::InsertValueInst::idx_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1getAggregateOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InsertValueInst *arg1 = (llvm::InsertValueInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InsertValueInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getAggregateOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1getAggregateOperandIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::InsertValueInst::getAggregateOperandIndex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1getInsertedValueOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InsertValueInst *arg1 = (llvm::InsertValueInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InsertValueInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getInsertedValueOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1getInsertedValueOperandIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::InsertValueInst::getInsertedValueOperandIndex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1getIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InsertValueInst *arg1 = (llvm::InsertValueInst *) 0 ;
  ArrayRef< unsigned int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InsertValueInst **)&jarg1; 
  result = ((llvm::InsertValueInst const *)arg1)->getIndices();
  *(ArrayRef< unsigned int > **)&jresult = new ArrayRef< unsigned int >((const ArrayRef< unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1getNumIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InsertValueInst *arg1 = (llvm::InsertValueInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InsertValueInst **)&jarg1; 
  result = (unsigned int)((llvm::InsertValueInst const *)arg1)->getNumIndices();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1hasIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::InsertValueInst *arg1 = (llvm::InsertValueInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InsertValueInst **)&jarg1; 
  result = (bool)((llvm::InsertValueInst const *)arg1)->hasIndices();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::InsertValueInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::InsertValueInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1InsertValueInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::InsertValueInst *arg1 = (llvm::InsertValueInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::InsertValueInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::PHINode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::PHINode *)llvm::PHINode::Create(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::PHINode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::PHINode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::PHINode *)llvm::PHINode::Create(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::PHINode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int arg2 ;
  llvm::PHINode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::PHINode *)llvm::PHINode::Create(arg1,arg2);
  *(llvm::PHINode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  unsigned int arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::PHINode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::PHINode *)llvm::PHINode::Create(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::PHINode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1PHINode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::PHINode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1block_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  llvm::PHINode::block_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  result = (llvm::PHINode::block_iterator)(arg1)->block_begin();
  *(llvm::PHINode::block_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1block_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  llvm::PHINode::block_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  result = (llvm::PHINode::block_iterator)(arg1)->block_end();
  *(llvm::PHINode::block_iterator *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1getNumIncomingValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  result = (unsigned int)((llvm::PHINode const *)arg1)->getNumIncomingValues();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1getIncomingValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  unsigned int arg2 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Value *)((llvm::PHINode const *)arg1)->getIncomingValue(arg2);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1setIncomingValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  unsigned int arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  (arg1)->setIncomingValue(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1getOperandNumForIncomingValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int)llvm::PHINode::getOperandNumForIncomingValue(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1getIncomingValueNumForOperand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int)llvm::PHINode::getIncomingValueNumForOperand(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1getIncomingBlock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::BasicBlock *)((llvm::PHINode const *)arg1)->getIncomingBlock(arg2);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1getIncomingBlock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  Use *arg2 = 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = *(Use **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Use const & reference is null");
    return 0;
  } 
  result = (llvm::BasicBlock *)((llvm::PHINode const *)arg1)->getIncomingBlock((Use const &)*arg2);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1setIncomingBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  (arg1)->setIncomingBlock(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1addIncoming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  (arg1)->addIncoming(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1removeIncomingValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Value *)(arg1)->removeIncomingValue(arg2,arg3);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1removeIncomingValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  unsigned int arg2 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Value *)(arg1)->removeIncomingValue(arg2);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1removeIncomingValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  bool arg3 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::Value *)(arg1)->removeIncomingValue((llvm::BasicBlock const *)arg2,arg3);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1removeIncomingValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (llvm::Value *)(arg1)->removeIncomingValue((llvm::BasicBlock const *)arg2);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1getBasicBlockIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (int)((llvm::PHINode const *)arg1)->getBasicBlockIndex((llvm::BasicBlock const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1getIncomingValueForBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (llvm::Value *)((llvm::PHINode const *)arg1)->getIncomingValueForBlock((llvm::BasicBlock const *)arg2);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1hasConstantValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::PHINode *arg1 = (llvm::PHINode *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::PHINode **)&jarg1; 
  result = (llvm::Value *)((llvm::PHINode const *)arg1)->hasConstantValue();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::PHINode::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::PHINode::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  unsigned int arg3 ;
  llvm::Twine *arg4 = 0 ;
  llvm::Instruction *arg5 = (llvm::Instruction *) 0 ;
  llvm::LandingPadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::Instruction **)&jarg5; 
  result = (llvm::LandingPadInst *)llvm::LandingPadInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::LandingPadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  unsigned int arg3 ;
  llvm::Twine *arg4 = 0 ;
  llvm::LandingPadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::LandingPadInst *)llvm::LandingPadInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4);
  *(llvm::LandingPadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  unsigned int arg3 ;
  llvm::LandingPadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (llvm::LandingPadInst *)llvm::LandingPadInst::Create(arg1,arg2,arg3);
  *(llvm::LandingPadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  llvm::Type *arg1 = (llvm::Type *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  unsigned int arg3 ;
  llvm::Twine *arg4 = 0 ;
  llvm::BasicBlock *arg5 = (llvm::BasicBlock *) 0 ;
  llvm::LandingPadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(llvm::Type **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(llvm::Twine **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg5 = *(llvm::BasicBlock **)&jarg5; 
  result = (llvm::LandingPadInst *)llvm::LandingPadInst::Create(arg1,arg2,arg3,(llvm::Twine const &)*arg4,arg5);
  *(llvm::LandingPadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1LandingPadInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::LandingPadInst *arg1 = (llvm::LandingPadInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::LandingPadInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1getPersonalityFn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LandingPadInst *arg1 = (llvm::LandingPadInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LandingPadInst **)&jarg1; 
  result = (llvm::Value *)((llvm::LandingPadInst const *)arg1)->getPersonalityFn();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1isCleanup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::LandingPadInst *arg1 = (llvm::LandingPadInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LandingPadInst **)&jarg1; 
  result = (bool)((llvm::LandingPadInst const *)arg1)->isCleanup();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1setCleanup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::LandingPadInst *arg1 = (llvm::LandingPadInst *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LandingPadInst **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setCleanup(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1addClause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::LandingPadInst *arg1 = (llvm::LandingPadInst *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::LandingPadInst **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (arg1)->addClause(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1getClause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LandingPadInst *arg1 = (llvm::LandingPadInst *) 0 ;
  unsigned int arg2 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LandingPadInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Value *)((llvm::LandingPadInst const *)arg1)->getClause(arg2);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1isCatch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::LandingPadInst *arg1 = (llvm::LandingPadInst *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LandingPadInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)((llvm::LandingPadInst const *)arg1)->isCatch(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1isFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::LandingPadInst *arg1 = (llvm::LandingPadInst *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LandingPadInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)((llvm::LandingPadInst const *)arg1)->isFilter(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1getNumClauses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LandingPadInst *arg1 = (llvm::LandingPadInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LandingPadInst **)&jarg1; 
  result = (unsigned int)((llvm::LandingPadInst const *)arg1)->getNumClauses();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1reserveClauses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::LandingPadInst *arg1 = (llvm::LandingPadInst *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LandingPadInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->reserveClauses(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::LandingPadInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::LandingPadInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ReturnInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Instruction *arg3 = (llvm::Instruction *) 0 ;
  llvm::ReturnInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Instruction **)&jarg3; 
  result = (llvm::ReturnInst *)llvm::ReturnInst::Create(*arg1,arg2,arg3);
  *(llvm::ReturnInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ReturnInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::ReturnInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = *(llvm::Value **)&jarg2; 
  result = (llvm::ReturnInst *)llvm::ReturnInst::Create(*arg1,arg2);
  *(llvm::ReturnInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ReturnInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::ReturnInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::ReturnInst *)llvm::ReturnInst::Create(*arg1);
  *(llvm::ReturnInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ReturnInst_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  llvm::ReturnInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  result = (llvm::ReturnInst *)llvm::ReturnInst::Create(*arg1,arg2,arg3);
  *(llvm::ReturnInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ReturnInst_1Create_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::ReturnInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (llvm::ReturnInst *)llvm::ReturnInst::Create(*arg1,arg2);
  *(llvm::ReturnInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ReturnInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ReturnInst *arg1 = (llvm::ReturnInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ReturnInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ReturnInst_1getReturnValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ReturnInst *arg1 = (llvm::ReturnInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ReturnInst **)&jarg1; 
  result = (llvm::Value *)((llvm::ReturnInst const *)arg1)->getReturnValue();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ReturnInst_1getNumSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ReturnInst *arg1 = (llvm::ReturnInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ReturnInst **)&jarg1; 
  result = (unsigned int)((llvm::ReturnInst const *)arg1)->getNumSuccessors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ReturnInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::ReturnInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ReturnInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ReturnInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  llvm::BranchInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  result = (llvm::BranchInst *)llvm::BranchInst::Create(arg1,arg2);
  *(llvm::BranchInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BranchInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::BranchInst *)llvm::BranchInst::Create(arg1);
  *(llvm::BranchInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::BranchInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::BranchInst *)llvm::BranchInst::Create(arg1,arg2,arg3,arg4);
  *(llvm::BranchInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::BranchInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  result = (llvm::BranchInst *)llvm::BranchInst::Create(arg1,arg2,arg3);
  *(llvm::BranchInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1Create_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::BranchInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (llvm::BranchInst *)llvm::BranchInst::Create(arg1,arg2);
  *(llvm::BranchInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1Create_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::BranchInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::BranchInst *)llvm::BranchInst::Create(arg1,arg2,arg3,arg4);
  *(llvm::BranchInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1isUnconditional(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::BranchInst *arg1 = (llvm::BranchInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BranchInst **)&jarg1; 
  result = (bool)((llvm::BranchInst const *)arg1)->isUnconditional();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1isConditional(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::BranchInst *arg1 = (llvm::BranchInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BranchInst **)&jarg1; 
  result = (bool)((llvm::BranchInst const *)arg1)->isConditional();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1getCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BranchInst *arg1 = (llvm::BranchInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BranchInst **)&jarg1; 
  result = (llvm::Value *)((llvm::BranchInst const *)arg1)->getCondition();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1setCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::BranchInst *arg1 = (llvm::BranchInst *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::BranchInst **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (arg1)->setCondition(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1getNumSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BranchInst *arg1 = (llvm::BranchInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BranchInst **)&jarg1; 
  result = (unsigned int)((llvm::BranchInst const *)arg1)->getNumSuccessors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1getSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::BranchInst *arg1 = (llvm::BranchInst *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BranchInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::BasicBlock *)((llvm::BranchInst const *)arg1)->getSuccessor(arg2);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1setSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::BranchInst *arg1 = (llvm::BranchInst *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::BranchInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  (arg1)->setSuccessor(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1swapSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::BranchInst *arg1 = (llvm::BranchInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BranchInst **)&jarg1; 
  (arg1)->swapSuccessors();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::BranchInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BranchInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::BranchInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1BranchInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::BranchInst *arg1 = (llvm::BranchInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::BranchInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1DefaultPseudoIndex_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::SwitchInst::DefaultPseudoIndex;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  unsigned int arg3 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::SwitchInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::SwitchInst *)llvm::SwitchInst::Create(arg1,arg2,arg3,arg4);
  *(llvm::SwitchInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  unsigned int arg3 ;
  llvm::SwitchInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (llvm::SwitchInst *)llvm::SwitchInst::Create(arg1,arg2,arg3);
  *(llvm::SwitchInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  unsigned int arg3 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::SwitchInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::SwitchInst *)llvm::SwitchInst::Create(arg1,arg2,arg3,arg4);
  *(llvm::SwitchInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1SwitchInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1getCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  result = (llvm::Value *)((llvm::SwitchInst const *)arg1)->getCondition();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1setCondition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (arg1)->setCondition(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1getDefaultDest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  result = (llvm::BasicBlock *)((llvm::SwitchInst const *)arg1)->getDefaultDest();
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1setDefaultDest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  (arg1)->setDefaultDest(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1getNumCases(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  result = (unsigned int)((llvm::SwitchInst const *)arg1)->getNumCases();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1case_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  SwigValueWrapper< llvm::SwitchInst::CaseIt > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  result = (arg1)->case_begin();
  *(llvm::SwitchInst::CaseIt **)&jresult = new llvm::SwitchInst::CaseIt((const llvm::SwitchInst::CaseIt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1case_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  SwigValueWrapper< llvm::SwitchInst::CaseIt > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  result = (arg1)->case_end();
  *(llvm::SwitchInst::CaseIt **)&jresult = new llvm::SwitchInst::CaseIt((const llvm::SwitchInst::CaseIt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1case_1default_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  SwigValueWrapper< llvm::SwitchInst::CaseIt > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  result = (arg1)->case_default();
  *(llvm::SwitchInst::CaseIt **)&jresult = new llvm::SwitchInst::CaseIt((const llvm::SwitchInst::CaseIt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1findCaseValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  llvm::ConstantInt *arg2 = (llvm::ConstantInt *) 0 ;
  SwigValueWrapper< llvm::SwitchInst::CaseIt > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  arg2 = *(llvm::ConstantInt **)&jarg2; 
  result = (arg1)->findCaseValue((llvm::ConstantInt const *)arg2);
  *(llvm::SwitchInst::CaseIt **)&jresult = new llvm::SwitchInst::CaseIt((const llvm::SwitchInst::CaseIt &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1findCaseDest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::ConstantInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (llvm::ConstantInt *)(arg1)->findCaseDest(arg2);
  *(llvm::ConstantInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1addCase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  llvm::ConstantInt *arg2 = (llvm::ConstantInt *) 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  arg2 = *(llvm::ConstantInt **)&jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  (arg1)->addCase(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1addCase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  IntegersSubset *arg2 = 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  arg2 = *(IntegersSubset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntegersSubset & reference is null");
    return ;
  } 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  (arg1)->addCase(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1removeCase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  llvm::SwitchInst::CaseIt *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  arg2 = *(llvm::SwitchInst::CaseIt **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SwitchInst::CaseIt & reference is null");
    return ;
  } 
  (arg1)->removeCase(*arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1getNumSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  result = (unsigned int)((llvm::SwitchInst const *)arg1)->getNumSuccessors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1getSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::BasicBlock *)((llvm::SwitchInst const *)arg1)->getSuccessor(arg2);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1setSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  (arg1)->setSuccessor(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  result = ((llvm::SwitchInst const *)arg1)->hash();
  *(uint16_t **)&jresult = new uint16_t((const uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1SwitchInst_1CaseIt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::SwitchInst *arg1 = (llvm::SwitchInst *) 0 ;
  unsigned int arg2 ;
  llvm::SwitchInst::CaseIt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SwitchInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::SwitchInst::CaseIt *)new llvm::SwitchInst::CaseIt(arg1,arg2);
  *(llvm::SwitchInst::CaseIt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1SwitchInst_1CaseIt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  llvm::SwitchInst::CaseIt::ParentTy *arg1 = 0 ;
  llvm::SwitchInst::CaseIt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::SwitchInst::CaseIt::ParentTy **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SwitchInst::CaseIt::ParentTy const & reference is null");
    return 0;
  } 
  result = (llvm::SwitchInst::CaseIt *)new llvm::SwitchInst::CaseIt((llvm::SwitchInst::CaseIt::ParentTy const &)*arg1);
  *(llvm::SwitchInst::CaseIt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1CaseIt_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::SwitchInst::CaseIt *arg1 = (llvm::SwitchInst::CaseIt *) 0 ;
  llvm::ConstantInt *arg2 = (llvm::ConstantInt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::SwitchInst::CaseIt **)&jarg1; 
  arg2 = *(llvm::ConstantInt **)&jarg2; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1CaseIt_1setValueEx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::SwitchInst::CaseIt *arg1 = (llvm::SwitchInst::CaseIt *) 0 ;
  IntegersSubset *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::SwitchInst::CaseIt **)&jarg1; 
  arg2 = *(IntegersSubset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntegersSubset & reference is null");
    return ;
  } 
  (arg1)->setValueEx(*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1CaseIt_1setSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::SwitchInst::CaseIt *arg1 = (llvm::SwitchInst::CaseIt *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::SwitchInst::CaseIt **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  (arg1)->setSuccessor(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1SwitchInst_1CaseIt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::SwitchInst::CaseIt *arg1 = (llvm::SwitchInst::CaseIt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::SwitchInst::CaseIt **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::SwitchInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SwitchInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::SwitchInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  unsigned int arg2 ;
  llvm::Instruction *arg3 = (llvm::Instruction *) 0 ;
  llvm::IndirectBrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::Instruction **)&jarg3; 
  result = (llvm::IndirectBrInst *)llvm::IndirectBrInst::Create(arg1,arg2,arg3);
  *(llvm::IndirectBrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  unsigned int arg2 ;
  llvm::IndirectBrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::IndirectBrInst *)llvm::IndirectBrInst::Create(arg1,arg2);
  *(llvm::IndirectBrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  llvm::IndirectBrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  result = (llvm::IndirectBrInst *)llvm::IndirectBrInst::Create(arg1,arg2,arg3);
  *(llvm::IndirectBrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1IndirectBrInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::IndirectBrInst *arg1 = (llvm::IndirectBrInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::IndirectBrInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1getAddress_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::IndirectBrInst *arg1 = (llvm::IndirectBrInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::IndirectBrInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getAddress();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1setAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::IndirectBrInst *arg1 = (llvm::IndirectBrInst *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::IndirectBrInst **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (arg1)->setAddress(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1getNumDestinations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::IndirectBrInst *arg1 = (llvm::IndirectBrInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::IndirectBrInst **)&jarg1; 
  result = (unsigned int)((llvm::IndirectBrInst const *)arg1)->getNumDestinations();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1getDestination_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::IndirectBrInst *arg1 = (llvm::IndirectBrInst *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::IndirectBrInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::BasicBlock *)(arg1)->getDestination(arg2);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1addDestination(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::IndirectBrInst *arg1 = (llvm::IndirectBrInst *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::IndirectBrInst **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  (arg1)->addDestination(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1removeDestination(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::IndirectBrInst *arg1 = (llvm::IndirectBrInst *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::IndirectBrInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->removeDestination(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1getNumSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::IndirectBrInst *arg1 = (llvm::IndirectBrInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::IndirectBrInst **)&jarg1; 
  result = (unsigned int)((llvm::IndirectBrInst const *)arg1)->getNumSuccessors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1getSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::IndirectBrInst *arg1 = (llvm::IndirectBrInst *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::IndirectBrInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::BasicBlock *)((llvm::IndirectBrInst const *)arg1)->getSuccessor(arg2);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1setSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::IndirectBrInst *arg1 = (llvm::IndirectBrInst *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::IndirectBrInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  (arg1)->setSuccessor(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::IndirectBrInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IndirectBrInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::IndirectBrInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg4 ;
  llvm::Twine *arg5 = 0 ;
  llvm::Instruction *arg6 = (llvm::Instruction *) 0 ;
  ArrayRef< llvm::Value * > *argp4 ;
  llvm::InvokeInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  argp4 = *(ArrayRef< llvm::Value * > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(llvm::Twine **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg6 = *(llvm::Instruction **)&jarg6; 
  result = (llvm::InvokeInst *)llvm::InvokeInst::Create(arg1,arg2,arg3,arg4,(llvm::Twine const &)*arg5,arg6);
  *(llvm::InvokeInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg4 ;
  llvm::Twine *arg5 = 0 ;
  ArrayRef< llvm::Value * > *argp4 ;
  llvm::InvokeInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  argp4 = *(ArrayRef< llvm::Value * > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(llvm::Twine **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::InvokeInst *)llvm::InvokeInst::Create(arg1,arg2,arg3,arg4,(llvm::Twine const &)*arg5);
  *(llvm::InvokeInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg4 ;
  ArrayRef< llvm::Value * > *argp4 ;
  llvm::InvokeInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  argp4 = *(ArrayRef< llvm::Value * > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg4 = *argp4; 
  result = (llvm::InvokeInst *)llvm::InvokeInst::Create(arg1,arg2,arg3,arg4);
  *(llvm::InvokeInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  SwigValueWrapper< ArrayRef< llvm::Value * > > arg4 ;
  llvm::Twine *arg5 = 0 ;
  llvm::BasicBlock *arg6 = (llvm::BasicBlock *) 0 ;
  ArrayRef< llvm::Value * > *argp4 ;
  llvm::InvokeInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  argp4 = *(ArrayRef< llvm::Value * > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArrayRef< llvm::Value * >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(llvm::Twine **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg6 = *(llvm::BasicBlock **)&jarg6; 
  result = (llvm::InvokeInst *)llvm::InvokeInst::Create(arg1,arg2,arg3,arg4,(llvm::Twine const &)*arg5,arg6);
  *(llvm::InvokeInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getNumArgOperands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (unsigned int)((llvm::InvokeInst const *)arg1)->getNumArgOperands();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getArgOperand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  unsigned int arg2 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::Value *)((llvm::InvokeInst const *)arg1)->getArgOperand(arg2);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setArgOperand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  unsigned int arg2 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  (arg1)->setArgOperand(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getCallingConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  CallingConv::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = ((llvm::InvokeInst const *)arg1)->getCallingConv();
  *(CallingConv::ID **)&jresult = new CallingConv::ID((const CallingConv::ID &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setCallingConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  CallingConv::ID arg2 ;
  CallingConv::ID *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  argp2 = *(CallingConv::ID **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallingConv::ID");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setCallingConv(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  AttributeSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (AttributeSet *) &((llvm::InvokeInst const *)arg1)->getAttributes();
  *(AttributeSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  AttributeSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = *(AttributeSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AttributeSet const & reference is null");
    return ;
  } 
  (arg1)->setAttributes((AttributeSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1addAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  unsigned int arg2 ;
  Attribute::AttrKind arg3 ;
  Attribute::AttrKind *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(Attribute::AttrKind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Attribute::AttrKind");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1removeAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  unsigned int arg2 ;
  Attribute arg3 ;
  Attribute *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(Attribute **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Attribute");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->removeAttribute(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1hasFnAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  Attribute::AttrKind arg2 ;
  Attribute::AttrKind *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  argp2 = *(Attribute::AttrKind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Attribute::AttrKind");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::InvokeInst const *)arg1)->hasFnAttr(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1paramHasAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  unsigned int arg2 ;
  Attribute::AttrKind arg3 ;
  Attribute::AttrKind *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(Attribute::AttrKind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Attribute::AttrKind");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((llvm::InvokeInst const *)arg1)->paramHasAttr(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getParamAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)((llvm::InvokeInst const *)arg1)->getParamAlignment(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1isNoInline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (bool)((llvm::InvokeInst const *)arg1)->isNoInline();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setIsNoInline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  (arg1)->setIsNoInline();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1doesNotAccessMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (bool)((llvm::InvokeInst const *)arg1)->doesNotAccessMemory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setDoesNotAccessMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  (arg1)->setDoesNotAccessMemory();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1onlyReadsMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (bool)((llvm::InvokeInst const *)arg1)->onlyReadsMemory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setOnlyReadsMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  (arg1)->setOnlyReadsMemory();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1doesNotReturn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (bool)((llvm::InvokeInst const *)arg1)->doesNotReturn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setDoesNotReturn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  (arg1)->setDoesNotReturn();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1doesNotThrow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (bool)((llvm::InvokeInst const *)arg1)->doesNotThrow();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setDoesNotThrow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  (arg1)->setDoesNotThrow();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1hasStructRetAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (bool)((llvm::InvokeInst const *)arg1)->hasStructRetAttr();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1hasByValArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (bool)((llvm::InvokeInst const *)arg1)->hasByValArgument();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getCalledFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  llvm::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (llvm::Function *)((llvm::InvokeInst const *)arg1)->getCalledFunction();
  *(llvm::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getCalledValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (llvm::Value *)((llvm::InvokeInst const *)arg1)->getCalledValue();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setCalledFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  (arg1)->setCalledFunction(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getNormalDest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (llvm::BasicBlock *)((llvm::InvokeInst const *)arg1)->getNormalDest();
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getUnwindDest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (llvm::BasicBlock *)((llvm::InvokeInst const *)arg1)->getUnwindDest();
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setNormalDest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  (arg1)->setNormalDest(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setUnwindDest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  (arg1)->setUnwindDest(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getLandingPadInst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  llvm::LandingPadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (llvm::LandingPadInst *)((llvm::InvokeInst const *)arg1)->getLandingPadInst();
  *(llvm::LandingPadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (llvm::BasicBlock *)((llvm::InvokeInst const *)arg1)->getSuccessor(arg2);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1setSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  unsigned int arg2 ;
  llvm::BasicBlock *arg3 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(llvm::BasicBlock **)&jarg3; 
  (arg1)->setSuccessor(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1getNumSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  result = (unsigned int)((llvm::InvokeInst const *)arg1)->getNumSuccessors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::InvokeInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InvokeInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::InvokeInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1InvokeInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::InvokeInst *arg1 = (llvm::InvokeInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::InvokeInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ResumeInst_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Instruction *arg2 = (llvm::Instruction *) 0 ;
  llvm::ResumeInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Instruction **)&jarg2; 
  result = (llvm::ResumeInst *)llvm::ResumeInst::Create(arg1,arg2);
  *(llvm::ResumeInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ResumeInst_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::ResumeInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::ResumeInst *)llvm::ResumeInst::Create(arg1);
  *(llvm::ResumeInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ResumeInst_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  llvm::ResumeInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  result = (llvm::ResumeInst *)llvm::ResumeInst::Create(arg1,arg2);
  *(llvm::ResumeInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ResumeInst_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ResumeInst *arg1 = (llvm::ResumeInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ResumeInst **)&jarg1; 
  result = (llvm::Value *)((llvm::ResumeInst const *)arg1)->getValue();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ResumeInst_1getNumSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::ResumeInst *arg1 = (llvm::ResumeInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::ResumeInst **)&jarg1; 
  result = (unsigned int)((llvm::ResumeInst const *)arg1)->getNumSuccessors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ResumeInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::ResumeInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ResumeInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ResumeInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ResumeInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ResumeInst *arg1 = (llvm::ResumeInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ResumeInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UnreachableInst_1getNumSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::UnreachableInst *arg1 = (llvm::UnreachableInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::UnreachableInst **)&jarg1; 
  result = (unsigned int)((llvm::UnreachableInst const *)arg1)->getNumSuccessors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UnreachableInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::UnreachableInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UnreachableInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::UnreachableInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1UnreachableInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::UnreachableInst *arg1 = (llvm::UnreachableInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::UnreachableInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1TruncInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::TruncInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::TruncInst *)new llvm::TruncInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::TruncInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1TruncInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::TruncInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::TruncInst *)new llvm::TruncInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::TruncInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1TruncInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::TruncInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::TruncInst *)new llvm::TruncInst(arg1,arg2);
  *(llvm::TruncInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1TruncInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::TruncInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::TruncInst *)new llvm::TruncInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::TruncInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_TruncInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::TruncInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_TruncInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::TruncInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1TruncInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::TruncInst *arg1 = (llvm::TruncInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::TruncInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ZExtInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::ZExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::ZExtInst *)new llvm::ZExtInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::ZExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ZExtInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::ZExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::ZExtInst *)new llvm::ZExtInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::ZExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ZExtInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::ZExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::ZExtInst *)new llvm::ZExtInst(arg1,arg2);
  *(llvm::ZExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1ZExtInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::ZExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::ZExtInst *)new llvm::ZExtInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::ZExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ZExtInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::ZExtInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ZExtInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::ZExtInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1ZExtInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::ZExtInst *arg1 = (llvm::ZExtInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::ZExtInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1SExtInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::SExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::SExtInst *)new llvm::SExtInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::SExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1SExtInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::SExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::SExtInst *)new llvm::SExtInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::SExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1SExtInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::SExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::SExtInst *)new llvm::SExtInst(arg1,arg2);
  *(llvm::SExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1SExtInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::SExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::SExtInst *)new llvm::SExtInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::SExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SExtInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::SExtInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SExtInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::SExtInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1SExtInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::SExtInst *arg1 = (llvm::SExtInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::SExtInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPTruncInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::FPTruncInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::FPTruncInst *)new llvm::FPTruncInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::FPTruncInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPTruncInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::FPTruncInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::FPTruncInst *)new llvm::FPTruncInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::FPTruncInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPTruncInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::FPTruncInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::FPTruncInst *)new llvm::FPTruncInst(arg1,arg2);
  *(llvm::FPTruncInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPTruncInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::FPTruncInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::FPTruncInst *)new llvm::FPTruncInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::FPTruncInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FPTruncInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::FPTruncInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FPTruncInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::FPTruncInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1FPTruncInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::FPTruncInst *arg1 = (llvm::FPTruncInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::FPTruncInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPExtInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::FPExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::FPExtInst *)new llvm::FPExtInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::FPExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPExtInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::FPExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::FPExtInst *)new llvm::FPExtInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::FPExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPExtInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::FPExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::FPExtInst *)new llvm::FPExtInst(arg1,arg2);
  *(llvm::FPExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPExtInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::FPExtInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::FPExtInst *)new llvm::FPExtInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::FPExtInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FPExtInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::FPExtInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FPExtInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::FPExtInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1FPExtInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::FPExtInst *arg1 = (llvm::FPExtInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::FPExtInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1UIToFPInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::UIToFPInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::UIToFPInst *)new llvm::UIToFPInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::UIToFPInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1UIToFPInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::UIToFPInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::UIToFPInst *)new llvm::UIToFPInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::UIToFPInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1UIToFPInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::UIToFPInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::UIToFPInst *)new llvm::UIToFPInst(arg1,arg2);
  *(llvm::UIToFPInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1UIToFPInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::UIToFPInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::UIToFPInst *)new llvm::UIToFPInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::UIToFPInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UIToFPInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::UIToFPInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UIToFPInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::UIToFPInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1UIToFPInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::UIToFPInst *arg1 = (llvm::UIToFPInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::UIToFPInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1SIToFPInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::SIToFPInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::SIToFPInst *)new llvm::SIToFPInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::SIToFPInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1SIToFPInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::SIToFPInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::SIToFPInst *)new llvm::SIToFPInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::SIToFPInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1SIToFPInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::SIToFPInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::SIToFPInst *)new llvm::SIToFPInst(arg1,arg2);
  *(llvm::SIToFPInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1SIToFPInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::SIToFPInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::SIToFPInst *)new llvm::SIToFPInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::SIToFPInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SIToFPInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::SIToFPInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SIToFPInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::SIToFPInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1SIToFPInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::SIToFPInst *arg1 = (llvm::SIToFPInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::SIToFPInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPToUIInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::FPToUIInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::FPToUIInst *)new llvm::FPToUIInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::FPToUIInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPToUIInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::FPToUIInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::FPToUIInst *)new llvm::FPToUIInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::FPToUIInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPToUIInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::FPToUIInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::FPToUIInst *)new llvm::FPToUIInst(arg1,arg2);
  *(llvm::FPToUIInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPToUIInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::FPToUIInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::FPToUIInst *)new llvm::FPToUIInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::FPToUIInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FPToUIInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::FPToUIInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FPToUIInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::FPToUIInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1FPToUIInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::FPToUIInst *arg1 = (llvm::FPToUIInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::FPToUIInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPToSIInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::FPToSIInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::FPToSIInst *)new llvm::FPToSIInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::FPToSIInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPToSIInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::FPToSIInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::FPToSIInst *)new llvm::FPToSIInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::FPToSIInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPToSIInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::FPToSIInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::FPToSIInst *)new llvm::FPToSIInst(arg1,arg2);
  *(llvm::FPToSIInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1FPToSIInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::FPToSIInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::FPToSIInst *)new llvm::FPToSIInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::FPToSIInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FPToSIInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::FPToSIInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FPToSIInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::FPToSIInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1FPToSIInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::FPToSIInst *arg1 = (llvm::FPToSIInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::FPToSIInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1IntToPtrInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::IntToPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::IntToPtrInst *)new llvm::IntToPtrInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::IntToPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1IntToPtrInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::IntToPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::IntToPtrInst *)new llvm::IntToPtrInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::IntToPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1IntToPtrInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::IntToPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::IntToPtrInst *)new llvm::IntToPtrInst(arg1,arg2);
  *(llvm::IntToPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1IntToPtrInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::IntToPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::IntToPtrInst *)new llvm::IntToPtrInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::IntToPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IntToPtrInst_1clone_1impl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::IntToPtrInst *arg1 = (llvm::IntToPtrInst *) 0 ;
  llvm::IntToPtrInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::IntToPtrInst **)&jarg1; 
  result = (llvm::IntToPtrInst *)((llvm::IntToPtrInst const *)arg1)->clone_impl();
  *(llvm::IntToPtrInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IntToPtrInst_1getAddressSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::IntToPtrInst *arg1 = (llvm::IntToPtrInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::IntToPtrInst **)&jarg1; 
  result = (unsigned int)((llvm::IntToPtrInst const *)arg1)->getAddressSpace();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IntToPtrInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::IntToPtrInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_IntToPtrInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::IntToPtrInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1IntToPtrInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::IntToPtrInst *arg1 = (llvm::IntToPtrInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::IntToPtrInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1PtrToIntInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::PtrToIntInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::PtrToIntInst *)new llvm::PtrToIntInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::PtrToIntInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1PtrToIntInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::PtrToIntInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::PtrToIntInst *)new llvm::PtrToIntInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::PtrToIntInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1PtrToIntInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::PtrToIntInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::PtrToIntInst *)new llvm::PtrToIntInst(arg1,arg2);
  *(llvm::PtrToIntInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1PtrToIntInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::PtrToIntInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::PtrToIntInst *)new llvm::PtrToIntInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::PtrToIntInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PtrToIntInst_1getPointerOperand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::PtrToIntInst *arg1 = (llvm::PtrToIntInst *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::PtrToIntInst **)&jarg1; 
  result = (llvm::Value *)(arg1)->getPointerOperand();
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PtrToIntInst_1getPointerOperandIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)llvm::PtrToIntInst::getPointerOperandIndex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PtrToIntInst_1getPointerAddressSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::PtrToIntInst *arg1 = (llvm::PtrToIntInst *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::PtrToIntInst **)&jarg1; 
  result = (unsigned int)((llvm::PtrToIntInst const *)arg1)->getPointerAddressSpace();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PtrToIntInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::PtrToIntInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PtrToIntInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::PtrToIntInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1PtrToIntInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::PtrToIntInst *arg1 = (llvm::PtrToIntInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::PtrToIntInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1BitCastInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Instruction *arg4 = (llvm::Instruction *) 0 ;
  llvm::BitCastInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Instruction **)&jarg4; 
  result = (llvm::BitCastInst *)new llvm::BitCastInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::BitCastInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1BitCastInst_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BitCastInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::BitCastInst *)new llvm::BitCastInst(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::BitCastInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1BitCastInst_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::BitCastInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  result = (llvm::BitCastInst *)new llvm::BitCastInst(arg1,arg2);
  *(llvm::BitCastInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1BitCastInst_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Type *arg2 = (llvm::Type *) 0 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::BitCastInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Value **)&jarg1; 
  arg2 = *(llvm::Type **)&jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::BitCastInst *)new llvm::BitCastInst(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::BitCastInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BitCastInst_1classof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (bool)llvm::BitCastInst::classof((llvm::Instruction const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BitCastInst_1classof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::BitCastInst::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1BitCastInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::BitCastInst *arg1 = (llvm::BitCastInst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::BitCastInst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::LLVMContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::LLVMContext *) &((llvm::BasicBlock const *)arg1)->getContext();
  *(llvm::LLVMContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::Function *arg3 = (llvm::Function *) 0 ;
  llvm::BasicBlock *arg4 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = *(llvm::Function **)&jarg3; 
  arg4 = *(llvm::BasicBlock **)&jarg4; 
  result = (llvm::BasicBlock *)llvm::BasicBlock::Create(*arg1,(llvm::Twine const &)*arg2,arg3,arg4);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::Function *arg3 = (llvm::Function *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg3 = *(llvm::Function **)&jarg3; 
  result = (llvm::BasicBlock *)llvm::BasicBlock::Create(*arg1,(llvm::Twine const &)*arg2,arg3);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::BasicBlock *)llvm::BasicBlock::Create(*arg1,(llvm::Twine const &)*arg2);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::LLVMContext *arg1 = 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::LLVMContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::BasicBlock *)llvm::BasicBlock::Create(*arg1);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1BasicBlock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getParent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::Function *)((llvm::BasicBlock const *)arg1)->getParent();
  *(llvm::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getTerminator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::TerminatorInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::TerminatorInst *)(arg1)->getTerminator();
  *(llvm::TerminatorInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getFirstNonPHI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::Instruction *)(arg1)->getFirstNonPHI();
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getFirstNonPHIOrDbg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::Instruction *)(arg1)->getFirstNonPHIOrDbg();
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getFirstNonPHIOrDbgOrLifetime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::Instruction *)(arg1)->getFirstNonPHIOrDbgOrLifetime();
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getFirstInsertionPt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::Instruction >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (arg1)->getFirstInsertionPt();
  *(llvm::BasicBlock::iterator **)&jresult = new llvm::BasicBlock::iterator((const llvm::BasicBlock::iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1removeFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  (arg1)->removeFromParent();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1eraseFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  (arg1)->eraseFromParent();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1moveBefore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  (arg1)->moveBefore(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1moveAfter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  (arg1)->moveAfter(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getSinglePredecessor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::BasicBlock *)(arg1)->getSinglePredecessor();
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getUniquePredecessor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::BasicBlock *)(arg1)->getUniquePredecessor();
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::Instruction >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (arg1)->begin();
  *(llvm::BasicBlock::iterator **)&jresult = new llvm::BasicBlock::iterator((const llvm::BasicBlock::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::Instruction >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (arg1)->end();
  *(llvm::BasicBlock::iterator **)&jresult = new llvm::BasicBlock::iterator((const llvm::BasicBlock::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1rbegin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::Instruction >::reverse_iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (arg1)->rbegin();
  *(llvm::BasicBlock::reverse_iterator **)&jresult = new llvm::BasicBlock::reverse_iterator((const llvm::BasicBlock::reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1rend_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::Instruction >::reverse_iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (arg1)->rend();
  *(llvm::BasicBlock::reverse_iterator **)&jresult = new llvm::BasicBlock::reverse_iterator((const llvm::BasicBlock::reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = ((llvm::BasicBlock const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (bool)((llvm::BasicBlock const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1front_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::Instruction *) &((llvm::BasicBlock const *)arg1)->front();
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::Instruction *) &((llvm::BasicBlock const *)arg1)->back();
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getInstList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock::InstListType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::BasicBlock::InstListType *) &((llvm::BasicBlock const *)arg1)->getInstList();
  *(llvm::BasicBlock::InstListType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getSublistAccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::iplist< llvm::Instruction > BasicBlock::*result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (llvm::iplist< llvm::Instruction > BasicBlock::*)llvm::BasicBlock::getSublistAccess(arg1);
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = jenv->NewStringUTF(buf);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getValueSymbolTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::ValueSymbolTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::ValueSymbolTable *)(arg1)->getValueSymbolTable();
  *(llvm::ValueSymbolTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::BasicBlock::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1dropAllReferences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  (arg1)->dropAllReferences();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1removePredecessor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->removePredecessor(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1removePredecessor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  (arg1)->removePredecessor(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1splitBasicBlock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::Instruction >::iterator > arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::BasicBlock::iterator *argp2 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  argp2 = *(llvm::BasicBlock::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::BasicBlock::iterator");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::BasicBlock *)(arg1)->splitBasicBlock(arg2,(llvm::Twine const &)*arg3);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1splitBasicBlock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::Instruction >::iterator > arg2 ;
  llvm::BasicBlock::iterator *argp2 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  argp2 = *(llvm::BasicBlock::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::BasicBlock::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::BasicBlock *)(arg1)->splitBasicBlock(arg2);
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1hasAddressTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (bool)((llvm::BasicBlock const *)arg1)->hasAddressTaken();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1replaceSuccessorsPhiUsesWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::BasicBlock *arg2 = (llvm::BasicBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = *(llvm::BasicBlock **)&jarg2; 
  (arg1)->replaceSuccessorsPhiUsesWith(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1isLandingPad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (bool)((llvm::BasicBlock const *)arg1)->isLandingPad();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1getLandingPadInst_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::LandingPadInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::LandingPadInst *)(arg1)->getLandingPadInst();
  *(llvm::LandingPadInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1ExternalLinkage_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::GlobalValue::LinkageTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::GlobalValue::LinkageTypes)llvm::GlobalValue::ExternalLinkage;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1DefaultVisibility_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::GlobalValue::VisibilityTypes result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::GlobalValue::VisibilityTypes)llvm::GlobalValue::DefaultVisibility;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1GlobalValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1getAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (unsigned int)((llvm::GlobalValue const *)arg1)->getAlignment();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1setAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasUnnamedAddr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasUnnamedAddr();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1setUnnamedAddr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUnnamedAddr(arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1getVisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  llvm::GlobalValue::VisibilityTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (llvm::GlobalValue::VisibilityTypes)((llvm::GlobalValue const *)arg1)->getVisibility();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasDefaultVisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasDefaultVisibility();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasHiddenVisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasHiddenVisibility();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasProtectedVisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasProtectedVisibility();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1setVisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  llvm::GlobalValue::VisibilityTypes arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  arg2 = (llvm::GlobalValue::VisibilityTypes)jarg2; 
  (arg1)->setVisibility(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasSection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasSection();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1getSection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (std::string *) &((llvm::GlobalValue const *)arg1)->getSection();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1setSection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setSection(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  llvm::PointerType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (llvm::PointerType *)((llvm::GlobalValue const *)arg1)->getType();
  *(llvm::PointerType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1getLinkOnceLinkage(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jint jresult = 0 ;
  bool arg1 ;
  llvm::GlobalValue::LinkageTypes result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (llvm::GlobalValue::LinkageTypes)llvm::GlobalValue::getLinkOnceLinkage(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1getWeakLinkage(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jint jresult = 0 ;
  bool arg1 ;
  llvm::GlobalValue::LinkageTypes result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (llvm::GlobalValue::LinkageTypes)llvm::GlobalValue::getWeakLinkage(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isExternalLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isExternalLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isAvailableExternallyLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isAvailableExternallyLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isLinkOnceLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isLinkOnceLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isLinkOnceODRAutoHideLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isLinkOnceODRAutoHideLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isWeakLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isWeakLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isAppendingLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isAppendingLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isInternalLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isInternalLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isPrivateLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isPrivateLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isLinkerPrivateLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isLinkerPrivateLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isLinkerPrivateWeakLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isLinkerPrivateWeakLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isLocalLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isLocalLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isDLLImportLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isDLLImportLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isDLLExportLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isDLLExportLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isExternalWeakLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isExternalWeakLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isCommonLinkage(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isCommonLinkage(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isDiscardableIfUnused_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isDiscardableIfUnused(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1mayBeOverridden_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::mayBeOverridden(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isWeakForLinker_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  llvm::GlobalValue::LinkageTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (llvm::GlobalValue::LinkageTypes)jarg1; 
  result = (bool)llvm::GlobalValue::isWeakForLinker(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasExternalLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasExternalLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasAvailableExternallyLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasAvailableExternallyLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasLinkOnceLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasLinkOnceLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasLinkOnceODRAutoHideLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasLinkOnceODRAutoHideLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasWeakLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasWeakLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasAppendingLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasAppendingLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasInternalLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasInternalLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasPrivateLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasPrivateLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasLinkerPrivateLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasLinkerPrivateLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasLinkerPrivateWeakLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasLinkerPrivateWeakLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasLocalLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasLocalLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasDLLImportLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasDLLImportLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasDLLExportLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasDLLExportLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasExternalWeakLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasExternalWeakLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1hasCommonLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->hasCommonLinkage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1setLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  llvm::GlobalValue::LinkageTypes arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  arg2 = (llvm::GlobalValue::LinkageTypes)jarg2; 
  (arg1)->setLinkage(arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1getLinkage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  llvm::GlobalValue::LinkageTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (llvm::GlobalValue::LinkageTypes)((llvm::GlobalValue const *)arg1)->getLinkage();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isDiscardableIfUnused_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->isDiscardableIfUnused();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1mayBeOverridden_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->mayBeOverridden();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isWeakForLinker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->isWeakForLinker();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1copyAttributesFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  llvm::GlobalValue *arg2 = (llvm::GlobalValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  arg2 = *(llvm::GlobalValue **)&jarg2; 
  (arg1)->copyAttributesFrom((llvm::GlobalValue const *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isMaterializable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->isMaterializable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isDematerializable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->isDematerializable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1Materialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  result = (bool)(arg1)->Materialize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1Materialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)(arg1)->Materialize();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1Dematerialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  (arg1)->Dematerialize();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1destroyConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  (arg1)->destroyConstant();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1isDeclaration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (bool)((llvm::GlobalValue const *)arg1)->isDeclaration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1removeFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  (arg1)->removeFromParent();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1eraseFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  (arg1)->eraseFromParent();
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1getParent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  llvm::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (llvm::Module *)(arg1)->getParent();
  *(llvm::Module **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::GlobalValue::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1NotThreadLocal_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::GlobalVariable::ThreadLocalMode result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::GlobalVariable::ThreadLocalMode)llvm::GlobalVariable::NotThreadLocal;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1GlobalVariable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1hasInitializer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  result = (bool)((llvm::GlobalVariable const *)arg1)->hasInitializer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1hasDefinitiveInitializer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  result = (bool)((llvm::GlobalVariable const *)arg1)->hasDefinitiveInitializer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1hasUniqueInitializer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  result = (bool)((llvm::GlobalVariable const *)arg1)->hasUniqueInitializer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1getInitializer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  result = (llvm::Constant *)((llvm::GlobalVariable const *)arg1)->getInitializer();
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1setInitializer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  llvm::Constant *arg2 = (llvm::Constant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  arg2 = *(llvm::Constant **)&jarg2; 
  (arg1)->setInitializer(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1isConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  result = (bool)((llvm::GlobalVariable const *)arg1)->isConstant();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1setConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setConstant(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1isThreadLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  result = (bool)((llvm::GlobalVariable const *)arg1)->isThreadLocal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1setThreadLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setThreadLocal(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1setThreadLocalMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  llvm::GlobalVariable::ThreadLocalMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  arg2 = (llvm::GlobalVariable::ThreadLocalMode)jarg2; 
  (arg1)->setThreadLocalMode(arg2);
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1getThreadLocalMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  llvm::GlobalVariable::ThreadLocalMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  result = (llvm::GlobalVariable::ThreadLocalMode)((llvm::GlobalVariable const *)arg1)->getThreadLocalMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1isExternallyInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  result = (bool)((llvm::GlobalVariable const *)arg1)->isExternallyInitialized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1setExternallyInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setExternallyInitialized(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1copyAttributesFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  llvm::GlobalValue *arg2 = (llvm::GlobalValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  arg2 = *(llvm::GlobalValue **)&jarg2; 
  (arg1)->copyAttributesFrom((llvm::GlobalValue const *)arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1removeFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  (arg1)->removeFromParent();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1eraseFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  (arg1)->eraseFromParent();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1replaceUsesOfWithOnConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  Use *arg4 = (Use *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  arg4 = *(Use **)&jarg4; 
  (arg1)->replaceUsesOfWithOnConstant(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::GlobalVariable::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::FunctionType *arg1 = (llvm::FunctionType *) 0 ;
  llvm::GlobalValue::LinkageTypes arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Module *arg4 = (llvm::Module *) 0 ;
  llvm::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = *(llvm::FunctionType **)&jarg1; 
  arg2 = (llvm::GlobalValue::LinkageTypes)jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  arg4 = *(llvm::Module **)&jarg4; 
  result = (llvm::Function *)llvm::Function::Create(arg1,arg2,(llvm::Twine const &)*arg3,arg4);
  *(llvm::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::FunctionType *arg1 = (llvm::FunctionType *) 0 ;
  llvm::GlobalValue::LinkageTypes arg2 ;
  llvm::Twine *arg3 = 0 ;
  llvm::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::FunctionType **)&jarg1; 
  arg2 = (llvm::GlobalValue::LinkageTypes)jarg2; 
  arg3 = *(llvm::Twine **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::Function *)llvm::Function::Create(arg1,arg2,(llvm::Twine const &)*arg3);
  *(llvm::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  llvm::FunctionType *arg1 = (llvm::FunctionType *) 0 ;
  llvm::GlobalValue::LinkageTypes arg2 ;
  llvm::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::FunctionType **)&jarg1; 
  arg2 = (llvm::GlobalValue::LinkageTypes)jarg2; 
  result = (llvm::Function *)llvm::Function::Create(arg1,arg2);
  *(llvm::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1Function(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::Function **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getReturnType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (llvm::Type *)((llvm::Function const *)arg1)->getReturnType();
  *(llvm::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getFunctionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::FunctionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (llvm::FunctionType *)((llvm::Function const *)arg1)->getFunctionType();
  *(llvm::FunctionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::LLVMContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (llvm::LLVMContext *) &((llvm::Function const *)arg1)->getContext();
  *(llvm::LLVMContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1isVarArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->isVarArg();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getIntrinsicID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (unsigned int)((llvm::Function const *)arg1)->getIntrinsicID();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1isIntrinsic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->isIntrinsic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getCallingConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  CallingConv::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = ((llvm::Function const *)arg1)->getCallingConv();
  *(CallingConv::ID **)&jresult = new CallingConv::ID((const CallingConv::ID &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1setCallingConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  CallingConv::ID arg2 ;
  CallingConv::ID *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  argp2 = *(CallingConv::ID **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallingConv::ID");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setCallingConv(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  AttributeSet result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = ((llvm::Function const *)arg1)->getAttributes();
  *(AttributeSet **)&jresult = new AttributeSet((const AttributeSet &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1setAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  AttributeSet arg2 ;
  AttributeSet *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  argp2 = *(AttributeSet **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AttributeSet");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setAttributes(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1addFnAttr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  Attribute::AttrKind arg2 ;
  Attribute::AttrKind *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  argp2 = *(Attribute::AttrKind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Attribute::AttrKind");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->addFnAttr(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1addFnAttr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Function **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->addFnAttr(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1hasFnAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  Attribute::AttrKind arg2 ;
  Attribute::AttrKind *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  argp2 = *(Attribute::AttrKind **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Attribute::AttrKind");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::Function const *)arg1)->hasFnAttribute(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1hasFnAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Function **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((llvm::Function const *)arg1)->hasFnAttribute(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1hasGC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->hasGC();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getGC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (char *)((llvm::Function const *)arg1)->getGC();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1setGC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setGC((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1clearGC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  (arg1)->clearGC();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1addAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  unsigned int arg2 ;
  Attribute::AttrKind arg3 ;
  Attribute::AttrKind *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(Attribute::AttrKind **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Attribute::AttrKind");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1addAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  unsigned int arg2 ;
  AttributeSet arg3 ;
  AttributeSet *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(AttributeSet **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AttributeSet");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1removeAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  unsigned int arg2 ;
  AttributeSet arg3 ;
  AttributeSet *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(AttributeSet **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AttributeSet");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->removeAttributes(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getParamAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)((llvm::Function const *)arg1)->getParamAlignment(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1doesNotAccessMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->doesNotAccessMemory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1setDoesNotAccessMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  (arg1)->setDoesNotAccessMemory();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1onlyReadsMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->onlyReadsMemory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1setOnlyReadsMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  (arg1)->setOnlyReadsMemory();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1doesNotReturn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->doesNotReturn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1setDoesNotReturn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  (arg1)->setDoesNotReturn();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1doesNotThrow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->doesNotThrow();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1setDoesNotThrow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  (arg1)->setDoesNotThrow();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1cannotDuplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->cannotDuplicate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1setCannotDuplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  (arg1)->setCannotDuplicate();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1hasUWTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->hasUWTable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1setHasUWTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  (arg1)->setHasUWTable();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1needsUnwindTableEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->needsUnwindTableEntry();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1hasStructRetAttr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->hasStructRetAttr();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1doesNotAlias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)((llvm::Function const *)arg1)->doesNotAlias(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1setDoesNotAlias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setDoesNotAlias(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1doesNotCapture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)((llvm::Function const *)arg1)->doesNotCapture(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1setDoesNotCapture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setDoesNotCapture(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1copyAttributesFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::GlobalValue *arg2 = (llvm::GlobalValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = *(llvm::GlobalValue **)&jarg2; 
  (arg1)->copyAttributesFrom((llvm::GlobalValue const *)arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1deleteBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  (arg1)->deleteBody();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1removeFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  (arg1)->removeFromParent();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1eraseFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  (arg1)->eraseFromParent();
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getArgumentList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::Function::ArgumentListType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (llvm::Function::ArgumentListType *) &((llvm::Function const *)arg1)->getArgumentList();
  *(llvm::Function::ArgumentListType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getSublistAccess_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  llvm::Argument *arg1 = (llvm::Argument *) 0 ;
  llvm::iplist< llvm::Argument > Function::*result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::Argument **)&jarg1; 
  result = (llvm::iplist< llvm::Argument > Function::*)llvm::Function::getSublistAccess(arg1);
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = jenv->NewStringUTF(buf);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getBasicBlockList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::Function::BasicBlockListType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (llvm::Function::BasicBlockListType *) &((llvm::Function const *)arg1)->getBasicBlockList();
  *(llvm::Function::BasicBlockListType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getSublistAccess_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  llvm::iplist< llvm::BasicBlock > Function::*result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (llvm::iplist< llvm::BasicBlock > Function::*)llvm::Function::getSublistAccess(arg1);
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = jenv->NewStringUTF(buf);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getEntryBlock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (llvm::BasicBlock *) &((llvm::Function const *)arg1)->getEntryBlock();
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1getValueSymbolTable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::ValueSymbolTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (llvm::ValueSymbolTable *) &(arg1)->getValueSymbolTable();
  *(llvm::ValueSymbolTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::BasicBlock >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (arg1)->begin();
  *(llvm::Function::iterator **)&jresult = new llvm::Function::iterator((const llvm::Function::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::BasicBlock >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (arg1)->end();
  *(llvm::Function::iterator **)&jresult = new llvm::Function::iterator((const llvm::Function::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = ((llvm::Function const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1front_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (llvm::BasicBlock *) &((llvm::Function const *)arg1)->front();
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::BasicBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (llvm::BasicBlock *) &((llvm::Function const *)arg1)->back();
  *(llvm::BasicBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1arg_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::Argument >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (arg1)->arg_begin();
  *(llvm::Function::arg_iterator **)&jresult = new llvm::Function::arg_iterator((const llvm::Function::arg_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1arg_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::Argument >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (arg1)->arg_end();
  *(llvm::Function::arg_iterator **)&jresult = new llvm::Function::arg_iterator((const llvm::Function::arg_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1arg_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = ((llvm::Function const *)arg1)->arg_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1arg_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->arg_empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1viewCFG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  ((llvm::Function const *)arg1)->viewCFG();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1viewCFGOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  ((llvm::Function const *)arg1)->viewCFGOnly();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1classof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (bool)llvm::Function::classof((llvm::Value const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1dropAllReferences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  (arg1)->dropAllReferences();
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1hasAddressTaken_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::User **arg2 = (llvm::User **) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  arg2 = *(llvm::User ***)&jarg2; 
  result = (bool)((llvm::Function const *)arg1)->hasAddressTaken((llvm::User const **)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1hasAddressTaken_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->hasAddressTaken();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1isDefTriviallyDead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->isDefTriviallyDead();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1callsFunctionThatReturnsTwice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (bool)((llvm::Function const *)arg1)->callsFunctionThatReturnsTwice();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1Error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Module::ModFlagBehavior result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Module::ModFlagBehavior)llvm::Module::Error;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1Warning_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Module::ModFlagBehavior result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Module::ModFlagBehavior)llvm::Module::Warning;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1Require_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Module::ModFlagBehavior result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Module::ModFlagBehavior)llvm::Module::Require;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1Override_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Module::ModFlagBehavior result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Module::ModFlagBehavior)llvm::Module::Override;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1Append_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Module::ModFlagBehavior result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Module::ModFlagBehavior)llvm::Module::Append;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1AppendUnique_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  llvm::Module::ModFlagBehavior result;
  
  (void)jenv;
  (void)jcls;
  result = (llvm::Module::ModFlagBehavior)llvm::Module::AppendUnique;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1ModuleFlagEntry_1Behavior_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm::Module::ModuleFlagEntry *arg1 = (llvm::Module::ModuleFlagEntry *) 0 ;
  llvm::Module::ModFlagBehavior arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module::ModuleFlagEntry **)&jarg1; 
  arg2 = (llvm::Module::ModFlagBehavior)jarg2; 
  if (arg1) (arg1)->Behavior = arg2;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1ModuleFlagEntry_1Behavior_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::Module::ModuleFlagEntry *arg1 = (llvm::Module::ModuleFlagEntry *) 0 ;
  llvm::Module::ModFlagBehavior result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module::ModuleFlagEntry **)&jarg1; 
  result = (llvm::Module::ModFlagBehavior) ((arg1)->Behavior);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1ModuleFlagEntry_1Key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Module::ModuleFlagEntry *arg1 = (llvm::Module::ModuleFlagEntry *) 0 ;
  llvm::MDString *arg2 = (llvm::MDString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module::ModuleFlagEntry **)&jarg1; 
  arg2 = *(llvm::MDString **)&jarg2; 
  if (arg1) (arg1)->Key = arg2;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1ModuleFlagEntry_1Key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module::ModuleFlagEntry *arg1 = (llvm::Module::ModuleFlagEntry *) 0 ;
  llvm::MDString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module::ModuleFlagEntry **)&jarg1; 
  result = (llvm::MDString *) ((arg1)->Key);
  *(llvm::MDString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1ModuleFlagEntry_1Val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Module::ModuleFlagEntry *arg1 = (llvm::Module::ModuleFlagEntry *) 0 ;
  llvm::Value *arg2 = (llvm::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module::ModuleFlagEntry **)&jarg1; 
  arg2 = *(llvm::Value **)&jarg2; 
  if (arg1) (arg1)->Val = arg2;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1ModuleFlagEntry_1Val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module::ModuleFlagEntry *arg1 = (llvm::Module::ModuleFlagEntry *) 0 ;
  llvm::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module::ModuleFlagEntry **)&jarg1; 
  result = (llvm::Value *) ((arg1)->Val);
  *(llvm::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1Module_1ModuleFlagEntry(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Module::ModFlagBehavior arg1 ;
  llvm::MDString *arg2 = (llvm::MDString *) 0 ;
  llvm::Value *arg3 = (llvm::Value *) 0 ;
  llvm::Module::ModuleFlagEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (llvm::Module::ModFlagBehavior)jarg1; 
  arg2 = *(llvm::MDString **)&jarg2; 
  arg3 = *(llvm::Value **)&jarg3; 
  result = (llvm::Module::ModuleFlagEntry *)new llvm::Module::ModuleFlagEntry(arg1,arg2,arg3);
  *(llvm::Module::ModuleFlagEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1Module_1ModuleFlagEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::Module::ModuleFlagEntry *arg1 = (llvm::Module::ModuleFlagEntry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::Module::ModuleFlagEntry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_new_1Module(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::StringRef arg1 ;
  llvm::LLVMContext *arg2 = 0 ;
  llvm::StringRef *argp1 ;
  llvm::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(llvm::StringRef **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(llvm::LLVMContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Module *)new llvm::Module(arg1,*arg2);
  *(llvm::Module **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_delete_1Module(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::Module **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getModuleIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (std::string *) &((llvm::Module const *)arg1)->getModuleIdentifier();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getDataLayout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (std::string *) &((llvm::Module const *)arg1)->getDataLayout();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getTargetTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (std::string *) &((llvm::Module const *)arg1)->getTargetTriple();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getEndianness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::Module::Endianness result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (llvm::Module::Endianness)((llvm::Module const *)arg1)->getEndianness();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getPointerSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::Module::PointerSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (llvm::Module::PointerSize)((llvm::Module const *)arg1)->getPointerSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::LLVMContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (llvm::LLVMContext *) &((llvm::Module const *)arg1)->getContext();
  *(llvm::LLVMContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getModuleInlineAsm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (std::string *) &((llvm::Module const *)arg1)->getModuleInlineAsm();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1setModuleIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setModuleIdentifier(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1setDataLayout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setDataLayout(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1setTargetTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTargetTriple(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1setModuleInlineAsm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setModuleInlineAsm(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1appendModuleInlineAsm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->appendModuleInlineAsm(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getNamedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::GlobalValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::GlobalValue *)((llvm::Module const *)arg1)->getNamedValue(arg2);
  *(llvm::GlobalValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getMDKindID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (unsigned int)((llvm::Module const *)arg1)->getMDKindID(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getMDKindNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::SmallVectorImpl< llvm::StringRef > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< llvm::StringRef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< llvm::StringRef > & reference is null");
    return ;
  } 
  ((llvm::Module const *)arg1)->getMDKindNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getTypeByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::StructType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::StructType *)((llvm::Module const *)arg1)->getTypeByName(arg2);
  *(llvm::StructType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getOrInsertFunction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::FunctionType *arg3 = (llvm::FunctionType *) 0 ;
  AttributeSet arg4 ;
  llvm::StringRef *argp2 ;
  AttributeSet *argp4 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::FunctionType **)&jarg3; 
  argp4 = *(AttributeSet **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AttributeSet");
    return 0;
  }
  arg4 = *argp4; 
  result = (llvm::Constant *)(arg1)->getOrInsertFunction(arg2,arg3,arg4);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getOrInsertFunction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::FunctionType *arg3 = (llvm::FunctionType *) 0 ;
  llvm::StringRef *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::FunctionType **)&jarg3; 
  result = (llvm::Constant *)(arg1)->getOrInsertFunction(arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getOrInsertFunction_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  AttributeSet arg3 ;
  llvm::Type *arg4 = (llvm::Type *) 0 ;
  void *arg5 = 0 ;
  llvm::StringRef *argp2 ;
  AttributeSet *argp3 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(AttributeSet **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AttributeSet");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(llvm::Type **)&jarg4; 
  result = (llvm::Constant *)(arg1)->getOrInsertFunction(arg2,arg3,arg4,arg5);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getOrInsertFunction_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  void *arg4 = 0 ;
  llvm::StringRef *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Type **)&jarg3; 
  result = (llvm::Constant *)(arg1)->getOrInsertFunction(arg2,arg3,arg4);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getOrInsertTargetIntrinsic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::FunctionType *arg3 = (llvm::FunctionType *) 0 ;
  AttributeSet arg4 ;
  llvm::StringRef *argp2 ;
  AttributeSet *argp4 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::FunctionType **)&jarg3; 
  argp4 = *(AttributeSet **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AttributeSet");
    return 0;
  }
  arg4 = *argp4; 
  result = (llvm::Constant *)(arg1)->getOrInsertTargetIntrinsic(arg2,arg3,arg4);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::Function *)((llvm::Module const *)arg1)->getFunction(arg2);
  *(llvm::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getGlobalVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  bool arg3 ;
  llvm::StringRef *argp2 ;
  llvm::GlobalVariable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (llvm::GlobalVariable *)((llvm::Module const *)arg1)->getGlobalVariable(arg2,arg3);
  *(llvm::GlobalVariable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getGlobalVariable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::GlobalVariable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::GlobalVariable *)((llvm::Module const *)arg1)->getGlobalVariable(arg2);
  *(llvm::GlobalVariable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getNamedGlobal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::GlobalVariable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::GlobalVariable *)((llvm::Module const *)arg1)->getNamedGlobal(arg2);
  *(llvm::GlobalVariable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getOrInsertGlobal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::Type *arg3 = (llvm::Type *) 0 ;
  llvm::StringRef *argp2 ;
  llvm::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(llvm::Type **)&jarg3; 
  result = (llvm::Constant *)(arg1)->getOrInsertGlobal(arg2,arg3);
  *(llvm::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getNamedAlias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::GlobalAlias *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::GlobalAlias *)((llvm::Module const *)arg1)->getNamedAlias(arg2);
  *(llvm::GlobalAlias **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getNamedMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::Twine *arg2 = 0 ;
  llvm::NamedMDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::Twine **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::Twine const & reference is null");
    return 0;
  } 
  result = (llvm::NamedMDNode *)((llvm::Module const *)arg1)->getNamedMetadata((llvm::Twine const &)*arg2);
  *(llvm::NamedMDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getOrInsertNamedMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::StringRef arg2 ;
  llvm::StringRef *argp2 ;
  llvm::NamedMDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  argp2 = *(llvm::StringRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return 0;
  }
  arg2 = *argp2; 
  result = (llvm::NamedMDNode *)(arg1)->getOrInsertNamedMetadata(arg2);
  *(llvm::NamedMDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1eraseNamedMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::NamedMDNode *arg2 = (llvm::NamedMDNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::NamedMDNode **)&jarg2; 
  (arg1)->eraseNamedMetadata(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getModuleFlagsMetadata_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::SmallVectorImpl< llvm::Module::ModuleFlagEntry > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::SmallVectorImpl< llvm::Module::ModuleFlagEntry > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SmallVectorImpl< llvm::Module::ModuleFlagEntry > & reference is null");
    return ;
  } 
  ((llvm::Module const *)arg1)->getModuleFlagsMetadata(*arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getModuleFlagsMetadata_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::NamedMDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (llvm::NamedMDNode *)((llvm::Module const *)arg1)->getModuleFlagsMetadata();
  *(llvm::NamedMDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getOrInsertModuleFlagsMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::NamedMDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (llvm::NamedMDNode *)(arg1)->getOrInsertModuleFlagsMetadata();
  *(llvm::NamedMDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1addModuleFlag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::Module::ModFlagBehavior arg2 ;
  llvm::StringRef arg3 ;
  llvm::Value *arg4 = (llvm::Value *) 0 ;
  llvm::StringRef *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = (llvm::Module::ModFlagBehavior)jarg2; 
  argp3 = *(llvm::StringRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg3 = *argp3; 
  arg4 = *(llvm::Value **)&jarg4; 
  (arg1)->addModuleFlag(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1addModuleFlag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::Module::ModFlagBehavior arg2 ;
  llvm::StringRef arg3 ;
  uint32_t arg4 ;
  llvm::StringRef *argp3 ;
  uint32_t *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = (llvm::Module::ModFlagBehavior)jarg2; 
  argp3 = *(llvm::StringRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null llvm::StringRef");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(uint32_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->addModuleFlag(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1addModuleFlag_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::MDNode *arg2 = (llvm::MDNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::MDNode **)&jarg2; 
  (arg1)->addModuleFlag(arg2);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1setMaterializer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::GVMaterializer *arg2 = (llvm::GVMaterializer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::GVMaterializer **)&jarg2; 
  (arg1)->setMaterializer(arg2);
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getMaterializer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::GVMaterializer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (llvm::GVMaterializer *)((llvm::Module const *)arg1)->getMaterializer();
  *(llvm::GVMaterializer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1isMaterializable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::GlobalValue *arg2 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::GlobalValue **)&jarg2; 
  result = (bool)((llvm::Module const *)arg1)->isMaterializable((llvm::GlobalValue const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1isDematerializable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::GlobalValue *arg2 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::GlobalValue **)&jarg2; 
  result = (bool)((llvm::Module const *)arg1)->isDematerializable((llvm::GlobalValue const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1Materialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::GlobalValue *arg2 = (llvm::GlobalValue *) 0 ;
  std::string *arg3 = (std::string *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::GlobalValue **)&jarg2; 
  arg3 = *(std::string **)&jarg3; 
  result = (bool)(arg1)->Materialize(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1Materialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::GlobalValue *arg2 = (llvm::GlobalValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::GlobalValue **)&jarg2; 
  result = (bool)(arg1)->Materialize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1Dematerialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::GlobalValue *arg2 = (llvm::GlobalValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::GlobalValue **)&jarg2; 
  (arg1)->Dematerialize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1MaterializeAll_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  result = (bool)(arg1)->MaterializeAll(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1MaterializeAll_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (bool)(arg1)->MaterializeAll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1MaterializeAllPermanently_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  result = (bool)(arg1)->MaterializeAllPermanently(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1MaterializeAllPermanently_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (bool)(arg1)->MaterializeAllPermanently();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getGlobalList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::Module::GlobalListType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (llvm::Module::GlobalListType *) &((llvm::Module const *)arg1)->getGlobalList();
  *(llvm::Module::GlobalListType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getSublistAccess_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::GlobalVariable *arg1 = (llvm::GlobalVariable *) 0 ;
  llvm::iplist< llvm::GlobalVariable > Module::*result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalVariable **)&jarg1; 
  result = (llvm::iplist< llvm::GlobalVariable > Module::*)llvm::Module::getSublistAccess(arg1);
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = jenv->NewStringUTF(buf);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getFunctionList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::Module::FunctionListType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (llvm::Module::FunctionListType *) &((llvm::Module const *)arg1)->getFunctionList();
  *(llvm::Module::FunctionListType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getSublistAccess_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::Function *arg1 = (llvm::Function *) 0 ;
  llvm::iplist< llvm::Function > Module::*result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Function **)&jarg1; 
  result = (llvm::iplist< llvm::Function > Module::*)llvm::Module::getSublistAccess(arg1);
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = jenv->NewStringUTF(buf);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getAliasList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::Module::AliasListType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (llvm::Module::AliasListType *) &((llvm::Module const *)arg1)->getAliasList();
  *(llvm::Module::AliasListType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getSublistAccess_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  llvm::GlobalAlias *arg1 = (llvm::GlobalAlias *) 0 ;
  llvm::iplist< llvm::GlobalAlias > Module::*result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm::GlobalAlias **)&jarg1; 
  result = (llvm::iplist< llvm::GlobalAlias > Module::*)llvm::Module::getSublistAccess(arg1);
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = jenv->NewStringUTF(buf);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getNamedMDList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::Module::NamedMDListType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (llvm::Module::NamedMDListType *) &((llvm::Module const *)arg1)->getNamedMDList();
  *(llvm::Module::NamedMDListType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getSublistAccess_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::NamedMDNode *arg1 = (llvm::NamedMDNode *) 0 ;
  llvm::ilist< llvm::NamedMDNode > Module::*result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::NamedMDNode **)&jarg1; 
  result = (llvm::ilist< llvm::NamedMDNode > Module::*)llvm::Module::getSublistAccess(arg1);
  char buf[128];
  char *data = SWIG_PackData(buf, (void *)&result, sizeof(result));
  *data = '\0';
  jresult = jenv->NewStringUTF(buf);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1getValueSymbolTable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::ValueSymbolTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (llvm::ValueSymbolTable *) &((llvm::Module const *)arg1)->getValueSymbolTable();
  *(llvm::ValueSymbolTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1global_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::GlobalVariable >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (arg1)->global_begin();
  *(llvm::Module::global_iterator **)&jresult = new llvm::Module::global_iterator((const llvm::Module::global_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1global_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::GlobalVariable >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (arg1)->global_end();
  *(llvm::Module::global_iterator **)&jresult = new llvm::Module::global_iterator((const llvm::Module::global_iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1global_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (bool)((llvm::Module const *)arg1)->global_empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::Function >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (arg1)->begin();
  *(llvm::Module::iterator **)&jresult = new llvm::Module::iterator((const llvm::Module::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::Function >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (arg1)->end();
  *(llvm::Module::iterator **)&jresult = new llvm::Module::iterator((const llvm::Module::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = ((llvm::Module const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (bool)((llvm::Module const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1alias_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::GlobalAlias >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (arg1)->alias_begin();
  *(llvm::Module::alias_iterator **)&jresult = new llvm::Module::alias_iterator((const llvm::Module::alias_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1alias_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  SwigValueWrapper< llvm::iplist< llvm::GlobalAlias >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (arg1)->alias_end();
  *(llvm::Module::alias_iterator **)&jresult = new llvm::Module::alias_iterator((const llvm::Module::alias_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1alias_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = ((llvm::Module const *)arg1)->alias_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1alias_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (bool)((llvm::Module const *)arg1)->alias_empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1named_1metadata_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  SwigValueWrapper< llvm::ilist< llvm::NamedMDNode >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (arg1)->named_metadata_begin();
  *(llvm::Module::named_metadata_iterator **)&jresult = new llvm::Module::named_metadata_iterator((const llvm::Module::named_metadata_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1named_1metadata_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  SwigValueWrapper< llvm::ilist< llvm::NamedMDNode >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (arg1)->named_metadata_end();
  *(llvm::Module::named_metadata_iterator **)&jresult = new llvm::Module::named_metadata_iterator((const llvm::Module::named_metadata_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1named_1metadata_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = ((llvm::Module const *)arg1)->named_metadata_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1named_1metadata_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (bool)((llvm::Module const *)arg1)->named_metadata_empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  llvm::raw_ostream *arg2 = 0 ;
  llvm::AssemblyAnnotationWriter *arg3 = (llvm::AssemblyAnnotationWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = *(llvm::raw_ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::raw_ostream & reference is null");
    return ;
  } 
  arg3 = *(llvm::AssemblyAnnotationWriter **)&jarg3; 
  ((llvm::Module const *)arg1)->print(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  ((llvm::Module const *)arg1)->dump();
}


SWIGEXPORT void JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Module_1dropAllReferences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  (arg1)->dropAllReferences();
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_unwrap_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  LLVMModuleProviderRef arg1 ;
  LLVMModuleProviderRef *argp1 ;
  llvm::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(LLVMModuleProviderRef **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null LLVMModuleProviderRef");
    return 0;
  }
  arg1 = *argp1; 
  result = (llvm::Module *)llvm::unwrap(arg1);
  *(llvm::Module **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_getLazyIRModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::MemoryBuffer *arg1 = (llvm::MemoryBuffer *) 0 ;
  llvm::SMDiagnostic *arg2 = 0 ;
  llvm::LLVMContext *arg3 = 0 ;
  llvm::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = *(llvm::MemoryBuffer **)&jarg1; 
  arg2 = *(llvm::SMDiagnostic **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SMDiagnostic & reference is null");
    return 0;
  } 
  arg3 = *(llvm::LLVMContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Module *)llvm::getLazyIRModule(arg1,*arg2,*arg3);
  *(llvm::Module **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_getLazyIRFileModule(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  llvm::SMDiagnostic *arg2 = 0 ;
  llvm::LLVMContext *arg3 = 0 ;
  llvm::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(llvm::SMDiagnostic **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SMDiagnostic & reference is null");
    return 0;
  } 
  arg3 = *(llvm::LLVMContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Module *)llvm::getLazyIRFileModule((std::string const &)*arg1,*arg2,*arg3);
  *(llvm::Module **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ParseIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  llvm::MemoryBuffer *arg1 = (llvm::MemoryBuffer *) 0 ;
  llvm::SMDiagnostic *arg2 = 0 ;
  llvm::LLVMContext *arg3 = 0 ;
  llvm::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = *(llvm::MemoryBuffer **)&jarg1; 
  arg2 = *(llvm::SMDiagnostic **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SMDiagnostic & reference is null");
    return 0;
  } 
  arg3 = *(llvm::LLVMContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Module *)llvm::ParseIR(arg1,*arg2,*arg3);
  *(llvm::Module **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ParseIRFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  llvm::SMDiagnostic *arg2 = 0 ;
  llvm::LLVMContext *arg3 = 0 ;
  llvm::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(llvm::SMDiagnostic **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SMDiagnostic & reference is null");
    return 0;
  } 
  arg3 = *(llvm::LLVMContext **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::LLVMContext & reference is null");
    return 0;
  } 
  result = (llvm::Module *)llvm::ParseIRFile((std::string const &)*arg1,*arg2,*arg3);
  *(llvm::Module **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  llvm::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (llvm::Module *)parse((char const *)arg1);
  *(llvm::Module **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm::GlobalValue *arg1 = (llvm::GlobalValue *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::GlobalValue **)&jarg1; 
  result = (char *)getName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_getModuleFunctionsSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  result = (int)getModuleFunctionsSize(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_getModuleFunctionsItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  llvm::Module *arg1 = (llvm::Module *) 0 ;
  int arg2 ;
  llvm::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Module **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (llvm::Function *)getModuleFunctionsItem(arg1,arg2);
  *(llvm::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_getBasicBlockInstructionsSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  result = (int)getBasicBlockInstructionsSize(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_getBasicBlockInstructionsItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  llvm::BasicBlock *arg1 = (llvm::BasicBlock *) 0 ;
  int arg2 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::BasicBlock **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (llvm::Instruction *)getBasicBlockInstructionsItem(arg1,arg2);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_toMDNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::MDNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::MDNode *)toMDNode(arg1);
  *(llvm::MDNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_toMDString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::MDString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::MDString *)toMDString(arg1);
  *(llvm::MDString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_toConstantInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::ConstantInt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::ConstantInt *)toConstantInt(arg1);
  *(llvm::ConstantInt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_toGlobalVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::GlobalVariable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::GlobalVariable *)toGlobalVariable(arg1);
  *(llvm::GlobalVariable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_toInstruction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Value *arg1 = (llvm::Value *) 0 ;
  llvm::Instruction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Value **)&jarg1; 
  result = (llvm::Instruction *)toInstruction(arg1);
  *(llvm::Instruction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_toStoreInst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm::Instruction *arg1 = (llvm::Instruction *) 0 ;
  llvm::StoreInst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm::Instruction **)&jarg1; 
  result = (llvm::StoreInst *)toStoreInst(arg1);
  *(llvm::StoreInst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Constant_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::User **)&baseptr = *(llvm::Constant **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantInt_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Constant **)&baseptr = *(llvm::ConstantInt **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantFP_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Constant **)&baseptr = *(llvm::ConstantFP **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantAggregateZero_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Constant **)&baseptr = *(llvm::ConstantAggregateZero **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantArray_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Constant **)&baseptr = *(llvm::ConstantArray **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantStruct_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Constant **)&baseptr = *(llvm::ConstantStruct **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantVector_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Constant **)&baseptr = *(llvm::ConstantVector **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantPointerNull_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Constant **)&baseptr = *(llvm::ConstantPointerNull **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BlockAddress_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Constant **)&baseptr = *(llvm::BlockAddress **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ConstantExpr_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Constant **)&baseptr = *(llvm::ConstantExpr **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_UndefValue_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Constant **)&baseptr = *(llvm::UndefValue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDString_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Value **)&baseptr = *(llvm::MDString **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_MDNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Value **)&baseptr = *(llvm::MDNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_User_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Value **)&baseptr = *(llvm::User **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Instruction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::User **)&baseptr = *(llvm::Instruction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_StoreInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::StoreInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_FenceInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::FenceInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicCmpXchgInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::AtomicCmpXchgInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_AtomicRMWInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::AtomicRMWInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GetElementPtrInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::GetElementPtrInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_CallInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::CallInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_SelectInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::SelectInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ExtractElementInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::ExtractElementInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertElementInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::InsertElementInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_ShuffleVectorInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::ShuffleVectorInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_InsertValueInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::InsertValueInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_PHINode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::PHINode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_LandingPadInst_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Instruction **)&baseptr = *(llvm::LandingPadInst **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_BasicBlock_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Value **)&baseptr = *(llvm::BasicBlock **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalValue_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::Constant **)&baseptr = *(llvm::GlobalValue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_GlobalVariable_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::GlobalValue **)&baseptr = *(llvm::GlobalVariable **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_na_okutane_cpp_llvm_bitreaderJNI_Function_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::GlobalValue **)&baseptr = *(llvm::Function **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

