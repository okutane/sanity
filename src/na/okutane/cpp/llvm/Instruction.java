/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class Instruction {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Instruction(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Instruction obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bitreaderJNI.delete_Instruction(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Instruction use_back() {
    long cPtr = bitreaderJNI.Instruction_use_back__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Instruction(cPtr, false);
  }

  public BasicBlock getParent() {
    long cPtr = bitreaderJNI.Instruction_getParent__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new BasicBlock(cPtr, false);
  }

  public void removeFromParent() {
    bitreaderJNI.Instruction_removeFromParent(swigCPtr, this);
  }

  public void eraseFromParent() {
    bitreaderJNI.Instruction_eraseFromParent(swigCPtr, this);
  }

  public void insertBefore(Instruction InsertPos) {
    bitreaderJNI.Instruction_insertBefore(swigCPtr, this, Instruction.getCPtr(InsertPos), InsertPos);
  }

  public void insertAfter(Instruction InsertPos) {
    bitreaderJNI.Instruction_insertAfter(swigCPtr, this, Instruction.getCPtr(InsertPos), InsertPos);
  }

  public void moveBefore(Instruction MovePos) {
    bitreaderJNI.Instruction_moveBefore(swigCPtr, this, Instruction.getCPtr(MovePos), MovePos);
  }

  public long getOpcode() {
    return bitreaderJNI.Instruction_getOpcode(swigCPtr, this);
  }

  public String getOpcodeName() {
    return bitreaderJNI.Instruction_getOpcodeName__SWIG_0(swigCPtr, this);
  }

  public boolean isTerminator() {
    return bitreaderJNI.Instruction_isTerminator__SWIG_0(swigCPtr, this);
  }

  public boolean isBinaryOp() {
    return bitreaderJNI.Instruction_isBinaryOp__SWIG_0(swigCPtr, this);
  }

  public boolean isShift() {
    return bitreaderJNI.Instruction_isShift__SWIG_0(swigCPtr, this);
  }

  public boolean isCast() {
    return bitreaderJNI.Instruction_isCast__SWIG_0(swigCPtr, this);
  }

  public static String getOpcodeName(long OpCode) {
    return bitreaderJNI.Instruction_getOpcodeName__SWIG_1(OpCode);
  }

  public static boolean isTerminator(long OpCode) {
    return bitreaderJNI.Instruction_isTerminator__SWIG_1(OpCode);
  }

  public static boolean isBinaryOp(long Opcode) {
    return bitreaderJNI.Instruction_isBinaryOp__SWIG_1(Opcode);
  }

  public static boolean isShift(long Opcode) {
    return bitreaderJNI.Instruction_isShift__SWIG_1(Opcode);
  }

  public boolean isLogicalShift() {
    return bitreaderJNI.Instruction_isLogicalShift(swigCPtr, this);
  }

  public boolean isArithmeticShift() {
    return bitreaderJNI.Instruction_isArithmeticShift(swigCPtr, this);
  }

  public static boolean isCast(long OpCode) {
    return bitreaderJNI.Instruction_isCast__SWIG_1(OpCode);
  }

  public boolean hasMetadata() {
    return bitreaderJNI.Instruction_hasMetadata(swigCPtr, this);
  }

  public boolean hasMetadataOtherThanDebugLoc() {
    return bitreaderJNI.Instruction_hasMetadataOtherThanDebugLoc(swigCPtr, this);
  }

  public MDNode getMetadata(long KindID) {
    long cPtr = bitreaderJNI.Instruction_getMetadata__SWIG_0(swigCPtr, this, KindID);
    return (cPtr == 0) ? null : new MDNode(cPtr, false);
  }

  public MDNode getMetadata(StringRef Kind) {
    long cPtr = bitreaderJNI.Instruction_getMetadata__SWIG_1(swigCPtr, this, StringRef.getCPtr(Kind), Kind);
    return (cPtr == 0) ? null : new MDNode(cPtr, false);
  }

  public void getAllMetadata(SWIGTYPE_p_llvm__SmallVectorImplT_std__pairT_unsigned_int_llvm__MDNode_p_t_t MDs) {
    bitreaderJNI.Instruction_getAllMetadata(swigCPtr, this, SWIGTYPE_p_llvm__SmallVectorImplT_std__pairT_unsigned_int_llvm__MDNode_p_t_t.getCPtr(MDs));
  }

  public void getAllMetadataOtherThanDebugLoc(SWIGTYPE_p_llvm__SmallVectorImplT_std__pairT_unsigned_int_llvm__MDNode_p_t_t MDs) {
    bitreaderJNI.Instruction_getAllMetadataOtherThanDebugLoc(swigCPtr, this, SWIGTYPE_p_llvm__SmallVectorImplT_std__pairT_unsigned_int_llvm__MDNode_p_t_t.getCPtr(MDs));
  }

  public void setMetadata(long KindID, MDNode Node) {
    bitreaderJNI.Instruction_setMetadata__SWIG_0(swigCPtr, this, KindID, MDNode.getCPtr(Node), Node);
  }

  public void setMetadata(StringRef Kind, MDNode Node) {
    bitreaderJNI.Instruction_setMetadata__SWIG_1(swigCPtr, this, StringRef.getCPtr(Kind), Kind, MDNode.getCPtr(Node), Node);
  }

  public void setDebugLoc(DebugLoc Loc) {
    bitreaderJNI.Instruction_setDebugLoc(swigCPtr, this, DebugLoc.getCPtr(Loc), Loc);
  }

  public DebugLoc getDebugLoc() {
    return new DebugLoc(bitreaderJNI.Instruction_getDebugLoc(swigCPtr, this), false);
  }

  public void setHasUnsafeAlgebra(boolean B) {
    bitreaderJNI.Instruction_setHasUnsafeAlgebra(swigCPtr, this, B);
  }

  public void setHasNoNaNs(boolean B) {
    bitreaderJNI.Instruction_setHasNoNaNs(swigCPtr, this, B);
  }

  public void setHasNoInfs(boolean B) {
    bitreaderJNI.Instruction_setHasNoInfs(swigCPtr, this, B);
  }

  public void setHasNoSignedZeros(boolean B) {
    bitreaderJNI.Instruction_setHasNoSignedZeros(swigCPtr, this, B);
  }

  public void setHasAllowReciprocal(boolean B) {
    bitreaderJNI.Instruction_setHasAllowReciprocal(swigCPtr, this, B);
  }

  public void setFastMathFlags(SWIGTYPE_p_llvm__FastMathFlags FMF) {
    bitreaderJNI.Instruction_setFastMathFlags(swigCPtr, this, SWIGTYPE_p_llvm__FastMathFlags.getCPtr(FMF));
  }

  public boolean hasUnsafeAlgebra() {
    return bitreaderJNI.Instruction_hasUnsafeAlgebra(swigCPtr, this);
  }

  public boolean hasNoNaNs() {
    return bitreaderJNI.Instruction_hasNoNaNs(swigCPtr, this);
  }

  public boolean hasNoInfs() {
    return bitreaderJNI.Instruction_hasNoInfs(swigCPtr, this);
  }

  public boolean hasNoSignedZeros() {
    return bitreaderJNI.Instruction_hasNoSignedZeros(swigCPtr, this);
  }

  public boolean hasAllowReciprocal() {
    return bitreaderJNI.Instruction_hasAllowReciprocal(swigCPtr, this);
  }

  public SWIGTYPE_p_llvm__FastMathFlags getFastMathFlags() {
    return new SWIGTYPE_p_llvm__FastMathFlags(bitreaderJNI.Instruction_getFastMathFlags(swigCPtr, this), true);
  }

  public void copyFastMathFlags(Instruction I) {
    bitreaderJNI.Instruction_copyFastMathFlags(swigCPtr, this, Instruction.getCPtr(I), I);
  }

  public boolean isAssociative() {
    return bitreaderJNI.Instruction_isAssociative__SWIG_0(swigCPtr, this);
  }

  public static boolean isAssociative(long op) {
    return bitreaderJNI.Instruction_isAssociative__SWIG_1(op);
  }

  public boolean isCommutative() {
    return bitreaderJNI.Instruction_isCommutative__SWIG_0(swigCPtr, this);
  }

  public static boolean isCommutative(long op) {
    return bitreaderJNI.Instruction_isCommutative__SWIG_1(op);
  }

  public boolean isIdempotent() {
    return bitreaderJNI.Instruction_isIdempotent__SWIG_0(swigCPtr, this);
  }

  public static boolean isIdempotent(long op) {
    return bitreaderJNI.Instruction_isIdempotent__SWIG_1(op);
  }

  public boolean isNilpotent() {
    return bitreaderJNI.Instruction_isNilpotent__SWIG_0(swigCPtr, this);
  }

  public static boolean isNilpotent(long op) {
    return bitreaderJNI.Instruction_isNilpotent__SWIG_1(op);
  }

  public boolean mayWriteToMemory() {
    return bitreaderJNI.Instruction_mayWriteToMemory(swigCPtr, this);
  }

  public boolean mayReadFromMemory() {
    return bitreaderJNI.Instruction_mayReadFromMemory(swigCPtr, this);
  }

  public boolean mayReadOrWriteMemory() {
    return bitreaderJNI.Instruction_mayReadOrWriteMemory(swigCPtr, this);
  }

  public boolean mayThrow() {
    return bitreaderJNI.Instruction_mayThrow(swigCPtr, this);
  }

  public boolean mayReturn() {
    return bitreaderJNI.Instruction_mayReturn(swigCPtr, this);
  }

  public boolean mayHaveSideEffects() {
    return bitreaderJNI.Instruction_mayHaveSideEffects(swigCPtr, this);
  }

  public Instruction clone() {
    long cPtr = bitreaderJNI.Instruction_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Instruction(cPtr, false);
  }

  public boolean isIdenticalTo(Instruction I) {
    return bitreaderJNI.Instruction_isIdenticalTo(swigCPtr, this, Instruction.getCPtr(I), I);
  }

  public boolean isIdenticalToWhenDefined(Instruction I) {
    return bitreaderJNI.Instruction_isIdenticalToWhenDefined(swigCPtr, this, Instruction.getCPtr(I), I);
  }

  public boolean isSameOperationAs(Instruction I, long flags) {
    return bitreaderJNI.Instruction_isSameOperationAs__SWIG_0(swigCPtr, this, Instruction.getCPtr(I), I, flags);
  }

  public boolean isSameOperationAs(Instruction I) {
    return bitreaderJNI.Instruction_isSameOperationAs__SWIG_1(swigCPtr, this, Instruction.getCPtr(I), I);
  }

  public boolean isUsedOutsideOfBlock(BasicBlock BB) {
    return bitreaderJNI.Instruction_isUsedOutsideOfBlock(swigCPtr, this, BasicBlock.getCPtr(BB), BB);
  }

  public static boolean classof(Value V) {
    return bitreaderJNI.Instruction_classof(Value.getCPtr(V), V);
  }

  public final static class OperationEquivalenceFlags {
    public final static Instruction.OperationEquivalenceFlags CompareIgnoringAlignment = new Instruction.OperationEquivalenceFlags("CompareIgnoringAlignment", bitreaderJNI.Instruction_CompareIgnoringAlignment_get());
    public final static Instruction.OperationEquivalenceFlags CompareUsingScalarTypes = new Instruction.OperationEquivalenceFlags("CompareUsingScalarTypes", bitreaderJNI.Instruction_CompareUsingScalarTypes_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static OperationEquivalenceFlags swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + OperationEquivalenceFlags.class + " with value " + swigValue);
    }

    private OperationEquivalenceFlags(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private OperationEquivalenceFlags(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private OperationEquivalenceFlags(String swigName, OperationEquivalenceFlags swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static OperationEquivalenceFlags[] swigValues = { CompareIgnoringAlignment, CompareUsingScalarTypes };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class TermOps {

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static TermOps swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + TermOps.class + " with value " + swigValue);
    }

    private TermOps(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private TermOps(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private TermOps(String swigName, TermOps swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static TermOps[] swigValues = {  };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class BinaryOps {

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static BinaryOps swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + BinaryOps.class + " with value " + swigValue);
    }

    private BinaryOps(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private BinaryOps(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private BinaryOps(String swigName, BinaryOps swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static BinaryOps[] swigValues = {  };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MemoryOps {

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MemoryOps swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MemoryOps.class + " with value " + swigValue);
    }

    private MemoryOps(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MemoryOps(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MemoryOps(String swigName, MemoryOps swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MemoryOps[] swigValues = {  };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class CastOps {

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static CastOps swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + CastOps.class + " with value " + swigValue);
    }

    private CastOps(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private CastOps(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private CastOps(String swigName, CastOps swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static CastOps[] swigValues = {  };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class OtherOps {

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static OtherOps swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + OtherOps.class + " with value " + swigValue);
    }

    private OtherOps(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private OtherOps(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private OtherOps(String swigName, OtherOps swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static OtherOps[] swigValues = {  };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
