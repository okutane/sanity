/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class BranchInst {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected BranchInst(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BranchInst obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bitreaderJNI.delete_BranchInst(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static BranchInst Create(BasicBlock IfTrue, Instruction InsertBefore) {
    long cPtr = bitreaderJNI.BranchInst_Create__SWIG_0(BasicBlock.getCPtr(IfTrue), IfTrue, Instruction.getCPtr(InsertBefore), InsertBefore);
    return (cPtr == 0) ? null : new BranchInst(cPtr, false);
  }

  public static BranchInst Create(BasicBlock IfTrue) {
    long cPtr = bitreaderJNI.BranchInst_Create__SWIG_1(BasicBlock.getCPtr(IfTrue), IfTrue);
    return (cPtr == 0) ? null : new BranchInst(cPtr, false);
  }

  public static BranchInst Create(BasicBlock IfTrue, BasicBlock IfFalse, Value Cond, Instruction InsertBefore) {
    long cPtr = bitreaderJNI.BranchInst_Create__SWIG_2(BasicBlock.getCPtr(IfTrue), IfTrue, BasicBlock.getCPtr(IfFalse), IfFalse, Value.getCPtr(Cond), Cond, Instruction.getCPtr(InsertBefore), InsertBefore);
    return (cPtr == 0) ? null : new BranchInst(cPtr, false);
  }

  public static BranchInst Create(BasicBlock IfTrue, BasicBlock IfFalse, Value Cond) {
    long cPtr = bitreaderJNI.BranchInst_Create__SWIG_3(BasicBlock.getCPtr(IfTrue), IfTrue, BasicBlock.getCPtr(IfFalse), IfFalse, Value.getCPtr(Cond), Cond);
    return (cPtr == 0) ? null : new BranchInst(cPtr, false);
  }

  public static BranchInst Create(BasicBlock IfTrue, BasicBlock InsertAtEnd) {
    long cPtr = bitreaderJNI.BranchInst_Create__SWIG_4(BasicBlock.getCPtr(IfTrue), IfTrue, BasicBlock.getCPtr(InsertAtEnd), InsertAtEnd);
    return (cPtr == 0) ? null : new BranchInst(cPtr, false);
  }

  public static BranchInst Create(BasicBlock IfTrue, BasicBlock IfFalse, Value Cond, BasicBlock InsertAtEnd) {
    long cPtr = bitreaderJNI.BranchInst_Create__SWIG_5(BasicBlock.getCPtr(IfTrue), IfTrue, BasicBlock.getCPtr(IfFalse), IfFalse, Value.getCPtr(Cond), Cond, BasicBlock.getCPtr(InsertAtEnd), InsertAtEnd);
    return (cPtr == 0) ? null : new BranchInst(cPtr, false);
  }

  public boolean isUnconditional() {
    return bitreaderJNI.BranchInst_isUnconditional(swigCPtr, this);
  }

  public boolean isConditional() {
    return bitreaderJNI.BranchInst_isConditional(swigCPtr, this);
  }

  public Value getCondition() {
    long cPtr = bitreaderJNI.BranchInst_getCondition(swigCPtr, this);
    return (cPtr == 0) ? null : new Value(cPtr, false);
  }

  public void setCondition(Value V) {
    bitreaderJNI.BranchInst_setCondition(swigCPtr, this, Value.getCPtr(V), V);
  }

  public long getNumSuccessors() {
    return bitreaderJNI.BranchInst_getNumSuccessors(swigCPtr, this);
  }

  public BasicBlock getSuccessor(long i) {
    long cPtr = bitreaderJNI.BranchInst_getSuccessor(swigCPtr, this, i);
    return (cPtr == 0) ? null : new BasicBlock(cPtr, false);
  }

  public void setSuccessor(long idx, BasicBlock NewSucc) {
    bitreaderJNI.BranchInst_setSuccessor(swigCPtr, this, idx, BasicBlock.getCPtr(NewSucc), NewSucc);
  }

  public void swapSuccessors() {
    bitreaderJNI.BranchInst_swapSuccessors(swigCPtr, this);
  }

  public static boolean classof(Instruction I) {
    return bitreaderJNI.BranchInst_classof__SWIG_0(Instruction.getCPtr(I), I);
  }

  public static boolean classof(Value V) {
    return bitreaderJNI.BranchInst_classof__SWIG_1(Value.getCPtr(V), V);
  }

}
