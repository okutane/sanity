/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class bitreader {
  public static boolean getAsUnsignedInteger(StringRef Str, long Radix, SWIGTYPE_p_unsigned_long_long Result) {
    return bitreaderJNI.getAsUnsignedInteger(StringRef.getCPtr(Str), Str, Radix, SWIGTYPE_p_unsigned_long_long.getCPtr(Result));
  }

  public static boolean getAsSignedInteger(StringRef Str, long Radix, SWIGTYPE_p_long_long Result) {
    return bitreaderJNI.getAsSignedInteger(StringRef.getCPtr(Str), Str, Radix, SWIGTYPE_p_long_long.getCPtr(Result));
  }

  public static SWIGTYPE_p_llvm__hash_code hash_value(StringRef S) {
    return new SWIGTYPE_p_llvm__hash_code(bitreaderJNI.hash_value__SWIG_0(StringRef.getCPtr(S), S), true);
  }

  public static long getHost_char_bit() {
    return bitreaderJNI.host_char_bit_get();
  }

  public static long getIntegerPartWidth() {
    return bitreaderJNI.integerPartWidth_get();
  }

  public static APInt smin(APInt A, APInt B) {
    return new APInt(bitreaderJNI.smin(APInt.getCPtr(A), A, APInt.getCPtr(B), B), true);
  }

  public static APInt smax(APInt A, APInt B) {
    return new APInt(bitreaderJNI.smax(APInt.getCPtr(A), A, APInt.getCPtr(B), B), true);
  }

  public static APInt umin(APInt A, APInt B) {
    return new APInt(bitreaderJNI.umin(APInt.getCPtr(A), A, APInt.getCPtr(B), B), true);
  }

  public static APInt umax(APInt A, APInt B) {
    return new APInt(bitreaderJNI.umax(APInt.getCPtr(A), A, APInt.getCPtr(B), B), true);
  }

  public static boolean isIntN(long N, APInt APIVal) {
    return bitreaderJNI.isIntN(N, APInt.getCPtr(APIVal), APIVal);
  }

  public static boolean isSignedIntN(long N, APInt APIVal) {
    return bitreaderJNI.isSignedIntN(N, APInt.getCPtr(APIVal), APIVal);
  }

  public static boolean isMask(long numBits, APInt APIVal) {
    return bitreaderJNI.isMask(numBits, APInt.getCPtr(APIVal), APIVal);
  }

  public static boolean isShiftedMask(long numBits, APInt APIVal) {
    return bitreaderJNI.isShiftedMask(numBits, APInt.getCPtr(APIVal), APIVal);
  }

  public static APInt byteSwap(APInt APIVal) {
    return new APInt(bitreaderJNI.byteSwap(APInt.getCPtr(APIVal), APIVal), true);
  }

  public static long logBase2(APInt APIVal) {
    return bitreaderJNI.logBase2(APInt.getCPtr(APIVal), APIVal);
  }

  public static APInt GreatestCommonDivisor(APInt Val1, APInt Val2) {
    return new APInt(bitreaderJNI.GreatestCommonDivisor(APInt.getCPtr(Val1), Val1, APInt.getCPtr(Val2), Val2), true);
  }

  public static double RoundAPIntToDouble(APInt APIVal) {
    return bitreaderJNI.RoundAPIntToDouble(APInt.getCPtr(APIVal), APIVal);
  }

  public static double RoundSignedAPIntToDouble(APInt APIVal) {
    return bitreaderJNI.RoundSignedAPIntToDouble(APInt.getCPtr(APIVal), APIVal);
  }

  public static float RoundAPIntToFloat(APInt APIVal) {
    return bitreaderJNI.RoundAPIntToFloat(APInt.getCPtr(APIVal), APIVal);
  }

  public static float RoundSignedAPIntToFloat(APInt APIVal) {
    return bitreaderJNI.RoundSignedAPIntToFloat(APInt.getCPtr(APIVal), APIVal);
  }

  public static APInt RoundDoubleToAPInt(double Double, long width) {
    return new APInt(bitreaderJNI.RoundDoubleToAPInt(Double, width), true);
  }

  public static APInt RoundFloatToAPInt(float Float, long width) {
    return new APInt(bitreaderJNI.RoundFloatToAPInt(Float, width), true);
  }

  public static APInt ashr(APInt LHS, long shiftAmt) {
    return new APInt(bitreaderJNI.ashr(APInt.getCPtr(LHS), LHS, shiftAmt), true);
  }

  public static APInt lshr(APInt LHS, long shiftAmt) {
    return new APInt(bitreaderJNI.lshr(APInt.getCPtr(LHS), LHS, shiftAmt), true);
  }

  public static APInt shl(APInt LHS, long shiftAmt) {
    return new APInt(bitreaderJNI.shl(APInt.getCPtr(LHS), LHS, shiftAmt), true);
  }

  public static APInt sdiv(APInt LHS, APInt RHS) {
    return new APInt(bitreaderJNI.sdiv(APInt.getCPtr(LHS), LHS, APInt.getCPtr(RHS), RHS), true);
  }

  public static APInt udiv(APInt LHS, APInt RHS) {
    return new APInt(bitreaderJNI.udiv(APInt.getCPtr(LHS), LHS, APInt.getCPtr(RHS), RHS), true);
  }

  public static APInt srem(APInt LHS, APInt RHS) {
    return new APInt(bitreaderJNI.srem(APInt.getCPtr(LHS), LHS, APInt.getCPtr(RHS), RHS), true);
  }

  public static APInt urem(APInt LHS, APInt RHS) {
    return new APInt(bitreaderJNI.urem(APInt.getCPtr(LHS), LHS, APInt.getCPtr(RHS), RHS), true);
  }

  public static APInt mul(APInt LHS, APInt RHS) {
    return new APInt(bitreaderJNI.mul(APInt.getCPtr(LHS), LHS, APInt.getCPtr(RHS), RHS), true);
  }

  public static APInt add(APInt LHS, APInt RHS) {
    return new APInt(bitreaderJNI.add(APInt.getCPtr(LHS), LHS, APInt.getCPtr(RHS), RHS), true);
  }

  public static APInt sub(APInt LHS, APInt RHS) {
    return new APInt(bitreaderJNI.sub(APInt.getCPtr(LHS), LHS, APInt.getCPtr(RHS), RHS), true);
  }

  public static APInt And(APInt LHS, APInt RHS) {
    return new APInt(bitreaderJNI.And(APInt.getCPtr(LHS), LHS, APInt.getCPtr(RHS), RHS), true);
  }

  public static APInt Or(APInt LHS, APInt RHS) {
    return new APInt(bitreaderJNI.Or(APInt.getCPtr(LHS), LHS, APInt.getCPtr(RHS), RHS), true);
  }

  public static APInt Xor(APInt LHS, APInt RHS) {
    return new APInt(bitreaderJNI.Xor(APInt.getCPtr(LHS), LHS, APInt.getCPtr(RHS), RHS), true);
  }

  public static APInt Not(APInt APIVal) {
    return new APInt(bitreaderJNI.Not(APInt.getCPtr(APIVal), APIVal), true);
  }

  public static SWIGTYPE_p_llvm__hash_code hash_value(APInt Arg) {
    return new SWIGTYPE_p_llvm__hash_code(bitreaderJNI.hash_value__SWIG_1(APInt.getCPtr(Arg), Arg), true);
  }

  public static LLVMContext getGlobalContext() {
    return new LLVMContext(bitreaderJNI.getGlobalContext(), false);
  }

  public static SWIGTYPE_p_p_llvm__LLVMContext unwrap(SWIGTYPE_p_LLVMContextRef Tys) {
    long cPtr = bitreaderJNI.unwrap__SWIG_0(SWIGTYPE_p_LLVMContextRef.getCPtr(Tys));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_llvm__LLVMContext(cPtr, false);
  }

  public static SWIGTYPE_p_LLVMContextRef wrap(SWIGTYPE_p_p_llvm__LLVMContext Tys) {
    long cPtr = bitreaderJNI.wrap__SWIG_0(SWIGTYPE_p_p_llvm__LLVMContext.getCPtr(Tys));
    return (cPtr == 0) ? null : new SWIGTYPE_p_LLVMContextRef(cPtr, false);
  }

  public static SWIGTYPE_p_p_llvm__Type unwrap(SWIGTYPE_p_LLVMTypeRef Tys) {
    long cPtr = bitreaderJNI.unwrap__SWIG_1(SWIGTYPE_p_LLVMTypeRef.getCPtr(Tys));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_llvm__Type(cPtr, false);
  }

  public static SWIGTYPE_p_LLVMTypeRef wrap(SWIGTYPE_p_p_llvm__Type Tys) {
    long cPtr = bitreaderJNI.wrap__SWIG_1(SWIGTYPE_p_p_llvm__Type.getCPtr(Tys));
    return (cPtr == 0) ? null : new SWIGTYPE_p_LLVMTypeRef(cPtr, false);
  }

  public static SWIGTYPE_p_p_llvm__Value unwrap(SWIGTYPE_p_LLVMValueRef Vals) {
    long cPtr = bitreaderJNI.unwrap__SWIG_2(SWIGTYPE_p_LLVMValueRef.getCPtr(Vals));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_llvm__Value(cPtr, false);
  }

  public static SWIGTYPE_p_LLVMValueRef wrap(SWIGTYPE_p_p_llvm__Value Vals) {
    long cPtr = bitreaderJNI.wrap__SWIG_2(SWIGTYPE_p_p_llvm__Value.getCPtr(Vals));
    return (cPtr == 0) ? null : new SWIGTYPE_p_LLVMValueRef(cPtr, false);
  }

  public static Type checkGEPType(Type Ty) {
    long cPtr = bitreaderJNI.checkGEPType(Type.getCPtr(Ty), Ty);
    return (cPtr == 0) ? null : new Type(cPtr, false);
  }

  public static Module unwrap(SWIGTYPE_p_LLVMModuleProviderRef MP) {
    long cPtr = bitreaderJNI.unwrap__SWIG_4(SWIGTYPE_p_LLVMModuleProviderRef.getCPtr(MP));
    return (cPtr == 0) ? null : new Module(cPtr, false);
  }

  public static Module getLazyIRModule(SWIGTYPE_p_llvm__MemoryBuffer Buffer, SWIGTYPE_p_llvm__SMDiagnostic Err, LLVMContext Context) {
    long cPtr = bitreaderJNI.getLazyIRModule(SWIGTYPE_p_llvm__MemoryBuffer.getCPtr(Buffer), SWIGTYPE_p_llvm__SMDiagnostic.getCPtr(Err), LLVMContext.getCPtr(Context), Context);
    return (cPtr == 0) ? null : new Module(cPtr, false);
  }

  public static Module getLazyIRFileModule(String Filename, SWIGTYPE_p_llvm__SMDiagnostic Err, LLVMContext Context) {
    long cPtr = bitreaderJNI.getLazyIRFileModule(Filename, SWIGTYPE_p_llvm__SMDiagnostic.getCPtr(Err), LLVMContext.getCPtr(Context), Context);
    return (cPtr == 0) ? null : new Module(cPtr, false);
  }

  public static Module ParseIR(SWIGTYPE_p_llvm__MemoryBuffer Buffer, SWIGTYPE_p_llvm__SMDiagnostic Err, LLVMContext Context) {
    long cPtr = bitreaderJNI.ParseIR(SWIGTYPE_p_llvm__MemoryBuffer.getCPtr(Buffer), SWIGTYPE_p_llvm__SMDiagnostic.getCPtr(Err), LLVMContext.getCPtr(Context), Context);
    return (cPtr == 0) ? null : new Module(cPtr, false);
  }

  public static Module ParseIRFile(String Filename, SWIGTYPE_p_llvm__SMDiagnostic Err, LLVMContext Context) {
    long cPtr = bitreaderJNI.ParseIRFile(Filename, SWIGTYPE_p_llvm__SMDiagnostic.getCPtr(Err), LLVMContext.getCPtr(Context), Context);
    return (cPtr == 0) ? null : new Module(cPtr, false);
  }

  public static Module parse(String filename) {
    long cPtr = bitreaderJNI.parse(filename);
    return (cPtr == 0) ? null : new Module(cPtr, false);
  }

  public static String getName(GlobalValue gv) {
    return bitreaderJNI.getName(GlobalValue.getCPtr(gv), gv);
  }

  public static int getModuleFunctionsSize(Module o) {
    return bitreaderJNI.getModuleFunctionsSize(Module.getCPtr(o), o);
  }

  public static Function getModuleFunctionsItem(Module o, int index) {
    long cPtr = bitreaderJNI.getModuleFunctionsItem(Module.getCPtr(o), o, index);
    return (cPtr == 0) ? null : new Function(cPtr, false);
  }

  public static int getBasicBlockInstructionsSize(BasicBlock o) {
    return bitreaderJNI.getBasicBlockInstructionsSize(BasicBlock.getCPtr(o), o);
  }

  public static Instruction getBasicBlockInstructionsItem(BasicBlock o, int index) {
    long cPtr = bitreaderJNI.getBasicBlockInstructionsItem(BasicBlock.getCPtr(o), o, index);
    return (cPtr == 0) ? null : new Instruction(cPtr, false);
  }

  public static MDNode toMDNode(Value arg0) {
    long cPtr = bitreaderJNI.toMDNode(Value.getCPtr(arg0), arg0);
    return (cPtr == 0) ? null : new MDNode(cPtr, false);
  }

  public static MDString toMDString(Value arg0) {
    long cPtr = bitreaderJNI.toMDString(Value.getCPtr(arg0), arg0);
    return (cPtr == 0) ? null : new MDString(cPtr, false);
  }

  public static ConstantInt toConstantInt(Value arg0) {
    long cPtr = bitreaderJNI.toConstantInt(Value.getCPtr(arg0), arg0);
    return (cPtr == 0) ? null : new ConstantInt(cPtr, false);
  }

  public static GlobalVariable toGlobalVariable(Value arg0) {
    long cPtr = bitreaderJNI.toGlobalVariable(Value.getCPtr(arg0), arg0);
    return (cPtr == 0) ? null : new GlobalVariable(cPtr, false);
  }

  public static Instruction toInstruction(Value arg0) {
    long cPtr = bitreaderJNI.toInstruction(Value.getCPtr(arg0), arg0);
    return (cPtr == 0) ? null : new Instruction(cPtr, false);
  }

  public static StoreInst toStoreInst(Instruction arg0) {
    long cPtr = bitreaderJNI.toStoreInst(Instruction.getCPtr(arg0), arg0);
    return (cPtr == 0) ? null : new StoreInst(cPtr, false);
  }

}
