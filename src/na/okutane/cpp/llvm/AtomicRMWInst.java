/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class AtomicRMWInst extends Instruction {
  private long swigCPtr;

  protected AtomicRMWInst(long cPtr, boolean cMemoryOwn) {
    super(bitreaderJNI.AtomicRMWInst_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AtomicRMWInst obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bitreaderJNI.delete_AtomicRMWInst(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public AtomicRMWInst.BinOp getOperation() {
    return AtomicRMWInst.BinOp.swigToEnum(bitreaderJNI.AtomicRMWInst_getOperation(swigCPtr, this));
  }

  public void setOperation(AtomicRMWInst.BinOp Operation) {
    bitreaderJNI.AtomicRMWInst_setOperation(swigCPtr, this, Operation.swigValue());
  }

  public boolean isVolatile() {
    return bitreaderJNI.AtomicRMWInst_isVolatile(swigCPtr, this);
  }

  public void setVolatile(boolean V) {
    bitreaderJNI.AtomicRMWInst_setVolatile(swigCPtr, this, V);
  }

  public void setOrdering(AtomicOrdering Ordering) {
    bitreaderJNI.AtomicRMWInst_setOrdering(swigCPtr, this, Ordering.swigValue());
  }

  public void setSynchScope(SynchronizationScope SynchScope) {
    bitreaderJNI.AtomicRMWInst_setSynchScope(swigCPtr, this, SynchScope.swigValue());
  }

  public AtomicOrdering getOrdering() {
    return AtomicOrdering.swigToEnum(bitreaderJNI.AtomicRMWInst_getOrdering(swigCPtr, this));
  }

  public SynchronizationScope getSynchScope() {
    return SynchronizationScope.swigToEnum(bitreaderJNI.AtomicRMWInst_getSynchScope(swigCPtr, this));
  }

  public Value getPointerOperand() {
    long cPtr = bitreaderJNI.AtomicRMWInst_getPointerOperand__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Value(cPtr, false);
  }

  public static long getPointerOperandIndex() {
    return bitreaderJNI.AtomicRMWInst_getPointerOperandIndex();
  }

  public Value getValOperand() {
    long cPtr = bitreaderJNI.AtomicRMWInst_getValOperand__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Value(cPtr, false);
  }

  public long getPointerAddressSpace() {
    return bitreaderJNI.AtomicRMWInst_getPointerAddressSpace(swigCPtr, this);
  }

  public static boolean classof(Instruction I) {
    return bitreaderJNI.AtomicRMWInst_classof__SWIG_0(Instruction.getCPtr(I), I);
  }

  public static boolean classof(Value V) {
    return bitreaderJNI.AtomicRMWInst_classof__SWIG_1(Value.getCPtr(V), V);
  }

  public final static class BinOp {
    public final static AtomicRMWInst.BinOp Xchg = new AtomicRMWInst.BinOp("Xchg");
    public final static AtomicRMWInst.BinOp Add = new AtomicRMWInst.BinOp("Add");
    public final static AtomicRMWInst.BinOp Sub = new AtomicRMWInst.BinOp("Sub");
    public final static AtomicRMWInst.BinOp And = new AtomicRMWInst.BinOp("And");
    public final static AtomicRMWInst.BinOp Nand = new AtomicRMWInst.BinOp("Nand");
    public final static AtomicRMWInst.BinOp Or = new AtomicRMWInst.BinOp("Or");
    public final static AtomicRMWInst.BinOp Xor = new AtomicRMWInst.BinOp("Xor");
    public final static AtomicRMWInst.BinOp Max = new AtomicRMWInst.BinOp("Max");
    public final static AtomicRMWInst.BinOp Min = new AtomicRMWInst.BinOp("Min");
    public final static AtomicRMWInst.BinOp UMax = new AtomicRMWInst.BinOp("UMax");
    public final static AtomicRMWInst.BinOp UMin = new AtomicRMWInst.BinOp("UMin");
    public final static AtomicRMWInst.BinOp FIRST_BINOP = new AtomicRMWInst.BinOp("FIRST_BINOP", bitreaderJNI.AtomicRMWInst_FIRST_BINOP_get());
    public final static AtomicRMWInst.BinOp LAST_BINOP = new AtomicRMWInst.BinOp("LAST_BINOP", bitreaderJNI.AtomicRMWInst_LAST_BINOP_get());
    public final static AtomicRMWInst.BinOp BAD_BINOP = new AtomicRMWInst.BinOp("BAD_BINOP");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static BinOp swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + BinOp.class + " with value " + swigValue);
    }

    private BinOp(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private BinOp(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private BinOp(String swigName, BinOp swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static BinOp[] swigValues = { Xchg, Add, Sub, And, Nand, Or, Xor, Max, Min, UMax, UMin, FIRST_BINOP, LAST_BINOP, BAD_BINOP };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
