/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class GlobalVariable extends GlobalValue {
  private long swigCPtr;

  protected GlobalVariable(long cPtr, boolean cMemoryOwn) {
    super(bitreaderJNI.GlobalVariable_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GlobalVariable obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bitreaderJNI.delete_GlobalVariable(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public boolean hasInitializer() {
    return bitreaderJNI.GlobalVariable_hasInitializer(swigCPtr, this);
  }

  public boolean hasDefinitiveInitializer() {
    return bitreaderJNI.GlobalVariable_hasDefinitiveInitializer(swigCPtr, this);
  }

  public boolean hasUniqueInitializer() {
    return bitreaderJNI.GlobalVariable_hasUniqueInitializer(swigCPtr, this);
  }

  public Constant getInitializer() {
    long cPtr = bitreaderJNI.GlobalVariable_getInitializer__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Constant(cPtr, false);
  }

  public void setInitializer(Constant InitVal) {
    bitreaderJNI.GlobalVariable_setInitializer(swigCPtr, this, Constant.getCPtr(InitVal), InitVal);
  }

  public boolean isConstant() {
    return bitreaderJNI.GlobalVariable_isConstant(swigCPtr, this);
  }

  public void setConstant(boolean Val) {
    bitreaderJNI.GlobalVariable_setConstant(swigCPtr, this, Val);
  }

  public boolean isThreadLocal() {
    return bitreaderJNI.GlobalVariable_isThreadLocal(swigCPtr, this);
  }

  public void setThreadLocal(boolean Val) {
    bitreaderJNI.GlobalVariable_setThreadLocal(swigCPtr, this, Val);
  }

  public void setThreadLocalMode(GlobalVariable.ThreadLocalMode Val) {
    bitreaderJNI.GlobalVariable_setThreadLocalMode(swigCPtr, this, Val.swigValue());
  }

  public GlobalVariable.ThreadLocalMode getThreadLocalMode() {
    return GlobalVariable.ThreadLocalMode.swigToEnum(bitreaderJNI.GlobalVariable_getThreadLocalMode(swigCPtr, this));
  }

  public boolean isExternallyInitialized() {
    return bitreaderJNI.GlobalVariable_isExternallyInitialized(swigCPtr, this);
  }

  public void setExternallyInitialized(boolean Val) {
    bitreaderJNI.GlobalVariable_setExternallyInitialized(swigCPtr, this, Val);
  }

  public void copyAttributesFrom(GlobalValue Src) {
    bitreaderJNI.GlobalVariable_copyAttributesFrom(swigCPtr, this, GlobalValue.getCPtr(Src), Src);
  }

  public void removeFromParent() {
    bitreaderJNI.GlobalVariable_removeFromParent(swigCPtr, this);
  }

  public void eraseFromParent() {
    bitreaderJNI.GlobalVariable_eraseFromParent(swigCPtr, this);
  }

  public void replaceUsesOfWithOnConstant(Value From, Value To, SWIGTYPE_p_Use U) {
    bitreaderJNI.GlobalVariable_replaceUsesOfWithOnConstant(swigCPtr, this, Value.getCPtr(From), From, Value.getCPtr(To), To, SWIGTYPE_p_Use.getCPtr(U));
  }

  public static boolean classof(Value V) {
    return bitreaderJNI.GlobalVariable_classof(Value.getCPtr(V), V);
  }

  public final static class ThreadLocalMode {
    public final static GlobalVariable.ThreadLocalMode NotThreadLocal = new GlobalVariable.ThreadLocalMode("NotThreadLocal", bitreaderJNI.GlobalVariable_NotThreadLocal_get());
    public final static GlobalVariable.ThreadLocalMode GeneralDynamicTLSModel = new GlobalVariable.ThreadLocalMode("GeneralDynamicTLSModel");
    public final static GlobalVariable.ThreadLocalMode LocalDynamicTLSModel = new GlobalVariable.ThreadLocalMode("LocalDynamicTLSModel");
    public final static GlobalVariable.ThreadLocalMode InitialExecTLSModel = new GlobalVariable.ThreadLocalMode("InitialExecTLSModel");
    public final static GlobalVariable.ThreadLocalMode LocalExecTLSModel = new GlobalVariable.ThreadLocalMode("LocalExecTLSModel");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ThreadLocalMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ThreadLocalMode.class + " with value " + swigValue);
    }

    private ThreadLocalMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ThreadLocalMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ThreadLocalMode(String swigName, ThreadLocalMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ThreadLocalMode[] swigValues = { NotThreadLocal, GeneralDynamicTLSModel, LocalDynamicTLSModel, InitialExecTLSModel, LocalExecTLSModel };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
