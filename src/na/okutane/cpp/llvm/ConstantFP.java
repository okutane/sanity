/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class ConstantFP extends Constant {
  private long swigCPtr;

  protected ConstantFP(long cPtr, boolean cMemoryOwn) {
    super(bitreaderJNI.ConstantFP_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ConstantFP obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bitreaderJNI.delete_ConstantFP(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Constant getZeroValueForNegation(Type Ty) {
    long cPtr = bitreaderJNI.ConstantFP_getZeroValueForNegation(Type.getCPtr(Ty), Ty);
    return (cPtr == 0) ? null : new Constant(cPtr, false);
  }

  public static Constant get(Type Ty, double V) {
    long cPtr = bitreaderJNI.ConstantFP_get__SWIG_0(Type.getCPtr(Ty), Ty, V);
    return (cPtr == 0) ? null : new Constant(cPtr, false);
  }

  public static Constant get(Type Ty, StringRef Str) {
    long cPtr = bitreaderJNI.ConstantFP_get__SWIG_1(Type.getCPtr(Ty), Ty, StringRef.getCPtr(Str), Str);
    return (cPtr == 0) ? null : new Constant(cPtr, false);
  }

  public static ConstantFP get(LLVMContext Context, SWIGTYPE_p_APFloat V) {
    long cPtr = bitreaderJNI.ConstantFP_get__SWIG_2(LLVMContext.getCPtr(Context), Context, SWIGTYPE_p_APFloat.getCPtr(V));
    return (cPtr == 0) ? null : new ConstantFP(cPtr, false);
  }

  public static ConstantFP getNegativeZero(Type Ty) {
    long cPtr = bitreaderJNI.ConstantFP_getNegativeZero(Type.getCPtr(Ty), Ty);
    return (cPtr == 0) ? null : new ConstantFP(cPtr, false);
  }

  public static ConstantFP getInfinity(Type Ty, boolean Negative) {
    long cPtr = bitreaderJNI.ConstantFP_getInfinity__SWIG_0(Type.getCPtr(Ty), Ty, Negative);
    return (cPtr == 0) ? null : new ConstantFP(cPtr, false);
  }

  public static ConstantFP getInfinity(Type Ty) {
    long cPtr = bitreaderJNI.ConstantFP_getInfinity__SWIG_1(Type.getCPtr(Ty), Ty);
    return (cPtr == 0) ? null : new ConstantFP(cPtr, false);
  }

  public static boolean isValueValidForType(Type Ty, SWIGTYPE_p_APFloat V) {
    return bitreaderJNI.ConstantFP_isValueValidForType(Type.getCPtr(Ty), Ty, SWIGTYPE_p_APFloat.getCPtr(V));
  }

  public SWIGTYPE_p_APFloat getValueAPF() {
    return new SWIGTYPE_p_APFloat(bitreaderJNI.ConstantFP_getValueAPF(swigCPtr, this), false);
  }

  public boolean isZero() {
    return bitreaderJNI.ConstantFP_isZero(swigCPtr, this);
  }

  public boolean isNegative() {
    return bitreaderJNI.ConstantFP_isNegative(swigCPtr, this);
  }

  public boolean isNaN() {
    return bitreaderJNI.ConstantFP_isNaN(swigCPtr, this);
  }

  public boolean isExactlyValue(SWIGTYPE_p_APFloat V) {
    return bitreaderJNI.ConstantFP_isExactlyValue__SWIG_0(swigCPtr, this, SWIGTYPE_p_APFloat.getCPtr(V));
  }

  public boolean isExactlyValue(double V) {
    return bitreaderJNI.ConstantFP_isExactlyValue__SWIG_1(swigCPtr, this, V);
  }

  public static boolean classof(Value V) {
    return bitreaderJNI.ConstantFP_classof(Value.getCPtr(V), V);
  }

}
