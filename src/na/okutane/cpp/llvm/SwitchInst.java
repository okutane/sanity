/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class SwitchInst {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected SwitchInst(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SwitchInst obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bitreaderJNI.delete_SwitchInst(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static SwitchInst Create(Value Value, BasicBlock Default, long NumCases, Instruction InsertBefore) {
    long cPtr = bitreaderJNI.SwitchInst_Create__SWIG_0(Value.getCPtr(Value), Value, BasicBlock.getCPtr(Default), Default, NumCases, Instruction.getCPtr(InsertBefore), InsertBefore);
    return (cPtr == 0) ? null : new SwitchInst(cPtr, false);
  }

  public static SwitchInst Create(Value Value, BasicBlock Default, long NumCases) {
    long cPtr = bitreaderJNI.SwitchInst_Create__SWIG_1(Value.getCPtr(Value), Value, BasicBlock.getCPtr(Default), Default, NumCases);
    return (cPtr == 0) ? null : new SwitchInst(cPtr, false);
  }

  public static SwitchInst Create(Value Value, BasicBlock Default, long NumCases, BasicBlock InsertAtEnd) {
    long cPtr = bitreaderJNI.SwitchInst_Create__SWIG_2(Value.getCPtr(Value), Value, BasicBlock.getCPtr(Default), Default, NumCases, BasicBlock.getCPtr(InsertAtEnd), InsertAtEnd);
    return (cPtr == 0) ? null : new SwitchInst(cPtr, false);
  }

  public Value getCondition() {
    long cPtr = bitreaderJNI.SwitchInst_getCondition(swigCPtr, this);
    return (cPtr == 0) ? null : new Value(cPtr, false);
  }

  public void setCondition(Value V) {
    bitreaderJNI.SwitchInst_setCondition(swigCPtr, this, Value.getCPtr(V), V);
  }

  public BasicBlock getDefaultDest() {
    long cPtr = bitreaderJNI.SwitchInst_getDefaultDest(swigCPtr, this);
    return (cPtr == 0) ? null : new BasicBlock(cPtr, false);
  }

  public void setDefaultDest(BasicBlock DefaultCase) {
    bitreaderJNI.SwitchInst_setDefaultDest(swigCPtr, this, BasicBlock.getCPtr(DefaultCase), DefaultCase);
  }

  public long getNumCases() {
    return bitreaderJNI.SwitchInst_getNumCases(swigCPtr, this);
  }

  public SwitchInst.CaseIt case_begin() {
    return new SwitchInst.CaseIt(bitreaderJNI.SwitchInst_case_begin__SWIG_0(swigCPtr, this), true);
  }

  public SwitchInst.CaseIt case_end() {
    return new SwitchInst.CaseIt(bitreaderJNI.SwitchInst_case_end__SWIG_0(swigCPtr, this), true);
  }

  public SwitchInst.CaseIt case_default() {
    return new SwitchInst.CaseIt(bitreaderJNI.SwitchInst_case_default__SWIG_0(swigCPtr, this), true);
  }

  public SwitchInst.CaseIt findCaseValue(ConstantInt C) {
    return new SwitchInst.CaseIt(bitreaderJNI.SwitchInst_findCaseValue__SWIG_0(swigCPtr, this, ConstantInt.getCPtr(C), C), true);
  }

  public ConstantInt findCaseDest(BasicBlock BB) {
    long cPtr = bitreaderJNI.SwitchInst_findCaseDest(swigCPtr, this, BasicBlock.getCPtr(BB), BB);
    return (cPtr == 0) ? null : new ConstantInt(cPtr, false);
  }

  public void addCase(ConstantInt OnVal, BasicBlock Dest) {
    bitreaderJNI.SwitchInst_addCase__SWIG_0(swigCPtr, this, ConstantInt.getCPtr(OnVal), OnVal, BasicBlock.getCPtr(Dest), Dest);
  }

  public void addCase(SWIGTYPE_p_IntegersSubset OnVal, BasicBlock Dest) {
    bitreaderJNI.SwitchInst_addCase__SWIG_1(swigCPtr, this, SWIGTYPE_p_IntegersSubset.getCPtr(OnVal), BasicBlock.getCPtr(Dest), Dest);
  }

  public void removeCase(SwitchInst.CaseIt i) {
    bitreaderJNI.SwitchInst_removeCase(swigCPtr, this, SwitchInst.CaseIt.getCPtr(i), i);
  }

  public long getNumSuccessors() {
    return bitreaderJNI.SwitchInst_getNumSuccessors(swigCPtr, this);
  }

  public BasicBlock getSuccessor(long idx) {
    long cPtr = bitreaderJNI.SwitchInst_getSuccessor(swigCPtr, this, idx);
    return (cPtr == 0) ? null : new BasicBlock(cPtr, false);
  }

  public void setSuccessor(long idx, BasicBlock NewSucc) {
    bitreaderJNI.SwitchInst_setSuccessor(swigCPtr, this, idx, BasicBlock.getCPtr(NewSucc), NewSucc);
  }

  public SWIGTYPE_p_uint16_t hash() {
    return new SWIGTYPE_p_uint16_t(bitreaderJNI.SwitchInst_hash(swigCPtr, this), true);
  }

  static public class CaseIt {
    private long swigCPtr;
    protected boolean swigCMemOwn;
  
    protected CaseIt(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(CaseIt obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bitreaderJNI.delete_SwitchInst_CaseIt(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public CaseIt(SwitchInst SI, long CaseNum) {
      this(bitreaderJNI.new_SwitchInst_CaseIt__SWIG_1(SwitchInst.getCPtr(SI), SI, CaseNum), true);
    }
  
    public CaseIt(SWIGTYPE_p_llvm__SwitchInst__CaseIteratorTT_llvm__SwitchInst_llvm__ConstantInt_std__listT_IntegersSubset_t__iterator_llvm__BasicBlock_t Src) {
      this(bitreaderJNI.new_SwitchInst_CaseIt__SWIG_2(SWIGTYPE_p_llvm__SwitchInst__CaseIteratorTT_llvm__SwitchInst_llvm__ConstantInt_std__listT_IntegersSubset_t__iterator_llvm__BasicBlock_t.getCPtr(Src)), true);
    }
  
    public void setValue(ConstantInt V) {
      bitreaderJNI.SwitchInst_CaseIt_setValue(swigCPtr, this, ConstantInt.getCPtr(V), V);
    }
  
    public void setValueEx(SWIGTYPE_p_IntegersSubset V) {
      bitreaderJNI.SwitchInst_CaseIt_setValueEx(swigCPtr, this, SWIGTYPE_p_IntegersSubset.getCPtr(V));
    }
  
    public void setSuccessor(BasicBlock S) {
      bitreaderJNI.SwitchInst_CaseIt_setSuccessor(swigCPtr, this, BasicBlock.getCPtr(S), S);
    }
  
  }

  public static boolean classof(Instruction I) {
    return bitreaderJNI.SwitchInst_classof__SWIG_0(Instruction.getCPtr(I), I);
  }

  public static boolean classof(Value V) {
    return bitreaderJNI.SwitchInst_classof__SWIG_1(Value.getCPtr(V), V);
  }

  public final static long DefaultPseudoIndex = bitreaderJNI.SwitchInst_DefaultPseudoIndex_get();
}
