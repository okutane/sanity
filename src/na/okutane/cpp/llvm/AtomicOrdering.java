/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public final class AtomicOrdering {
  public final static AtomicOrdering NotAtomic = new AtomicOrdering("NotAtomic", bitreaderJNI.NotAtomic_get());
  public final static AtomicOrdering Unordered = new AtomicOrdering("Unordered", bitreaderJNI.Unordered_get());
  public final static AtomicOrdering Monotonic = new AtomicOrdering("Monotonic", bitreaderJNI.Monotonic_get());
  public final static AtomicOrdering Acquire = new AtomicOrdering("Acquire", bitreaderJNI.Acquire_get());
  public final static AtomicOrdering Release = new AtomicOrdering("Release", bitreaderJNI.Release_get());
  public final static AtomicOrdering AcquireRelease = new AtomicOrdering("AcquireRelease", bitreaderJNI.AcquireRelease_get());
  public final static AtomicOrdering SequentiallyConsistent = new AtomicOrdering("SequentiallyConsistent", bitreaderJNI.SequentiallyConsistent_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static AtomicOrdering swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + AtomicOrdering.class + " with value " + swigValue);
  }

  private AtomicOrdering(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private AtomicOrdering(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private AtomicOrdering(String swigName, AtomicOrdering swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static AtomicOrdering[] swigValues = { NotAtomic, Unordered, Monotonic, Acquire, Release, AcquireRelease, SequentiallyConsistent };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

