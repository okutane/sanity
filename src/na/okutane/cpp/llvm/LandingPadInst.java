/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class LandingPadInst extends Instruction {
  private long swigCPtr;

  protected LandingPadInst(long cPtr, boolean cMemoryOwn) {
    super(bitreaderJNI.LandingPadInst_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(LandingPadInst obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bitreaderJNI.delete_LandingPadInst(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static LandingPadInst Create(Type RetTy, Value PersonalityFn, long NumReservedClauses, SWIGTYPE_p_llvm__Twine NameStr, Instruction InsertBefore) {
    long cPtr = bitreaderJNI.LandingPadInst_Create__SWIG_0(Type.getCPtr(RetTy), RetTy, Value.getCPtr(PersonalityFn), PersonalityFn, NumReservedClauses, SWIGTYPE_p_llvm__Twine.getCPtr(NameStr), Instruction.getCPtr(InsertBefore), InsertBefore);
    return (cPtr == 0) ? null : new LandingPadInst(cPtr, false);
  }

  public static LandingPadInst Create(Type RetTy, Value PersonalityFn, long NumReservedClauses, SWIGTYPE_p_llvm__Twine NameStr) {
    long cPtr = bitreaderJNI.LandingPadInst_Create__SWIG_1(Type.getCPtr(RetTy), RetTy, Value.getCPtr(PersonalityFn), PersonalityFn, NumReservedClauses, SWIGTYPE_p_llvm__Twine.getCPtr(NameStr));
    return (cPtr == 0) ? null : new LandingPadInst(cPtr, false);
  }

  public static LandingPadInst Create(Type RetTy, Value PersonalityFn, long NumReservedClauses) {
    long cPtr = bitreaderJNI.LandingPadInst_Create__SWIG_2(Type.getCPtr(RetTy), RetTy, Value.getCPtr(PersonalityFn), PersonalityFn, NumReservedClauses);
    return (cPtr == 0) ? null : new LandingPadInst(cPtr, false);
  }

  public static LandingPadInst Create(Type RetTy, Value PersonalityFn, long NumReservedClauses, SWIGTYPE_p_llvm__Twine NameStr, BasicBlock InsertAtEnd) {
    long cPtr = bitreaderJNI.LandingPadInst_Create__SWIG_3(Type.getCPtr(RetTy), RetTy, Value.getCPtr(PersonalityFn), PersonalityFn, NumReservedClauses, SWIGTYPE_p_llvm__Twine.getCPtr(NameStr), BasicBlock.getCPtr(InsertAtEnd), InsertAtEnd);
    return (cPtr == 0) ? null : new LandingPadInst(cPtr, false);
  }

  public Value getPersonalityFn() {
    long cPtr = bitreaderJNI.LandingPadInst_getPersonalityFn(swigCPtr, this);
    return (cPtr == 0) ? null : new Value(cPtr, false);
  }

  public boolean isCleanup() {
    return bitreaderJNI.LandingPadInst_isCleanup(swigCPtr, this);
  }

  public void setCleanup(boolean V) {
    bitreaderJNI.LandingPadInst_setCleanup(swigCPtr, this, V);
  }

  public void addClause(Value ClauseVal) {
    bitreaderJNI.LandingPadInst_addClause(swigCPtr, this, Value.getCPtr(ClauseVal), ClauseVal);
  }

  public Value getClause(long Idx) {
    long cPtr = bitreaderJNI.LandingPadInst_getClause(swigCPtr, this, Idx);
    return (cPtr == 0) ? null : new Value(cPtr, false);
  }

  public boolean isCatch(long Idx) {
    return bitreaderJNI.LandingPadInst_isCatch(swigCPtr, this, Idx);
  }

  public boolean isFilter(long Idx) {
    return bitreaderJNI.LandingPadInst_isFilter(swigCPtr, this, Idx);
  }

  public long getNumClauses() {
    return bitreaderJNI.LandingPadInst_getNumClauses(swigCPtr, this);
  }

  public void reserveClauses(long Size) {
    bitreaderJNI.LandingPadInst_reserveClauses(swigCPtr, this, Size);
  }

  public static boolean classof(Instruction I) {
    return bitreaderJNI.LandingPadInst_classof__SWIG_0(Instruction.getCPtr(I), I);
  }

  public static boolean classof(Value V) {
    return bitreaderJNI.LandingPadInst_classof__SWIG_1(Value.getCPtr(V), V);
  }

  public final static class ClauseType {
    public final static LandingPadInst.ClauseType Catch = new LandingPadInst.ClauseType("Catch");
    public final static LandingPadInst.ClauseType Filter = new LandingPadInst.ClauseType("Filter");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ClauseType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ClauseType.class + " with value " + swigValue);
    }

    private ClauseType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ClauseType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ClauseType(String swigName, ClauseType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ClauseType[] swigValues = { Catch, Filter };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
