/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class ShuffleVectorInst extends Instruction {
  private long swigCPtr;

  protected ShuffleVectorInst(long cPtr, boolean cMemoryOwn) {
    super(bitreaderJNI.ShuffleVectorInst_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ShuffleVectorInst obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bitreaderJNI.delete_ShuffleVectorInst(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ShuffleVectorInst(Value V1, Value V2, Value Mask, SWIGTYPE_p_llvm__Twine NameStr, Instruction InsertBefor) {
    this(bitreaderJNI.new_ShuffleVectorInst__SWIG_0(Value.getCPtr(V1), V1, Value.getCPtr(V2), V2, Value.getCPtr(Mask), Mask, SWIGTYPE_p_llvm__Twine.getCPtr(NameStr), Instruction.getCPtr(InsertBefor), InsertBefor), true);
  }

  public ShuffleVectorInst(Value V1, Value V2, Value Mask, SWIGTYPE_p_llvm__Twine NameStr) {
    this(bitreaderJNI.new_ShuffleVectorInst__SWIG_1(Value.getCPtr(V1), V1, Value.getCPtr(V2), V2, Value.getCPtr(Mask), Mask, SWIGTYPE_p_llvm__Twine.getCPtr(NameStr)), true);
  }

  public ShuffleVectorInst(Value V1, Value V2, Value Mask) {
    this(bitreaderJNI.new_ShuffleVectorInst__SWIG_2(Value.getCPtr(V1), V1, Value.getCPtr(V2), V2, Value.getCPtr(Mask), Mask), true);
  }

  public ShuffleVectorInst(Value V1, Value V2, Value Mask, SWIGTYPE_p_llvm__Twine NameStr, BasicBlock InsertAtEnd) {
    this(bitreaderJNI.new_ShuffleVectorInst__SWIG_3(Value.getCPtr(V1), V1, Value.getCPtr(V2), V2, Value.getCPtr(Mask), Mask, SWIGTYPE_p_llvm__Twine.getCPtr(NameStr), BasicBlock.getCPtr(InsertAtEnd), InsertAtEnd), true);
  }

  public static boolean isValidOperands(Value V1, Value V2, Value Mask) {
    return bitreaderJNI.ShuffleVectorInst_isValidOperands(Value.getCPtr(V1), V1, Value.getCPtr(V2), V2, Value.getCPtr(Mask), Mask);
  }

  public SWIGTYPE_p_llvm__VectorType getType() {
    long cPtr = bitreaderJNI.ShuffleVectorInst_getType(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_llvm__VectorType(cPtr, false);
  }

  public Constant getMask() {
    long cPtr = bitreaderJNI.ShuffleVectorInst_getMask(swigCPtr, this);
    return (cPtr == 0) ? null : new Constant(cPtr, false);
  }

  public static int getMaskValue(Constant Mask, long i) {
    return bitreaderJNI.ShuffleVectorInst_getMaskValue__SWIG_0(Constant.getCPtr(Mask), Mask, i);
  }

  public int getMaskValue(long i) {
    return bitreaderJNI.ShuffleVectorInst_getMaskValue__SWIG_1(swigCPtr, this, i);
  }

  public static void getShuffleMask(Constant Mask, SWIGTYPE_p_llvm__SmallVectorImplT_int_t Result) {
    bitreaderJNI.ShuffleVectorInst_getShuffleMask__SWIG_0(Constant.getCPtr(Mask), Mask, SWIGTYPE_p_llvm__SmallVectorImplT_int_t.getCPtr(Result));
  }

  public void getShuffleMask(SWIGTYPE_p_llvm__SmallVectorImplT_int_t Result) {
    bitreaderJNI.ShuffleVectorInst_getShuffleMask__SWIG_1(swigCPtr, this, SWIGTYPE_p_llvm__SmallVectorImplT_int_t.getCPtr(Result));
  }

  public SWIGTYPE_p_SmallVectorT_int_16_t getShuffleMask() {
    return new SWIGTYPE_p_SmallVectorT_int_16_t(bitreaderJNI.ShuffleVectorInst_getShuffleMask__SWIG_2(swigCPtr, this), true);
  }

  public static boolean classof(Instruction I) {
    return bitreaderJNI.ShuffleVectorInst_classof__SWIG_0(Instruction.getCPtr(I), I);
  }

  public static boolean classof(Value V) {
    return bitreaderJNI.ShuffleVectorInst_classof__SWIG_1(Value.getCPtr(V), V);
  }

}
