/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class GlobalValue {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected GlobalValue(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GlobalValue obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bitreaderJNI.delete_GlobalValue(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public long getAlignment() {
    return bitreaderJNI.GlobalValue_getAlignment(swigCPtr, this);
  }

  public void setAlignment(long Align) {
    bitreaderJNI.GlobalValue_setAlignment(swigCPtr, this, Align);
  }

  public boolean hasUnnamedAddr() {
    return bitreaderJNI.GlobalValue_hasUnnamedAddr(swigCPtr, this);
  }

  public void setUnnamedAddr(boolean Val) {
    bitreaderJNI.GlobalValue_setUnnamedAddr(swigCPtr, this, Val);
  }

  public GlobalValue.VisibilityTypes getVisibility() {
    return GlobalValue.VisibilityTypes.swigToEnum(bitreaderJNI.GlobalValue_getVisibility(swigCPtr, this));
  }

  public boolean hasDefaultVisibility() {
    return bitreaderJNI.GlobalValue_hasDefaultVisibility(swigCPtr, this);
  }

  public boolean hasHiddenVisibility() {
    return bitreaderJNI.GlobalValue_hasHiddenVisibility(swigCPtr, this);
  }

  public boolean hasProtectedVisibility() {
    return bitreaderJNI.GlobalValue_hasProtectedVisibility(swigCPtr, this);
  }

  public void setVisibility(GlobalValue.VisibilityTypes V) {
    bitreaderJNI.GlobalValue_setVisibility(swigCPtr, this, V.swigValue());
  }

  public boolean hasSection() {
    return bitreaderJNI.GlobalValue_hasSection(swigCPtr, this);
  }

  public String getSection() {
    return bitreaderJNI.GlobalValue_getSection(swigCPtr, this);
  }

  public void setSection(StringRef S) {
    bitreaderJNI.GlobalValue_setSection(swigCPtr, this, StringRef.getCPtr(S), S);
  }

  public SWIGTYPE_p_llvm__PointerType getType() {
    long cPtr = bitreaderJNI.GlobalValue_getType(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_llvm__PointerType(cPtr, false);
  }

  public static GlobalValue.LinkageTypes getLinkOnceLinkage(boolean ODR) {
    return GlobalValue.LinkageTypes.swigToEnum(bitreaderJNI.GlobalValue_getLinkOnceLinkage(ODR));
  }

  public static GlobalValue.LinkageTypes getWeakLinkage(boolean ODR) {
    return GlobalValue.LinkageTypes.swigToEnum(bitreaderJNI.GlobalValue_getWeakLinkage(ODR));
  }

  public static boolean isExternalLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isExternalLinkage(Linkage.swigValue());
  }

  public static boolean isAvailableExternallyLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isAvailableExternallyLinkage(Linkage.swigValue());
  }

  public static boolean isLinkOnceLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isLinkOnceLinkage(Linkage.swigValue());
  }

  public static boolean isLinkOnceODRAutoHideLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isLinkOnceODRAutoHideLinkage(Linkage.swigValue());
  }

  public static boolean isWeakLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isWeakLinkage(Linkage.swigValue());
  }

  public static boolean isAppendingLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isAppendingLinkage(Linkage.swigValue());
  }

  public static boolean isInternalLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isInternalLinkage(Linkage.swigValue());
  }

  public static boolean isPrivateLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isPrivateLinkage(Linkage.swigValue());
  }

  public static boolean isLinkerPrivateLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isLinkerPrivateLinkage(Linkage.swigValue());
  }

  public static boolean isLinkerPrivateWeakLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isLinkerPrivateWeakLinkage(Linkage.swigValue());
  }

  public static boolean isLocalLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isLocalLinkage(Linkage.swigValue());
  }

  public static boolean isDLLImportLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isDLLImportLinkage(Linkage.swigValue());
  }

  public static boolean isDLLExportLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isDLLExportLinkage(Linkage.swigValue());
  }

  public static boolean isExternalWeakLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isExternalWeakLinkage(Linkage.swigValue());
  }

  public static boolean isCommonLinkage(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isCommonLinkage(Linkage.swigValue());
  }

  public static boolean isDiscardableIfUnused(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isDiscardableIfUnused__SWIG_0(Linkage.swigValue());
  }

  public static boolean mayBeOverridden(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_mayBeOverridden__SWIG_0(Linkage.swigValue());
  }

  public static boolean isWeakForLinker(GlobalValue.LinkageTypes Linkage) {
    return bitreaderJNI.GlobalValue_isWeakForLinker__SWIG_0(Linkage.swigValue());
  }

  public boolean hasExternalLinkage() {
    return bitreaderJNI.GlobalValue_hasExternalLinkage(swigCPtr, this);
  }

  public boolean hasAvailableExternallyLinkage() {
    return bitreaderJNI.GlobalValue_hasAvailableExternallyLinkage(swigCPtr, this);
  }

  public boolean hasLinkOnceLinkage() {
    return bitreaderJNI.GlobalValue_hasLinkOnceLinkage(swigCPtr, this);
  }

  public boolean hasLinkOnceODRAutoHideLinkage() {
    return bitreaderJNI.GlobalValue_hasLinkOnceODRAutoHideLinkage(swigCPtr, this);
  }

  public boolean hasWeakLinkage() {
    return bitreaderJNI.GlobalValue_hasWeakLinkage(swigCPtr, this);
  }

  public boolean hasAppendingLinkage() {
    return bitreaderJNI.GlobalValue_hasAppendingLinkage(swigCPtr, this);
  }

  public boolean hasInternalLinkage() {
    return bitreaderJNI.GlobalValue_hasInternalLinkage(swigCPtr, this);
  }

  public boolean hasPrivateLinkage() {
    return bitreaderJNI.GlobalValue_hasPrivateLinkage(swigCPtr, this);
  }

  public boolean hasLinkerPrivateLinkage() {
    return bitreaderJNI.GlobalValue_hasLinkerPrivateLinkage(swigCPtr, this);
  }

  public boolean hasLinkerPrivateWeakLinkage() {
    return bitreaderJNI.GlobalValue_hasLinkerPrivateWeakLinkage(swigCPtr, this);
  }

  public boolean hasLocalLinkage() {
    return bitreaderJNI.GlobalValue_hasLocalLinkage(swigCPtr, this);
  }

  public boolean hasDLLImportLinkage() {
    return bitreaderJNI.GlobalValue_hasDLLImportLinkage(swigCPtr, this);
  }

  public boolean hasDLLExportLinkage() {
    return bitreaderJNI.GlobalValue_hasDLLExportLinkage(swigCPtr, this);
  }

  public boolean hasExternalWeakLinkage() {
    return bitreaderJNI.GlobalValue_hasExternalWeakLinkage(swigCPtr, this);
  }

  public boolean hasCommonLinkage() {
    return bitreaderJNI.GlobalValue_hasCommonLinkage(swigCPtr, this);
  }

  public void setLinkage(GlobalValue.LinkageTypes LT) {
    bitreaderJNI.GlobalValue_setLinkage(swigCPtr, this, LT.swigValue());
  }

  public GlobalValue.LinkageTypes getLinkage() {
    return GlobalValue.LinkageTypes.swigToEnum(bitreaderJNI.GlobalValue_getLinkage(swigCPtr, this));
  }

  public boolean isDiscardableIfUnused() {
    return bitreaderJNI.GlobalValue_isDiscardableIfUnused__SWIG_1(swigCPtr, this);
  }

  public boolean mayBeOverridden() {
    return bitreaderJNI.GlobalValue_mayBeOverridden__SWIG_1(swigCPtr, this);
  }

  public boolean isWeakForLinker() {
    return bitreaderJNI.GlobalValue_isWeakForLinker__SWIG_1(swigCPtr, this);
  }

  public void copyAttributesFrom(GlobalValue Src) {
    bitreaderJNI.GlobalValue_copyAttributesFrom(swigCPtr, this, GlobalValue.getCPtr(Src), Src);
  }

  public boolean isMaterializable() {
    return bitreaderJNI.GlobalValue_isMaterializable(swigCPtr, this);
  }

  public boolean isDematerializable() {
    return bitreaderJNI.GlobalValue_isDematerializable(swigCPtr, this);
  }

  public boolean Materialize(SWIGTYPE_p_std__string ErrInfo) {
    return bitreaderJNI.GlobalValue_Materialize__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(ErrInfo));
  }

  public boolean Materialize() {
    return bitreaderJNI.GlobalValue_Materialize__SWIG_1(swigCPtr, this);
  }

  public void Dematerialize() {
    bitreaderJNI.GlobalValue_Dematerialize(swigCPtr, this);
  }

  public void destroyConstant() {
    bitreaderJNI.GlobalValue_destroyConstant(swigCPtr, this);
  }

  public boolean isDeclaration() {
    return bitreaderJNI.GlobalValue_isDeclaration(swigCPtr, this);
  }

  public void removeFromParent() {
    bitreaderJNI.GlobalValue_removeFromParent(swigCPtr, this);
  }

  public void eraseFromParent() {
    bitreaderJNI.GlobalValue_eraseFromParent(swigCPtr, this);
  }

  public Module getParent() {
    long cPtr = bitreaderJNI.GlobalValue_getParent__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Module(cPtr, false);
  }

  public static boolean classof(SWIGTYPE_p_llvm__Value V) {
    return bitreaderJNI.GlobalValue_classof(SWIGTYPE_p_llvm__Value.getCPtr(V));
  }

  public final static class LinkageTypes {
    public final static GlobalValue.LinkageTypes ExternalLinkage = new GlobalValue.LinkageTypes("ExternalLinkage", bitreaderJNI.GlobalValue_ExternalLinkage_get());
    public final static GlobalValue.LinkageTypes AvailableExternallyLinkage = new GlobalValue.LinkageTypes("AvailableExternallyLinkage");
    public final static GlobalValue.LinkageTypes LinkOnceAnyLinkage = new GlobalValue.LinkageTypes("LinkOnceAnyLinkage");
    public final static GlobalValue.LinkageTypes LinkOnceODRLinkage = new GlobalValue.LinkageTypes("LinkOnceODRLinkage");
    public final static GlobalValue.LinkageTypes LinkOnceODRAutoHideLinkage = new GlobalValue.LinkageTypes("LinkOnceODRAutoHideLinkage");
    public final static GlobalValue.LinkageTypes WeakAnyLinkage = new GlobalValue.LinkageTypes("WeakAnyLinkage");
    public final static GlobalValue.LinkageTypes WeakODRLinkage = new GlobalValue.LinkageTypes("WeakODRLinkage");
    public final static GlobalValue.LinkageTypes AppendingLinkage = new GlobalValue.LinkageTypes("AppendingLinkage");
    public final static GlobalValue.LinkageTypes InternalLinkage = new GlobalValue.LinkageTypes("InternalLinkage");
    public final static GlobalValue.LinkageTypes PrivateLinkage = new GlobalValue.LinkageTypes("PrivateLinkage");
    public final static GlobalValue.LinkageTypes LinkerPrivateLinkage = new GlobalValue.LinkageTypes("LinkerPrivateLinkage");
    public final static GlobalValue.LinkageTypes LinkerPrivateWeakLinkage = new GlobalValue.LinkageTypes("LinkerPrivateWeakLinkage");
    public final static GlobalValue.LinkageTypes DLLImportLinkage = new GlobalValue.LinkageTypes("DLLImportLinkage");
    public final static GlobalValue.LinkageTypes DLLExportLinkage = new GlobalValue.LinkageTypes("DLLExportLinkage");
    public final static GlobalValue.LinkageTypes ExternalWeakLinkage = new GlobalValue.LinkageTypes("ExternalWeakLinkage");
    public final static GlobalValue.LinkageTypes CommonLinkage = new GlobalValue.LinkageTypes("CommonLinkage");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static LinkageTypes swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + LinkageTypes.class + " with value " + swigValue);
    }

    private LinkageTypes(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private LinkageTypes(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private LinkageTypes(String swigName, LinkageTypes swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static LinkageTypes[] swigValues = { ExternalLinkage, AvailableExternallyLinkage, LinkOnceAnyLinkage, LinkOnceODRLinkage, LinkOnceODRAutoHideLinkage, WeakAnyLinkage, WeakODRLinkage, AppendingLinkage, InternalLinkage, PrivateLinkage, LinkerPrivateLinkage, LinkerPrivateWeakLinkage, DLLImportLinkage, DLLExportLinkage, ExternalWeakLinkage, CommonLinkage };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class VisibilityTypes {
    public final static GlobalValue.VisibilityTypes DefaultVisibility = new GlobalValue.VisibilityTypes("DefaultVisibility", bitreaderJNI.GlobalValue_DefaultVisibility_get());
    public final static GlobalValue.VisibilityTypes HiddenVisibility = new GlobalValue.VisibilityTypes("HiddenVisibility");
    public final static GlobalValue.VisibilityTypes ProtectedVisibility = new GlobalValue.VisibilityTypes("ProtectedVisibility");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static VisibilityTypes swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + VisibilityTypes.class + " with value " + swigValue);
    }

    private VisibilityTypes(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private VisibilityTypes(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private VisibilityTypes(String swigName, VisibilityTypes swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static VisibilityTypes[] swigValues = { DefaultVisibility, HiddenVisibility, ProtectedVisibility };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
