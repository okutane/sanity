/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class BlockAddress extends Constant {
  private long swigCPtr;

  protected BlockAddress(long cPtr, boolean cMemoryOwn) {
    super(bitreaderJNI.BlockAddress_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BlockAddress obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bitreaderJNI.delete_BlockAddress(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static BlockAddress get(Function F, BasicBlock BB) {
    long cPtr = bitreaderJNI.BlockAddress_get__SWIG_0(Function.getCPtr(F), F, BasicBlock.getCPtr(BB), BB);
    return (cPtr == 0) ? null : new BlockAddress(cPtr, false);
  }

  public static BlockAddress get(BasicBlock BB) {
    long cPtr = bitreaderJNI.BlockAddress_get__SWIG_1(BasicBlock.getCPtr(BB), BB);
    return (cPtr == 0) ? null : new BlockAddress(cPtr, false);
  }

  public Function getFunction() {
    long cPtr = bitreaderJNI.BlockAddress_getFunction(swigCPtr, this);
    return (cPtr == 0) ? null : new Function(cPtr, false);
  }

  public BasicBlock getBasicBlock() {
    long cPtr = bitreaderJNI.BlockAddress_getBasicBlock(swigCPtr, this);
    return (cPtr == 0) ? null : new BasicBlock(cPtr, false);
  }

  public void destroyConstant() {
    bitreaderJNI.BlockAddress_destroyConstant(swigCPtr, this);
  }

  public void replaceUsesOfWithOnConstant(Value From, Value To, SWIGTYPE_p_Use U) {
    bitreaderJNI.BlockAddress_replaceUsesOfWithOnConstant(swigCPtr, this, Value.getCPtr(From), From, Value.getCPtr(To), To, SWIGTYPE_p_Use.getCPtr(U));
  }

  public static boolean classof(Value V) {
    return bitreaderJNI.BlockAddress_classof(Value.getCPtr(V), V);
  }

}
