/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package na.okutane.cpp.llvm;

public class Value {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Value(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Value obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        bitreaderJNI.delete_Value(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void dump() {
    bitreaderJNI.Value_dump(swigCPtr, this);
  }

  public void print(SWIGTYPE_p_llvm__raw_ostream O, SWIGTYPE_p_llvm__AssemblyAnnotationWriter AAW) {
    bitreaderJNI.Value_print__SWIG_0(swigCPtr, this, SWIGTYPE_p_llvm__raw_ostream.getCPtr(O), SWIGTYPE_p_llvm__AssemblyAnnotationWriter.getCPtr(AAW));
  }

  public void print(SWIGTYPE_p_llvm__raw_ostream O) {
    bitreaderJNI.Value_print__SWIG_1(swigCPtr, this, SWIGTYPE_p_llvm__raw_ostream.getCPtr(O));
  }

  public Type getType() {
    long cPtr = bitreaderJNI.Value_getType(swigCPtr, this);
    return (cPtr == 0) ? null : new Type(cPtr, false);
  }

  public LLVMContext getContext() {
    return new LLVMContext(bitreaderJNI.Value_getContext(swigCPtr, this), false);
  }

  public boolean hasName() {
    return bitreaderJNI.Value_hasName(swigCPtr, this);
  }

  public SWIGTYPE_p_llvm__StringMapEntryT_llvm__Value_p_t getValueName() {
    long cPtr = bitreaderJNI.Value_getValueName(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_llvm__StringMapEntryT_llvm__Value_p_t(cPtr, false);
  }

  public void setValueName(SWIGTYPE_p_llvm__StringMapEntryT_llvm__Value_p_t VN) {
    bitreaderJNI.Value_setValueName(swigCPtr, this, SWIGTYPE_p_llvm__StringMapEntryT_llvm__Value_p_t.getCPtr(VN));
  }

  public StringRef getName() {
    return new StringRef(bitreaderJNI.Value_getName(swigCPtr, this), true);
  }

  public void setName(SWIGTYPE_p_llvm__Twine Name) {
    bitreaderJNI.Value_setName(swigCPtr, this, SWIGTYPE_p_llvm__Twine.getCPtr(Name));
  }

  public void takeName(Value V) {
    bitreaderJNI.Value_takeName(swigCPtr, this, Value.getCPtr(V), V);
  }

  public void replaceAllUsesWith(Value V) {
    bitreaderJNI.Value_replaceAllUsesWith(swigCPtr, this, Value.getCPtr(V), V);
  }

  public boolean use_empty() {
    return bitreaderJNI.Value_use_empty(swigCPtr, this);
  }

  public SWIGTYPE_p_value_use_iteratorT_llvm__User_t use_begin() {
    return new SWIGTYPE_p_value_use_iteratorT_llvm__User_t(bitreaderJNI.Value_use_begin__SWIG_0(swigCPtr, this), true);
  }

  public SWIGTYPE_p_value_use_iteratorT_llvm__User_t use_end() {
    return new SWIGTYPE_p_value_use_iteratorT_llvm__User_t(bitreaderJNI.Value_use_end__SWIG_0(swigCPtr, this), true);
  }

  public User use_back() {
    long cPtr = bitreaderJNI.Value_use_back__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new User(cPtr, false);
  }

  public boolean hasOneUse() {
    return bitreaderJNI.Value_hasOneUse(swigCPtr, this);
  }

  public boolean hasNUses(long N) {
    return bitreaderJNI.Value_hasNUses(swigCPtr, this, N);
  }

  public boolean hasNUsesOrMore(long N) {
    return bitreaderJNI.Value_hasNUsesOrMore(swigCPtr, this, N);
  }

  public boolean isUsedInBasicBlock(BasicBlock BB) {
    return bitreaderJNI.Value_isUsedInBasicBlock(swigCPtr, this, BasicBlock.getCPtr(BB), BB);
  }

  public long getNumUses() {
    return bitreaderJNI.Value_getNumUses(swigCPtr, this);
  }

  public void addUse(SWIGTYPE_p_Use U) {
    bitreaderJNI.Value_addUse(swigCPtr, this, SWIGTYPE_p_Use.getCPtr(U));
  }

  public long getValueID() {
    return bitreaderJNI.Value_getValueID(swigCPtr, this);
  }

  public long getRawSubclassOptionalData() {
    return bitreaderJNI.Value_getRawSubclassOptionalData(swigCPtr, this);
  }

  public void clearSubclassOptionalData() {
    bitreaderJNI.Value_clearSubclassOptionalData(swigCPtr, this);
  }

  public boolean hasSameSubclassOptionalData(Value V) {
    return bitreaderJNI.Value_hasSameSubclassOptionalData(swigCPtr, this, Value.getCPtr(V), V);
  }

  public void intersectOptionalDataWith(Value V) {
    bitreaderJNI.Value_intersectOptionalDataWith(swigCPtr, this, Value.getCPtr(V), V);
  }

  public boolean hasValueHandle() {
    return bitreaderJNI.Value_hasValueHandle(swigCPtr, this);
  }

  public Value stripPointerCasts() {
    long cPtr = bitreaderJNI.Value_stripPointerCasts__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Value(cPtr, false);
  }

  public Value stripPointerCastsNoFollowAliases() {
    long cPtr = bitreaderJNI.Value_stripPointerCastsNoFollowAliases__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Value(cPtr, false);
  }

  public Value stripInBoundsConstantOffsets() {
    long cPtr = bitreaderJNI.Value_stripInBoundsConstantOffsets__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Value(cPtr, false);
  }

  public Value stripInBoundsOffsets() {
    long cPtr = bitreaderJNI.Value_stripInBoundsOffsets__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Value(cPtr, false);
  }

  public boolean isDereferenceablePointer() {
    return bitreaderJNI.Value_isDereferenceablePointer(swigCPtr, this);
  }

  public Value DoPHITranslation(BasicBlock CurBB, BasicBlock PredBB) {
    long cPtr = bitreaderJNI.Value_DoPHITranslation__SWIG_0(swigCPtr, this, BasicBlock.getCPtr(CurBB), CurBB, BasicBlock.getCPtr(PredBB), PredBB);
    return (cPtr == 0) ? null : new Value(cPtr, false);
  }

  public void mutateType(Type Ty) {
    bitreaderJNI.Value_mutateType(swigCPtr, this, Type.getCPtr(Ty), Ty);
  }

  public String toString() {
    return bitreaderJNI.Value_toString(swigCPtr, this);
  }

  public final static class ValueTy {
    public final static Value.ValueTy ArgumentVal = new Value.ValueTy("ArgumentVal");
    public final static Value.ValueTy BasicBlockVal = new Value.ValueTy("BasicBlockVal");
    public final static Value.ValueTy FunctionVal = new Value.ValueTy("FunctionVal");
    public final static Value.ValueTy GlobalAliasVal = new Value.ValueTy("GlobalAliasVal");
    public final static Value.ValueTy GlobalVariableVal = new Value.ValueTy("GlobalVariableVal");
    public final static Value.ValueTy UndefValueVal = new Value.ValueTy("UndefValueVal");
    public final static Value.ValueTy BlockAddressVal = new Value.ValueTy("BlockAddressVal");
    public final static Value.ValueTy ConstantExprVal = new Value.ValueTy("ConstantExprVal");
    public final static Value.ValueTy ConstantAggregateZeroVal = new Value.ValueTy("ConstantAggregateZeroVal");
    public final static Value.ValueTy ConstantDataArrayVal = new Value.ValueTy("ConstantDataArrayVal");
    public final static Value.ValueTy ConstantDataVectorVal = new Value.ValueTy("ConstantDataVectorVal");
    public final static Value.ValueTy ConstantIntVal = new Value.ValueTy("ConstantIntVal");
    public final static Value.ValueTy ConstantFPVal = new Value.ValueTy("ConstantFPVal");
    public final static Value.ValueTy ConstantArrayVal = new Value.ValueTy("ConstantArrayVal");
    public final static Value.ValueTy ConstantStructVal = new Value.ValueTy("ConstantStructVal");
    public final static Value.ValueTy ConstantVectorVal = new Value.ValueTy("ConstantVectorVal");
    public final static Value.ValueTy ConstantPointerNullVal = new Value.ValueTy("ConstantPointerNullVal");
    public final static Value.ValueTy MDNodeVal = new Value.ValueTy("MDNodeVal");
    public final static Value.ValueTy MDStringVal = new Value.ValueTy("MDStringVal");
    public final static Value.ValueTy InlineAsmVal = new Value.ValueTy("InlineAsmVal");
    public final static Value.ValueTy PseudoSourceValueVal = new Value.ValueTy("PseudoSourceValueVal");
    public final static Value.ValueTy FixedStackPseudoSourceValueVal = new Value.ValueTy("FixedStackPseudoSourceValueVal");
    public final static Value.ValueTy InstructionVal = new Value.ValueTy("InstructionVal");
    public final static Value.ValueTy ConstantFirstVal = new Value.ValueTy("ConstantFirstVal", bitreaderJNI.Value_ConstantFirstVal_get());
    public final static Value.ValueTy ConstantLastVal = new Value.ValueTy("ConstantLastVal", bitreaderJNI.Value_ConstantLastVal_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ValueTy swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ValueTy.class + " with value " + swigValue);
    }

    private ValueTy(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ValueTy(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ValueTy(String swigName, ValueTy swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ValueTy[] swigValues = { ArgumentVal, BasicBlockVal, FunctionVal, GlobalAliasVal, GlobalVariableVal, UndefValueVal, BlockAddressVal, ConstantExprVal, ConstantAggregateZeroVal, ConstantDataArrayVal, ConstantDataVectorVal, ConstantIntVal, ConstantFPVal, ConstantArrayVal, ConstantStructVal, ConstantVectorVal, ConstantPointerNullVal, MDNodeVal, MDStringVal, InlineAsmVal, PseudoSourceValueVal, FixedStackPseudoSourceValueVal, InstructionVal, ConstantFirstVal, ConstantLastVal };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static long MaximumAlignment = bitreaderJNI.Value_MaximumAlignment_get();
}
