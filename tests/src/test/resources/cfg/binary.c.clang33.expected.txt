CFG: testChar
#0000:	 assign: tmp0 = *C0 + *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0001:	 assign: *CR = tmp0
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0002:	 assign: tmp1 = *C0 - *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0003:	 assign: *CR = tmp1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0004:	 assign: tmp2 = *C0 * *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0005:	 assign: *CR = tmp2
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0006:	 assign: tmp3 = *C0 / *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0007:	 assign: *CR = tmp3
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0008:	 assign: tmp4 = *C0 % *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0009:	 assign: *CR = tmp4
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0010:	 assign: tmp5 = *C0 & *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0011:	 assign: *CR = tmp5
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0012:	 assign: tmp6 = *C0 | *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0013:	 assign: *CR = tmp6
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0014:	 assign: tmp7 = *C0 ^ *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0015:	 assign: *CR = tmp7
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0016:	 assign: tmp8 = *C0 << *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0017:	 assign: *CR = tmp8
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0018:	 assign: tmp9 = *C0 >> *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0019:	 assign: *CR = tmp9
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0020:	 return <exit>
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)

CFG: testCharCmp
#0000:	 assign: tmp0 = *C0 < *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0001:	 assign: *CR = tmp0
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0002:	 assign: tmp1 = *C0 > *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0003:	 assign: *CR = tmp1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0004:	 assign: tmp2 = *C0 <= *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0005:	 assign: *CR = tmp2
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0006:	 assign: tmp3 = *C0 >= *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0007:	 assign: *CR = tmp3
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0008:	 assign: tmp4 = *C0 == *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0009:	 assign: *CR = tmp4
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0010:	 assign: tmp5 = *C0 != *C1
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0011:	 assign: *CR = tmp5
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0012:	 return <exit>
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)

CFG: testCharLogical
#0000:	 assign: tmp0 = *C0 != 0
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0001:	 if: tmp0 then #0002:	 else #0003:
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0002:	 assign: tmp1 = *C1 != 0
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0004:	 assign: tmp2 = tmp1
 - no source -
#0005:	 noop
 - no source -
#0006:	 assign: *CR = tmp2
 - no source -
#0007:	 assign: tmp3 = *C0 != 0
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0008:	 if: tmp3 then #0009:	 else #0010:
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0009:	 assign: tmp4 = -1
 - no source -
#0011:	 noop
 - no source -
#0012:	 assign: *CR = tmp4
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0013:	 return <exit>
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0010:	 assign: tmp5 = *C1 != 0
binary.c:32 MAKE_ALL_INTEGER_TESTS(char, Char, C)
#0014:	 assign: tmp4 = tmp5 next: #0011:
 - no source -
#0003:	 assign: tmp2 = 0 next: #0005:
 - no source -

CFG: testUChar
#0000:	 assign: tmp0 = *UC0 + *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0001:	 assign: *UCR = tmp0
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0002:	 assign: tmp1 = *UC0 - *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0003:	 assign: *UCR = tmp1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0004:	 assign: tmp2 = *UC0 * *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0005:	 assign: *UCR = tmp2
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0006:	 assign: tmp3 = *UC0 / *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0007:	 assign: *UCR = tmp3
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0008:	 assign: tmp4 = *UC0 % *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0009:	 assign: *UCR = tmp4
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0010:	 assign: tmp5 = *UC0 & *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0011:	 assign: *UCR = tmp5
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0012:	 assign: tmp6 = *UC0 | *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0013:	 assign: *UCR = tmp6
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0014:	 assign: tmp7 = *UC0 ^ *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0015:	 assign: *UCR = tmp7
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0016:	 assign: tmp8 = *UC0 << *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0017:	 assign: *UCR = tmp8
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0018:	 assign: tmp9 = *UC0 >> *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0019:	 assign: *UCR = tmp9
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0020:	 return <exit>
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)

CFG: testUCharCmp
#0000:	 assign: tmp0 = *UC0 < *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0001:	 assign: *UCR = tmp0
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0002:	 assign: tmp1 = *UC0 > *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0003:	 assign: *UCR = tmp1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0004:	 assign: tmp2 = *UC0 <= *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0005:	 assign: *UCR = tmp2
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0006:	 assign: tmp3 = *UC0 >= *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0007:	 assign: *UCR = tmp3
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0008:	 assign: tmp4 = *UC0 == *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0009:	 assign: *UCR = tmp4
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0010:	 assign: tmp5 = *UC0 != *UC1
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0011:	 assign: *UCR = tmp5
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0012:	 return <exit>
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)

CFG: testUCharLogical
#0000:	 assign: tmp0 = *UC0 != 0
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0001:	 if: tmp0 then #0002:	 else #0003:
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0002:	 assign: tmp1 = *UC1 != 0
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0004:	 assign: tmp2 = tmp1
 - no source -
#0005:	 noop
 - no source -
#0006:	 assign: *UCR = tmp2
 - no source -
#0007:	 assign: tmp3 = *UC0 != 0
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0008:	 if: tmp3 then #0009:	 else #0010:
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0009:	 assign: tmp4 = -1
 - no source -
#0011:	 noop
 - no source -
#0012:	 assign: *UCR = tmp4
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0013:	 return <exit>
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0010:	 assign: tmp5 = *UC1 != 0
binary.c:33 MAKE_ALL_INTEGER_TESTS(unsigned char, UChar, UC)
#0014:	 assign: tmp4 = tmp5 next: #0011:
 - no source -
#0003:	 assign: tmp2 = 0 next: #0005:
 - no source -

CFG: testShort
#0000:	 assign: tmp0 = *S0 + *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0001:	 assign: *SR = tmp0
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0002:	 assign: tmp1 = *S0 - *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0003:	 assign: *SR = tmp1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0004:	 assign: tmp2 = *S0 * *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0005:	 assign: *SR = tmp2
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0006:	 assign: tmp3 = *S0 / *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0007:	 assign: *SR = tmp3
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0008:	 assign: tmp4 = *S0 % *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0009:	 assign: *SR = tmp4
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0010:	 assign: tmp5 = *S0 & *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0011:	 assign: *SR = tmp5
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0012:	 assign: tmp6 = *S0 | *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0013:	 assign: *SR = tmp6
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0014:	 assign: tmp7 = *S0 ^ *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0015:	 assign: *SR = tmp7
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0016:	 assign: tmp8 = *S0 << *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0017:	 assign: *SR = tmp8
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0018:	 assign: tmp9 = *S0 >> *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0019:	 assign: *SR = tmp9
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0020:	 return <exit>
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)

CFG: testShortCmp
#0000:	 assign: tmp0 = *S0 < *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0001:	 assign: *SR = tmp0
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0002:	 assign: tmp1 = *S0 > *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0003:	 assign: *SR = tmp1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0004:	 assign: tmp2 = *S0 <= *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0005:	 assign: *SR = tmp2
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0006:	 assign: tmp3 = *S0 >= *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0007:	 assign: *SR = tmp3
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0008:	 assign: tmp4 = *S0 == *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0009:	 assign: *SR = tmp4
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0010:	 assign: tmp5 = *S0 != *S1
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0011:	 assign: *SR = tmp5
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0012:	 return <exit>
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)

CFG: testShortLogical
#0000:	 assign: tmp0 = *S0 != 0
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0001:	 if: tmp0 then #0002:	 else #0003:
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0002:	 assign: tmp1 = *S1 != 0
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0004:	 assign: tmp2 = tmp1
 - no source -
#0005:	 noop
 - no source -
#0006:	 assign: *SR = tmp2
 - no source -
#0007:	 assign: tmp3 = *S0 != 0
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0008:	 if: tmp3 then #0009:	 else #0010:
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0009:	 assign: tmp4 = -1
 - no source -
#0011:	 noop
 - no source -
#0012:	 assign: *SR = tmp4
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0013:	 return <exit>
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0010:	 assign: tmp5 = *S1 != 0
binary.c:34 MAKE_ALL_INTEGER_TESTS(short, Short, S)
#0014:	 assign: tmp4 = tmp5 next: #0011:
 - no source -
#0003:	 assign: tmp2 = 0 next: #0005:
 - no source -

CFG: testUShort
#0000:	 assign: tmp0 = *US0 + *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0001:	 assign: *USR = tmp0
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0002:	 assign: tmp1 = *US0 - *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0003:	 assign: *USR = tmp1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0004:	 assign: tmp2 = *US0 * *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0005:	 assign: *USR = tmp2
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0006:	 assign: tmp3 = *US0 / *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0007:	 assign: *USR = tmp3
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0008:	 assign: tmp4 = *US0 % *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0009:	 assign: *USR = tmp4
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0010:	 assign: tmp5 = *US0 & *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0011:	 assign: *USR = tmp5
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0012:	 assign: tmp6 = *US0 | *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0013:	 assign: *USR = tmp6
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0014:	 assign: tmp7 = *US0 ^ *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0015:	 assign: *USR = tmp7
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0016:	 assign: tmp8 = *US0 << *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0017:	 assign: *USR = tmp8
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0018:	 assign: tmp9 = *US0 >> *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0019:	 assign: *USR = tmp9
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0020:	 return <exit>
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)

CFG: testUShortCmp
#0000:	 assign: tmp0 = *US0 < *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0001:	 assign: *USR = tmp0
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0002:	 assign: tmp1 = *US0 > *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0003:	 assign: *USR = tmp1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0004:	 assign: tmp2 = *US0 <= *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0005:	 assign: *USR = tmp2
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0006:	 assign: tmp3 = *US0 >= *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0007:	 assign: *USR = tmp3
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0008:	 assign: tmp4 = *US0 == *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0009:	 assign: *USR = tmp4
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0010:	 assign: tmp5 = *US0 != *US1
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0011:	 assign: *USR = tmp5
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0012:	 return <exit>
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)

CFG: testUShortLogical
#0000:	 assign: tmp0 = *US0 != 0
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0001:	 if: tmp0 then #0002:	 else #0003:
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0002:	 assign: tmp1 = *US1 != 0
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0004:	 assign: tmp2 = tmp1
 - no source -
#0005:	 noop
 - no source -
#0006:	 assign: *USR = tmp2
 - no source -
#0007:	 assign: tmp3 = *US0 != 0
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0008:	 if: tmp3 then #0009:	 else #0010:
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0009:	 assign: tmp4 = -1
 - no source -
#0011:	 noop
 - no source -
#0012:	 assign: *USR = tmp4
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0013:	 return <exit>
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0010:	 assign: tmp5 = *US1 != 0
binary.c:35 MAKE_ALL_INTEGER_TESTS(unsigned short, UShort, US)
#0014:	 assign: tmp4 = tmp5 next: #0011:
 - no source -
#0003:	 assign: tmp2 = 0 next: #0005:
 - no source -

CFG: testInt
#0000:	 assign: tmp0 = *I0 + *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0001:	 assign: *IR = tmp0
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0002:	 assign: tmp1 = *I0 - *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0003:	 assign: *IR = tmp1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0004:	 assign: tmp2 = *I0 * *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0005:	 assign: *IR = tmp2
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0006:	 assign: tmp3 = *I0 / *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0007:	 assign: *IR = tmp3
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0008:	 assign: tmp4 = *I0 % *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0009:	 assign: *IR = tmp4
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0010:	 assign: tmp5 = *I0 & *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0011:	 assign: *IR = tmp5
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0012:	 assign: tmp6 = *I0 | *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0013:	 assign: *IR = tmp6
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0014:	 assign: tmp7 = *I0 ^ *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0015:	 assign: *IR = tmp7
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0016:	 assign: tmp8 = *I0 << *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0017:	 assign: *IR = tmp8
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0018:	 assign: tmp9 = *I0 >> *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0019:	 assign: *IR = tmp9
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0020:	 return <exit>
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)

CFG: testIntCmp
#0000:	 assign: tmp0 = *I0 < *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0001:	 assign: *IR = tmp0
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0002:	 assign: tmp1 = *I0 > *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0003:	 assign: *IR = tmp1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0004:	 assign: tmp2 = *I0 <= *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0005:	 assign: *IR = tmp2
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0006:	 assign: tmp3 = *I0 >= *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0007:	 assign: *IR = tmp3
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0008:	 assign: tmp4 = *I0 == *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0009:	 assign: *IR = tmp4
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0010:	 assign: tmp5 = *I0 != *I1
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0011:	 assign: *IR = tmp5
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0012:	 return <exit>
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)

CFG: testIntLogical
#0000:	 assign: tmp0 = *I0 != 0
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0001:	 if: tmp0 then #0002:	 else #0003:
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0002:	 assign: tmp1 = *I1 != 0
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0004:	 assign: tmp2 = tmp1
 - no source -
#0005:	 noop
 - no source -
#0006:	 assign: *IR = tmp2
 - no source -
#0007:	 assign: tmp3 = *I0 != 0
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0008:	 if: tmp3 then #0009:	 else #0010:
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0009:	 assign: tmp4 = -1
 - no source -
#0011:	 noop
 - no source -
#0012:	 assign: *IR = tmp4
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0013:	 return <exit>
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0010:	 assign: tmp5 = *I1 != 0
binary.c:36 MAKE_ALL_INTEGER_TESTS(int, Int, I)
#0014:	 assign: tmp4 = tmp5 next: #0011:
 - no source -
#0003:	 assign: tmp2 = 0 next: #0005:
 - no source -

CFG: testUInt
#0000:	 assign: tmp0 = *UI0 + *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0001:	 assign: *UIR = tmp0
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0002:	 assign: tmp1 = *UI0 - *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0003:	 assign: *UIR = tmp1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0004:	 assign: tmp2 = *UI0 * *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0005:	 assign: *UIR = tmp2
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0006:	 assign: tmp3 = *UI0 / *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0007:	 assign: *UIR = tmp3
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0008:	 assign: tmp4 = *UI0 % *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0009:	 assign: *UIR = tmp4
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0010:	 assign: tmp5 = *UI0 & *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0011:	 assign: *UIR = tmp5
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0012:	 assign: tmp6 = *UI0 | *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0013:	 assign: *UIR = tmp6
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0014:	 assign: tmp7 = *UI0 ^ *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0015:	 assign: *UIR = tmp7
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0016:	 assign: tmp8 = *UI0 << *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0017:	 assign: *UIR = tmp8
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0018:	 assign: tmp9 = *UI0 >> *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0019:	 assign: *UIR = tmp9
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0020:	 return <exit>
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)

CFG: testUIntCmp
#0000:	 assign: tmp0 = *UI0 < *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0001:	 assign: *UIR = tmp0
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0002:	 assign: tmp1 = *UI0 > *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0003:	 assign: *UIR = tmp1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0004:	 assign: tmp2 = *UI0 <= *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0005:	 assign: *UIR = tmp2
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0006:	 assign: tmp3 = *UI0 >= *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0007:	 assign: *UIR = tmp3
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0008:	 assign: tmp4 = *UI0 == *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0009:	 assign: *UIR = tmp4
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0010:	 assign: tmp5 = *UI0 != *UI1
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0011:	 assign: *UIR = tmp5
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0012:	 return <exit>
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)

CFG: testUIntLogical
#0000:	 assign: tmp0 = *UI0 != 0
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0001:	 if: tmp0 then #0002:	 else #0003:
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0002:	 assign: tmp1 = *UI1 != 0
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0004:	 assign: tmp2 = tmp1
 - no source -
#0005:	 noop
 - no source -
#0006:	 assign: *UIR = tmp2
 - no source -
#0007:	 assign: tmp3 = *UI0 != 0
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0008:	 if: tmp3 then #0009:	 else #0010:
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0009:	 assign: tmp4 = -1
 - no source -
#0011:	 noop
 - no source -
#0012:	 assign: *UIR = tmp4
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0013:	 return <exit>
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0010:	 assign: tmp5 = *UI1 != 0
binary.c:37 MAKE_ALL_INTEGER_TESTS(unsigned int, UInt, UI)
#0014:	 assign: tmp4 = tmp5 next: #0011:
 - no source -
#0003:	 assign: tmp2 = 0 next: #0005:
 - no source -

CFG: testLong
#0000:	 assign: tmp0 = *L0 + *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0001:	 assign: *LR = tmp0
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0002:	 assign: tmp1 = *L0 - *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0003:	 assign: *LR = tmp1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0004:	 assign: tmp2 = *L0 * *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0005:	 assign: *LR = tmp2
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0006:	 assign: tmp3 = *L0 / *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0007:	 assign: *LR = tmp3
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0008:	 assign: tmp4 = *L0 % *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0009:	 assign: *LR = tmp4
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0010:	 assign: tmp5 = *L0 & *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0011:	 assign: *LR = tmp5
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0012:	 assign: tmp6 = *L0 | *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0013:	 assign: *LR = tmp6
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0014:	 assign: tmp7 = *L0 ^ *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0015:	 assign: *LR = tmp7
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0016:	 assign: tmp8 = *L0 << *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0017:	 assign: *LR = tmp8
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0018:	 assign: tmp9 = *L0 >> *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0019:	 assign: *LR = tmp9
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0020:	 return <exit>
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)

CFG: testLongCmp
#0000:	 assign: tmp0 = *L0 < *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0001:	 assign: *LR = tmp0
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0002:	 assign: tmp1 = *L0 > *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0003:	 assign: *LR = tmp1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0004:	 assign: tmp2 = *L0 <= *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0005:	 assign: *LR = tmp2
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0006:	 assign: tmp3 = *L0 >= *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0007:	 assign: *LR = tmp3
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0008:	 assign: tmp4 = *L0 == *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0009:	 assign: *LR = tmp4
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0010:	 assign: tmp5 = *L0 != *L1
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0011:	 assign: *LR = tmp5
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0012:	 return <exit>
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)

CFG: testLongLogical
#0000:	 assign: tmp0 = *L0 != 0
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0001:	 if: tmp0 then #0002:	 else #0003:
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0002:	 assign: tmp1 = *L1 != 0
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0004:	 assign: tmp2 = tmp1
 - no source -
#0005:	 noop
 - no source -
#0006:	 assign: *LR = tmp2
 - no source -
#0007:	 assign: tmp3 = *L0 != 0
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0008:	 if: tmp3 then #0009:	 else #0010:
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0009:	 assign: tmp4 = -1
 - no source -
#0011:	 noop
 - no source -
#0012:	 assign: *LR = tmp4
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0013:	 return <exit>
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0010:	 assign: tmp5 = *L1 != 0
binary.c:38 MAKE_ALL_INTEGER_TESTS(long, Long, L)
#0014:	 assign: tmp4 = tmp5 next: #0011:
 - no source -
#0003:	 assign: tmp2 = 0 next: #0005:
 - no source -

CFG: testULong
#0000:	 assign: tmp0 = *UL0 + *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0001:	 assign: *ULR = tmp0
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0002:	 assign: tmp1 = *UL0 - *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0003:	 assign: *ULR = tmp1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0004:	 assign: tmp2 = *UL0 * *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0005:	 assign: *ULR = tmp2
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0006:	 assign: tmp3 = *UL0 / *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0007:	 assign: *ULR = tmp3
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0008:	 assign: tmp4 = *UL0 % *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0009:	 assign: *ULR = tmp4
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0010:	 assign: tmp5 = *UL0 & *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0011:	 assign: *ULR = tmp5
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0012:	 assign: tmp6 = *UL0 | *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0013:	 assign: *ULR = tmp6
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0014:	 assign: tmp7 = *UL0 ^ *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0015:	 assign: *ULR = tmp7
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0016:	 assign: tmp8 = *UL0 << *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0017:	 assign: *ULR = tmp8
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0018:	 assign: tmp9 = *UL0 >> *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0019:	 assign: *ULR = tmp9
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0020:	 return <exit>
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)

CFG: testULongCmp
#0000:	 assign: tmp0 = *UL0 < *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0001:	 assign: *ULR = tmp0
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0002:	 assign: tmp1 = *UL0 > *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0003:	 assign: *ULR = tmp1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0004:	 assign: tmp2 = *UL0 <= *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0005:	 assign: *ULR = tmp2
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0006:	 assign: tmp3 = *UL0 >= *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0007:	 assign: *ULR = tmp3
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0008:	 assign: tmp4 = *UL0 == *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0009:	 assign: *ULR = tmp4
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0010:	 assign: tmp5 = *UL0 != *UL1
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0011:	 assign: *ULR = tmp5
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0012:	 return <exit>
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)

CFG: testULongLogical
#0000:	 assign: tmp0 = *UL0 != 0
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0001:	 if: tmp0 then #0002:	 else #0003:
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0002:	 assign: tmp1 = *UL1 != 0
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0004:	 assign: tmp2 = tmp1
 - no source -
#0005:	 noop
 - no source -
#0006:	 assign: *ULR = tmp2
 - no source -
#0007:	 assign: tmp3 = *UL0 != 0
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0008:	 if: tmp3 then #0009:	 else #0010:
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0009:	 assign: tmp4 = -1
 - no source -
#0011:	 noop
 - no source -
#0012:	 assign: *ULR = tmp4
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0013:	 return <exit>
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0010:	 assign: tmp5 = *UL1 != 0
binary.c:39 MAKE_ALL_INTEGER_TESTS(unsigned long, ULong, UL)
#0014:	 assign: tmp4 = tmp5 next: #0011:
 - no source -
#0003:	 assign: tmp2 = 0 next: #0005:
 - no source -

CFG: testFloat
#0000:	 assign: tmp0 = *F0 + *F1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0001:	 assign: *FR = tmp0
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0002:	 assign: tmp1 = *F0 - *F1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0003:	 assign: *FR = tmp1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0004:	 assign: tmp2 = *F0 * *F1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0005:	 assign: *FR = tmp2
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0006:	 assign: tmp3 = *F0 / *F1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0007:	 assign: *FR = tmp3
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0008:	 return <exit>
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)

CFG: testFloatCmp
#0000:	 assign: tmp0 = *F0 < *F1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0001:	 assign: *FR = tmp0
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0002:	 assign: tmp1 = *F0 > *F1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0003:	 assign: *FR = tmp1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0004:	 assign: tmp2 = *F0 <= *F1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0005:	 assign: *FR = tmp2
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0006:	 assign: tmp3 = *F0 >= *F1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0007:	 assign: *FR = tmp3
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0008:	 assign: tmp4 = *F0 == *F1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0009:	 assign: *FR = tmp4
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0010:	 assign: tmp5 = *F0 != *F1
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0011:	 assign: *FR = tmp5
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0012:	 return <exit>
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)

CFG: testFloatLogical
#0000:	 assign: tmp0 = *F0 != 0.0
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0001:	 if: tmp0 then #0002:	 else #0003:
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0002:	 assign: tmp1 = *F1 != 0.0
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0004:	 assign: tmp2 = tmp1
 - no source -
#0005:	 noop
 - no source -
#0006:	 assign: *FR = tmp2
 - no source -
#0007:	 assign: tmp3 = *F0 != 0.0
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0008:	 if: tmp3 then #0009:	 else #0010:
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0009:	 assign: tmp4 = -1
 - no source -
#0011:	 noop
 - no source -
#0012:	 assign: *FR = tmp4
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0013:	 return <exit>
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0010:	 assign: tmp5 = *F1 != 0.0
binary.c:66 MAKE_ALL_FLOAT_TESTS(float, Float, F)
#0014:	 assign: tmp4 = tmp5 next: #0011:
 - no source -
#0003:	 assign: tmp2 = 0 next: #0005:
 - no source -

CFG: testDouble
#0000:	 assign: tmp0 = *D0 + *D1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0001:	 assign: *DR = tmp0
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0002:	 assign: tmp1 = *D0 - *D1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0003:	 assign: *DR = tmp1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0004:	 assign: tmp2 = *D0 * *D1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0005:	 assign: *DR = tmp2
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0006:	 assign: tmp3 = *D0 / *D1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0007:	 assign: *DR = tmp3
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0008:	 return <exit>
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)

CFG: testDoubleCmp
#0000:	 assign: tmp0 = *D0 < *D1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0001:	 assign: *DR = tmp0
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0002:	 assign: tmp1 = *D0 > *D1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0003:	 assign: *DR = tmp1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0004:	 assign: tmp2 = *D0 <= *D1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0005:	 assign: *DR = tmp2
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0006:	 assign: tmp3 = *D0 >= *D1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0007:	 assign: *DR = tmp3
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0008:	 assign: tmp4 = *D0 == *D1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0009:	 assign: *DR = tmp4
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0010:	 assign: tmp5 = *D0 != *D1
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0011:	 assign: *DR = tmp5
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0012:	 return <exit>
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)

CFG: testDoubleLogical
#0000:	 assign: tmp0 = *D0 != 0.0
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0001:	 if: tmp0 then #0002:	 else #0003:
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0002:	 assign: tmp1 = *D1 != 0.0
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0004:	 assign: tmp2 = tmp1
 - no source -
#0005:	 noop
 - no source -
#0006:	 assign: *DR = tmp2
 - no source -
#0007:	 assign: tmp3 = *D0 != 0.0
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0008:	 if: tmp3 then #0009:	 else #0010:
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0009:	 assign: tmp4 = -1
 - no source -
#0011:	 noop
 - no source -
#0012:	 assign: *DR = tmp4
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0013:	 return <exit>
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0010:	 assign: tmp5 = *D1 != 0.0
binary.c:67 MAKE_ALL_FLOAT_TESTS(double, Double, D)
#0014:	 assign: tmp4 = tmp5 next: #0011:
 - no source -
#0003:	 assign: tmp2 = 0 next: #0005:
 - no source -

CFG: testLongDouble
#0000:	 assign: tmp0 = *LD0 + *LD1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0001:	 assign: *LDR = tmp0
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0002:	 assign: tmp1 = *LD0 - *LD1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0003:	 assign: *LDR = tmp1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0004:	 assign: tmp2 = *LD0 * *LD1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0005:	 assign: *LDR = tmp2
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0006:	 assign: tmp3 = *LD0 / *LD1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0007:	 assign: *LDR = tmp3
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0008:	 return <exit>
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)

CFG: testLongDoubleCmp
#0000:	 assign: tmp0 = *LD0 < *LD1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0001:	 assign: *LDR = tmp0
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0002:	 assign: tmp1 = *LD0 > *LD1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0003:	 assign: *LDR = tmp1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0004:	 assign: tmp2 = *LD0 <= *LD1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0005:	 assign: *LDR = tmp2
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0006:	 assign: tmp3 = *LD0 >= *LD1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0007:	 assign: *LDR = tmp3
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0008:	 assign: tmp4 = *LD0 == *LD1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0009:	 assign: *LDR = tmp4
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0010:	 assign: tmp5 = *LD0 != *LD1
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0011:	 assign: *LDR = tmp5
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0012:	 return <exit>
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)

CFG: testLongDoubleLogical
#0000:	 assign: tmp0 = *LD0 != 0.0
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0001:	 if: tmp0 then #0002:	 else #0003:
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0002:	 assign: tmp1 = *LD1 != 0.0
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0004:	 assign: tmp2 = tmp1
 - no source -
#0005:	 noop
 - no source -
#0006:	 assign: *LDR = tmp2
 - no source -
#0007:	 assign: tmp3 = *LD0 != 0.0
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0008:	 if: tmp3 then #0009:	 else #0010:
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0009:	 assign: tmp4 = -1
 - no source -
#0011:	 noop
 - no source -
#0012:	 assign: *LDR = tmp4
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0013:	 return <exit>
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0010:	 assign: tmp5 = *LD1 != 0.0
binary.c:68 MAKE_ALL_FLOAT_TESTS(long double, LongDouble, LD)
#0014:	 assign: tmp4 = tmp5 next: #0011:
 - no source -
#0003:	 assign: tmp2 = 0 next: #0005:
 - no source -

CFG: <module init>
#0000:	 assign: *C0 = 0
 - no source -
#0001:	 assign: *C1 = 0
 - no source -
#0002:	 assign: *CR = 0
 - no source -
#0003:	 assign: *UC0 = 0
 - no source -
#0004:	 assign: *UC1 = 0
 - no source -
#0005:	 assign: *UCR = 0
 - no source -
#0006:	 assign: *S0 = 0
 - no source -
#0007:	 assign: *S1 = 0
 - no source -
#0008:	 assign: *SR = 0
 - no source -
#0009:	 assign: *US0 = 0
 - no source -
#0010:	 assign: *US1 = 0
 - no source -
#0011:	 assign: *USR = 0
 - no source -
#0012:	 assign: *I0 = 0
 - no source -
#0013:	 assign: *I1 = 0
 - no source -
#0014:	 assign: *IR = 0
 - no source -
#0015:	 assign: *UI0 = 0
 - no source -
#0016:	 assign: *UI1 = 0
 - no source -
#0017:	 assign: *UIR = 0
 - no source -
#0018:	 assign: *L0 = 0
 - no source -
#0019:	 assign: *L1 = 0
 - no source -
#0020:	 assign: *LR = 0
 - no source -
#0021:	 assign: *UL0 = 0
 - no source -
#0022:	 assign: *UL1 = 0
 - no source -
#0023:	 assign: *ULR = 0
 - no source -
#0024:	 assign: *F0 = 0.0
 - no source -
#0025:	 assign: *F1 = 0.0
 - no source -
#0026:	 assign: *FR = 0.0
 - no source -
#0027:	 assign: *D0 = 0.0
 - no source -
#0028:	 assign: *D1 = 0.0
 - no source -
#0029:	 assign: *DR = 0.0
 - no source -
#0030:	 assign: *LD0 = 0.0
 - no source -
#0031:	 assign: *LD1 = 0.0
 - no source -
#0032:	 assign: *LDR = 0.0 <exit>
 - no source -

